#!/usr/bin/env python3
from collections import OrderedDict
import argparse
import asyncio
import json
import os

from lobot import Lobot


parser = argparse.ArgumentParser(description='Run LoBot')
parser.add_argument('directory', metavar='DIR', type=str, help='bot working directory', default='.')
args = parser.parse_args()

dir = os.path.abspath(os.path.expanduser(args.directory))
if not os.path.isdir(dir):
    os.mkdir(dir)
os.chdir(dir)
config_path = os.path.join(dir, 'config.json')
if not os.path.isfile(config_path):
    with open(config_path, 'w') as config:
        defaults = OrderedDict([
            ('lobot', OrderedDict([
                ('nick', 'LoBot'),
                ('username', 'LoBot'),
                ('host', 'irc.freenode.net'),
                ('port', 8001),
                ('ssl', False),
                ('channels', [
                    '#lobot'
                ]),
                ('plugdir', 'plugs'),
                ('plugins', [
                    'echo'
                ])
            ])),
            ('echo', OrderedDict([
                ('state', False)
            ]))
        ])
        plugs_path = os.path.join(dir, defaults['lobot']['plugdir'])
        if not os.path.exists(plugs_path):
            os.mkdir(plugs_path)
        with open(os.path.join(plugs_path, 'echo.py'), 'w') as echo:
            echo.write('''\
from lobot.plugins import Plugin, command


class Echo(Plugin):
    async def on_load(self):
        self._state = self.config.get('state', False)

    async def on_msg(self, nick: str, channel: str, message: str):
        if self._state:
            self.say(channel, message)

    async def on_private_msg(self, nick: str, message: str):
        if self._state:
            self.say(nick, message)

    @command('^echo (on|off|status)', 'i')
    async def echo_control(self, nick: str, target: str, message: str, match):
        text = match.group(1).lower()
        if text == 'status':
            self.say(target, 'Echo status: ' + ['OFF', 'ON'][self._state])
            return
        self._state = (text == 'on')
''')
        json.dump(defaults, config, indent=4)

loop = asyncio.get_event_loop()
bot = Lobot(loop, dir)
loop.run_forever()
