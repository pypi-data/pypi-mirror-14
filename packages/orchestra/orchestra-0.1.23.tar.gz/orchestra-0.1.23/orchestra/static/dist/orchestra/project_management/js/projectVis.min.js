!function(){"use strict";var t=angular.module("orchestra.project_management.services");t.factory("projectVis",["$modal","$location","dataService","orchestraApi","crosshair","visUtils","tasksVis","assignmentsVis","iterationsVis","axis",function(t,a,e,n,r,s,o,i,c,d){return{setup:function(t,a,n){var o=this;t.vis=o;var i={scaleHeight:40,barHeight:30,lanePadding:{top:30,bottom:25},marginLeft:200,marginRight:10,scaleWidth:1350};e.setup(a),s.setup(d3.select(n),i),r.setup(),o.axis=d,o.dataService=e,o.params=s.params;var c=s.parentContainer.append("div").attr("class","axis-wrapper");c.append("svg").attr({"class":"x axis",width:s.getSvgWidth(),height:s.params.scaleHeight}).style("margin-left",s.params.marginLeft),c.append("span").attr("class","x label"),t.$on("orchestra:projectManagement:dataUpdate",o.draw),e.updateData(function(){s.parentContainer.node().scrollLeft=100})},draw:function(){d.draw(),o.draw(),r.draw(),s.parentContainer.style({"margin-left":s.svgLeftMargin()+"px"})},createSubsequentTasks:function(){n.createSubsequentTasks(e.projectId).then(function(){e.updateData()},function(t){var a="Could not create subsequent tasks.";400===t.status&&(a=t.data.message),alert(a)})},showProjectData:function(){t.open({templateUrl:"/static/orchestra/project_management/partials/data_modal.html",controller:["$scope",function(t){t.data=e.data.project,t.header=e.data.project.short_description,t.admin_url=e.data.project.admin_url}]})},showSlackActions:function(){var a=t.open({templateUrl:"/static/orchestra/project_management/partials/slack_modal.html",controller:["$scope","$log",function(t,r){t.editSlackMembership=function(t,r){n.editSlackMembership(t,e.projectId,r).then(function(){a.close()},function(a){var e="Could not "+t+" user.";400===a.status&&(e=a.data.message),alert(e)})}}]})},endProject:function(){confirm("Are you sure you want to end this project? This cannot be undone.")&&n.endProject(e.projectId).then(function(){a.path("/")},function(t){var a="Could not end project.";400===t.status&&(a=t.data.message),alert(a)})}}}])}();
//# sourceMappingURL=data:application/json;base64,
