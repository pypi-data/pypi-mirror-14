!function(){"use strict";var t=angular.module("orchestra.project_management.services");t.factory("dataService",["$rootScope","$location","orchestraApi",function(t,n,a){var s,e=new Date;return{setup:function(t){s={tasks:{}},this.projectId=t},updateData:function(s){var e=this;a.projectInformation(this.projectId).then(function(a){e.setData(a.data),"Aborted"===e.data.project.status?(alert("Project is aborted."),n.path("/")):(t.$broadcast("orchestra:projectManagement:dataUpdate"),s&&s())},function(t){var n="Error updating data.";400===t.status&&(n=t.data.message),alert(n)})},setData:function(t){this.data=t;var n={};this.data.steps.forEach(function(t){n[t.slug]=t}),this.data.steps=n;for(var a in this.data.tasks){var s=this.data.tasks[a];s.is_human=this.data.steps[s.step_slug].is_human,s.assignments.forEach(function(t){t.task=s,t.iterations.forEach(function(n,a){n.assignment=t})})}var e=this;this.timeSortedSlugs=Object.keys(this.data.tasks).sort(function(t,n){var a=e.data.tasks[t],s=e.data.tasks[n];return d3.ascending(new Date(a.start_datetime),new Date(s.start_datetime))})},taskFromKey:function(t){return this.data.tasks[t]},keyFromTask:function(t){return t.step_slug},awaitingAssignment:function(t){var n=["Awaiting Processing","Pending Review"];return n.indexOf(t.status)>=0},inProgressAssignment:function(t){var n=["Processing","Post-review Processing","Reviewing"];return n.indexOf(t.status)>=0||this.awaitingAssignment(t)},taskMeta:function(t,n,a){var e=s.tasks[t]||{};return void 0===a?e[n]:(e[n]=a,void(s.tasks[t]=e))},taskEnd:function(t){if(this.awaitingAssignment(t))return e.toString();var n=t.start_datetime;return t.assignments.forEach(function(t){if(t.iterations.length){var a=t.iterations[t.iterations.length-1];new Date(a.end_datetime)>new Date(n)&&(n=a.end_datetime)}}),n},assignmentFromKey:function(t){return this.taskFromKey(t.taskKey).assignments[t.assignmentIndex]},keyFromAssignment:function(t){var n=this;return{taskKey:n.keyFromTask(t.task),assignmentIndex:n.indexFromAssignment(t)}},indexFromAssignment:function(t){return t.task.assignments.indexOf(t)},iterationFromKey:function(t){return this.assignmentFromKey(t.assignmentKey).iterations[t.iterationIndex]},keyFromIteration:function(t){var n=this;return{assignmentKey:n.keyFromAssignment(t.assignment),iterationIndex:t.assignment.iterations.indexOf(t)}}}}])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9yY2hlc3RyYS9wcm9qZWN0X21hbmFnZW1lbnQvanMvZGF0YV9zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbInNlcnZpY2VNb2R1bGUiLCJhbmd1bGFyIiwibW9kdWxlIiwiZmFjdG9yeSIsIiRyb290U2NvcGUiLCIkbG9jYXRpb24iLCJvcmNoZXN0cmFBcGkiLCJfbWV0YSIsIl9ub3ciLCJEYXRlIiwic2V0dXAiLCJwcm9qZWN0SWQiLCJ0YXNrcyIsInRoaXMiLCJ1cGRhdGVEYXRhIiwiY2IiLCJkYXRhU2VydmljZSIsInByb2plY3RJbmZvcm1hdGlvbiIsInRoZW4iLCJyZXNwb25zZSIsInNldERhdGEiLCJkYXRhIiwicHJvamVjdCIsInN0YXR1cyIsImFsZXJ0IiwicGF0aCIsIiRicm9hZGNhc3QiLCJlcnJvck1lc3NhZ2UiLCJtZXNzYWdlIiwic3RlcHMiLCJmb3JFYWNoIiwic3RlcCIsInNsdWciLCJzdGVwX3NsdWciLCJ0YXNrIiwiaXNfaHVtYW4iLCJhc3NpZ25tZW50cyIsImFzc2lnbm1lbnQiLCJpdGVyYXRpb25zIiwiaXRlcmF0aW9uIiwiaSIsInRpbWVTb3J0ZWRTbHVncyIsIk9iamVjdCIsImtleXMiLCJzb3J0IiwiYSIsImIiLCJwcmV2aW91c1Rhc2siLCJuZXh0VGFzayIsImQzIiwiYXNjZW5kaW5nIiwic3RhcnRfZGF0ZXRpbWUiLCJ0YXNrRnJvbUtleSIsImtleSIsImtleUZyb21UYXNrIiwiYXdhaXRpbmdBc3NpZ25tZW50Iiwic3RhdHVzZXMiLCJpbmRleE9mIiwiaW5Qcm9ncmVzc0Fzc2lnbm1lbnQiLCJ0YXNrTWV0YSIsInRhc2tLZXkiLCJtZXRhS2V5IiwidmFsdWUiLCJ1bmRlZmluZWQiLCJ0YXNrRW5kIiwidG9TdHJpbmciLCJsZW5ndGgiLCJsYXN0SXRlcmF0aW9uIiwiZW5kX2RhdGV0aW1lIiwiYXNzaWdubWVudEZyb21LZXkiLCJhc3NpZ25tZW50SW5kZXgiLCJrZXlGcm9tQXNzaWdubWVudCIsImluZGV4RnJvbUFzc2lnbm1lbnQiLCJpdGVyYXRpb25Gcm9tS2V5IiwiYXNzaWdubWVudEtleSIsIml0ZXJhdGlvbkluZGV4Iiwia2V5RnJvbUl0ZXJhdGlvbiJdLCJtYXBwaW5ncyI6IkNBQUEsV0FDRSxZQUVBLElBQUlBLEdBQWlCQyxRQUFRQyxPQUFPLHdDQUVwQ0YsR0FBY0csUUFBUSxlQUFBLGFBQUEsWUFBQSxlQUFlLFNBQVNDLEVBQVlDLEVBQVdDLEdBS25FLEdBQUlDLEdBQ0FDLEVBQU8sR0FBSUMsS0FFZixRQUNFQyxNQUFPLFNBQVNDLEdBQ2RKLEdBQVNLLFVBQ1RDLEtBQUtGLFVBQVlBLEdBRW5CRyxXQUFZLFNBQVNDLEdBSW5CLEdBQUlDLEdBQWNILElBQ2xCUCxHQUFhVyxtQkFBbUJKLEtBQUtGLFdBQ2xDTyxLQUFLLFNBQVNDLEdBQ2JILEVBQVlJLFFBQVFELEVBQVNFLE1BQ1csWUFBcENMLEVBQVlLLEtBQUtDLFFBQVFDLFFBQzNCQyxNQUFNLHVCQUNObkIsRUFBVW9CLEtBQUssT0FHZnJCLEVBQVdzQixXQUFXLDBDQUNsQlgsR0FDRkEsTUFHSCxTQUFTSSxHQUNWLEdBQUlRLEdBQWUsc0JBQ0ssT0FBcEJSLEVBQVNJLFNBQ1hJLEVBQWVSLEVBQVNFLEtBQUtPLFNBRS9CSixNQUFNRyxNQUdaUCxRQUFTLFNBQVNDLEdBSWhCUixLQUFLUSxLQUFPQSxDQUVaLElBQUlRLEtBQ0poQixNQUFLUSxLQUFLUSxNQUFNQyxRQUFRLFNBQVNDLEdBQy9CRixFQUFNRSxFQUFLQyxNQUFRRCxJQUdyQmxCLEtBQUtRLEtBQUtRLE1BQVFBLENBRWxCLEtBQUssR0FBSUksS0FBYXBCLE1BQUtRLEtBQUtULE1BQU8sQ0FDckMsR0FBSXNCLEdBQU9yQixLQUFLUSxLQUFLVCxNQUFNcUIsRUFDM0JDLEdBQUtDLFNBQVd0QixLQUFLUSxLQUFLUSxNQUFNSyxFQUFLRCxXQUFXRSxTQUNoREQsRUFBS0UsWUFBWU4sUUFBUSxTQUFTTyxHQUNoQ0EsRUFBV0gsS0FBT0EsRUFDbEJHLEVBQVdDLFdBQVdSLFFBQVEsU0FBU1MsRUFBV0MsR0FDaERELEVBQVVGLFdBQWFBLE1BSzdCLEdBQUlyQixHQUFjSCxJQUNsQkEsTUFBSzRCLGdCQUFrQkMsT0FBT0MsS0FBSzlCLEtBQUtRLEtBQUtULE9BQU9nQyxLQUFLLFNBQVNDLEVBQUdDLEdBQ25FLEdBQUlDLEdBQWUvQixFQUFZSyxLQUFLVCxNQUFNaUMsR0FDdENHLEVBQVdoQyxFQUFZSyxLQUFLVCxNQUFNa0MsRUFDdEMsT0FBT0csSUFBR0MsVUFBVSxHQUFJekMsTUFBS3NDLEVBQWFJLGdCQUN0QixHQUFJMUMsTUFBS3VDLEVBQVNHLG9CQUcxQ0MsWUFBYSxTQUFTQyxHQUlwQixNQUFPeEMsTUFBS1EsS0FBS1QsTUFBTXlDLElBRXpCQyxZQUFhLFNBQVNwQixHQUlwQixNQUFPQSxHQUFLRCxXQUVkc0IsbUJBQW9CLFNBQVNyQixHQUkzQixHQUFJc0IsSUFBWSxzQkFBdUIsaUJBQ3ZDLE9BQU9BLEdBQVNDLFFBQVF2QixFQUFLWCxTQUFXLEdBRTFDbUMscUJBQXNCLFNBQVN4QixHQUk3QixHQUFJc0IsSUFBWSxhQUFjLHlCQUEwQixZQUN4RCxPQUFPQSxHQUFTQyxRQUFRdkIsRUFBS1gsU0FBVyxHQUFLVixLQUFLMEMsbUJBQW1CckIsSUFFdkV5QixTQUFVLFNBQVNDLEVBQVNDLEVBQVNDLEdBTW5DLEdBQUlILEdBQVdwRCxFQUFNSyxNQUFNZ0QsTUFDM0IsT0FBY0csVUFBVkQsRUFLS0gsRUFBU0UsSUFKaEJGLEVBQVNFLEdBQVdDLE9BQ3BCdkQsRUFBTUssTUFBTWdELEdBQVdELEtBTTNCSyxRQUFTLFNBQVM5QixHQUloQixHQUFJckIsS0FBSzBDLG1CQUFtQnJCLEdBQzFCLE1BQU8xQixHQUFLeUQsVUFFZCxJQUFJRCxHQUFVOUIsRUFBS2lCLGNBU25CLE9BUkFqQixHQUFLRSxZQUFZTixRQUFRLFNBQVNPLEdBQ2hDLEdBQUlBLEVBQVdDLFdBQVc0QixPQUFRLENBQ2hDLEdBQUlDLEdBQWdCOUIsRUFBV0MsV0FBV0QsRUFBV0MsV0FBVzRCLE9BQVMsRUFDckUsSUFBSXpELE1BQUswRCxFQUFjQyxjQUFnQixHQUFJM0QsTUFBS3VELEtBQ2xEQSxFQUFVRyxFQUFjQyxpQkFJdkJKLEdBR1RLLGtCQUFtQixTQUFTaEIsR0FJMUIsTUFBT3hDLE1BQUt1QyxZQUFZQyxFQUFJTyxTQUNqQnhCLFlBQVlpQixFQUFJaUIsa0JBRTdCQyxrQkFBbUIsU0FBU2xDLEdBSTFCLEdBQUlyQixHQUFjSCxJQUNsQixRQUNFK0MsUUFBVzVDLEVBQVlzQyxZQUFZakIsRUFBV0gsTUFDOUNvQyxnQkFBbUJ0RCxFQUFZd0Qsb0JBQW9CbkMsS0FHdkRtQyxvQkFBcUIsU0FBU25DLEdBSTVCLE1BQU9BLEdBQVdILEtBQUtFLFlBQVlxQixRQUFRcEIsSUFHN0NvQyxpQkFBa0IsU0FBU3BCLEdBSXpCLE1BQU94QyxNQUFLd0Qsa0JBQWtCaEIsRUFBSXFCLGVBQWVwQyxXQUFXZSxFQUFJc0IsaUJBRWxFQyxpQkFBa0IsU0FBU3JDLEdBSXpCLEdBQUl2QixHQUFjSCxJQUNsQixRQUNFNkQsY0FBaUIxRCxFQUFZdUQsa0JBQWtCaEMsRUFBVUYsWUFDekRzQyxlQUFrQnBDLEVBQVVGLFdBQVdDLFdBQVdtQixRQUFRbEIiLCJmaWxlIjoib3JjaGVzdHJhL3Byb2plY3RfbWFuYWdlbWVudC9qcy9kYXRhX3NlcnZpY2UubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBzZXJ2aWNlTW9kdWxlID0gIGFuZ3VsYXIubW9kdWxlKCdvcmNoZXN0cmEucHJvamVjdF9tYW5hZ2VtZW50LnNlcnZpY2VzJyk7XG5cbiAgc2VydmljZU1vZHVsZS5mYWN0b3J5KCdkYXRhU2VydmljZScsIGZ1bmN0aW9uKCRyb290U2NvcGUsICRsb2NhdGlvbiwgb3JjaGVzdHJhQXBpKSB7XG4gICAgLyoqXG4gICAgICogU2VydmljZSB0byBzaGFyZSBhbmQgbWFuaXB1bGF0ZSBwcm9qZWN0IG1hbmFnZW1lbnQgZGF0YSBhY3Jvc3NcbiAgICAgKiB2aXN1YWxpemF0aW9uIGNvbXBvbmVudHMuXG4gICAgICovXG4gICAgdmFyIF9tZXRhO1xuICAgIHZhciBfbm93ID0gbmV3IERhdGUoKTtcblxuICAgIHJldHVybiB7XG4gICAgICBzZXR1cDogZnVuY3Rpb24ocHJvamVjdElkKSB7XG4gICAgICAgIF9tZXRhID0geyd0YXNrcyc6IHt9fTtcbiAgICAgICAgdGhpcy5wcm9qZWN0SWQgPSBwcm9qZWN0SWQ7XG4gICAgICB9LFxuICAgICAgdXBkYXRlRGF0YTogZnVuY3Rpb24oY2IpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHJpZXZlcyBsYXRlc3QgcHJvamVjdCBkYXRhIGZyb20gT3JjaGVzdHJhLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGRhdGFTZXJ2aWNlID0gdGhpcztcbiAgICAgICAgb3JjaGVzdHJhQXBpLnByb2plY3RJbmZvcm1hdGlvbih0aGlzLnByb2plY3RJZClcbiAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgZGF0YVNlcnZpY2Uuc2V0RGF0YShyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgIGlmIChkYXRhU2VydmljZS5kYXRhLnByb2plY3Quc3RhdHVzID09PSAnQWJvcnRlZCcpIHtcbiAgICAgICAgICAgICAgYWxlcnQoJ1Byb2plY3QgaXMgYWJvcnRlZC4nKTtcbiAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ29yY2hlc3RyYTpwcm9qZWN0TWFuYWdlbWVudDpkYXRhVXBkYXRlJyk7XG4gICAgICAgICAgICAgIGlmIChjYikge1xuICAgICAgICAgICAgICAgIGNiKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9ICdFcnJvciB1cGRhdGluZyBkYXRhLic7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDApIHtcbiAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gcmVzcG9uc2UuZGF0YS5tZXNzYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWxlcnQoZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBzZXREYXRhOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcmVwYXJlcyByYXcgcHJvamVjdCBkYXRhIGZvciB2aXN1YWxpemF0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcblxuICAgICAgICB2YXIgc3RlcHMgPSB7fTtcbiAgICAgICAgdGhpcy5kYXRhLnN0ZXBzLmZvckVhY2goZnVuY3Rpb24oc3RlcCkge1xuICAgICAgICAgIHN0ZXBzW3N0ZXAuc2x1Z10gPSBzdGVwXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZGF0YS5zdGVwcyA9IHN0ZXBzO1xuXG4gICAgICAgIGZvciAodmFyIHN0ZXBfc2x1ZyBpbiB0aGlzLmRhdGEudGFza3MpIHtcbiAgICAgICAgICB2YXIgdGFzayA9IHRoaXMuZGF0YS50YXNrc1tzdGVwX3NsdWddO1xuICAgICAgICAgIHRhc2suaXNfaHVtYW4gPSB0aGlzLmRhdGEuc3RlcHNbdGFzay5zdGVwX3NsdWddLmlzX2h1bWFuO1xuICAgICAgICAgIHRhc2suYXNzaWdubWVudHMuZm9yRWFjaChmdW5jdGlvbihhc3NpZ25tZW50KSB7XG4gICAgICAgICAgICBhc3NpZ25tZW50LnRhc2sgPSB0YXNrO1xuICAgICAgICAgICAgYXNzaWdubWVudC5pdGVyYXRpb25zLmZvckVhY2goZnVuY3Rpb24oaXRlcmF0aW9uLCBpKSB7XG4gICAgICAgICAgICAgIGl0ZXJhdGlvbi5hc3NpZ25tZW50ID0gYXNzaWdubWVudDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkYXRhU2VydmljZSA9IHRoaXM7XG4gICAgICAgIHRoaXMudGltZVNvcnRlZFNsdWdzID0gT2JqZWN0LmtleXModGhpcy5kYXRhLnRhc2tzKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICB2YXIgcHJldmlvdXNUYXNrID0gZGF0YVNlcnZpY2UuZGF0YS50YXNrc1thXTtcbiAgICAgICAgICB2YXIgbmV4dFRhc2sgPSBkYXRhU2VydmljZS5kYXRhLnRhc2tzW2JdO1xuICAgICAgICAgIHJldHVybiBkMy5hc2NlbmRpbmcobmV3IERhdGUocHJldmlvdXNUYXNrLnN0YXJ0X2RhdGV0aW1lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBEYXRlKG5leHRUYXNrLnN0YXJ0X2RhdGV0aW1lKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHRhc2tGcm9tS2V5OiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIHRhc2sgZm9yIGEgZ2l2ZW4ga2V5LlxuICAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS50YXNrc1trZXldO1xuICAgICAgfSxcbiAgICAgIGtleUZyb21UYXNrOiBmdW5jdGlvbih0YXNrKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBrZXkgZm9yIGEgZ2l2ZW4gdGFzay5cbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiB0YXNrLnN0ZXBfc2x1ZztcbiAgICAgIH0sXG4gICAgICBhd2FpdGluZ0Fzc2lnbm1lbnQ6IGZ1bmN0aW9uKHRhc2spIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERldGVybWluZXMgd2hldGhlciB0YXNrIGNhbiBiZSBnaXZlbiBhIG5ldyBhc3NpZ25tZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIHN0YXR1c2VzID0gWydBd2FpdGluZyBQcm9jZXNzaW5nJywgJ1BlbmRpbmcgUmV2aWV3J11cbiAgICAgICAgcmV0dXJuIHN0YXR1c2VzLmluZGV4T2YodGFzay5zdGF0dXMpID49IDA7XG4gICAgICB9LFxuICAgICAgaW5Qcm9ncmVzc0Fzc2lnbm1lbnQ6IGZ1bmN0aW9uKHRhc2spIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERldGVybWluZXMgd2hldGhlciB0YXNrIGhhcyBhIGN1cnJlbnRseS1wcm9jZXNzaW5nIGFzc2lnbm1lbnQuXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgc3RhdHVzZXMgPSBbJ1Byb2Nlc3NpbmcnLCAnUG9zdC1yZXZpZXcgUHJvY2Vzc2luZycsICdSZXZpZXdpbmcnXVxuICAgICAgICByZXR1cm4gc3RhdHVzZXMuaW5kZXhPZih0YXNrLnN0YXR1cykgPj0gMCB8fCB0aGlzLmF3YWl0aW5nQXNzaWdubWVudCh0YXNrKTtcbiAgICAgIH0sXG4gICAgICB0YXNrTWV0YTogZnVuY3Rpb24odGFza0tleSwgbWV0YUtleSwgdmFsdWUpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0b3JlcyBhbmQgcmVhZHMga2V5ZWQgdGFzayBtZXRhZGF0YS4gU2luY2Ugd2UgdXBkYXRlIGRhdGEgZnJvbSB0aGVcbiAgICAgICAgICogc2VydmVyLCB3ZSBzdG9yZSB0YXNrIHZpc3VhbGl6YXRpb24gZGF0YSBzZXBhcmF0ZWx5IHNvIGl0J3Mgbm90XG4gICAgICAgICAqIG92ZXJ3cml0dGVuLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIHRhc2tNZXRhID0gX21ldGEudGFza3NbdGFza0tleV0gfHwge307XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGFza01ldGFbbWV0YUtleV0gPSB2YWx1ZTtcbiAgICAgICAgICBfbWV0YS50YXNrc1t0YXNrS2V5XSA9IHRhc2tNZXRhO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0YXNrTWV0YVttZXRhS2V5XTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRhc2tFbmQ6IGZ1bmN0aW9uKHRhc2spIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGN1bGF0ZXMgdGhlIGVuZCB0aW1lIGZvciBhIGdpdmVuIHRhc2suXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodGhpcy5hd2FpdGluZ0Fzc2lnbm1lbnQodGFzaykpIHtcbiAgICAgICAgICByZXR1cm4gX25vdy50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0YXNrRW5kID0gdGFzay5zdGFydF9kYXRldGltZTtcbiAgICAgICAgdGFzay5hc3NpZ25tZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGFzc2lnbm1lbnQpIHtcbiAgICAgICAgICBpZiAoYXNzaWdubWVudC5pdGVyYXRpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGxhc3RJdGVyYXRpb24gPSBhc3NpZ25tZW50Lml0ZXJhdGlvbnNbYXNzaWdubWVudC5pdGVyYXRpb25zLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgaWYgKG5ldyBEYXRlKGxhc3RJdGVyYXRpb24uZW5kX2RhdGV0aW1lKSA+IG5ldyBEYXRlKHRhc2tFbmQpKSB7XG4gICAgICAgICAgICAgIHRhc2tFbmQgPSBsYXN0SXRlcmF0aW9uLmVuZF9kYXRldGltZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiB0YXNrRW5kO1xuICAgICAgfSxcblxuICAgICAgYXNzaWdubWVudEZyb21LZXk6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgYXNzaWdubWVudCBmb3IgYSBnaXZlbiBrZXkuXG4gICAgICAgICAqL1xuICAgICAgICByZXR1cm4gdGhpcy50YXNrRnJvbUtleShrZXkudGFza0tleSlcbiAgICAgICAgICAgICAgICAgIC5hc3NpZ25tZW50c1trZXkuYXNzaWdubWVudEluZGV4XTtcbiAgICAgIH0sXG4gICAgICBrZXlGcm9tQXNzaWdubWVudDogZnVuY3Rpb24oYXNzaWdubWVudCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUga2V5IGZvciBhIGdpdmVuIGFzc2lnbm1lbnQuXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgZGF0YVNlcnZpY2UgPSB0aGlzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICd0YXNrS2V5JzogZGF0YVNlcnZpY2Uua2V5RnJvbVRhc2soYXNzaWdubWVudC50YXNrKSxcbiAgICAgICAgICAnYXNzaWdubWVudEluZGV4JzogZGF0YVNlcnZpY2UuaW5kZXhGcm9tQXNzaWdubWVudChhc3NpZ25tZW50KVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaW5kZXhGcm9tQXNzaWdubWVudDogZnVuY3Rpb24oYXNzaWdubWVudCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgYXNzaWdubWVudCBjb3VudGVyIGZvciBhIGdpdmVuIGFzc2lnbm1lbnQuXG4gICAgICAgICAqL1xuICAgICAgICByZXR1cm4gYXNzaWdubWVudC50YXNrLmFzc2lnbm1lbnRzLmluZGV4T2YoYXNzaWdubWVudCk7XG4gICAgICB9LFxuXG4gICAgICBpdGVyYXRpb25Gcm9tS2V5OiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIGl0ZXJhdGlvbiBmb3IgdGhlIGdpdmVuIGtleS5cbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiB0aGlzLmFzc2lnbm1lbnRGcm9tS2V5KGtleS5hc3NpZ25tZW50S2V5KS5pdGVyYXRpb25zW2tleS5pdGVyYXRpb25JbmRleF07XG4gICAgICB9LFxuICAgICAga2V5RnJvbUl0ZXJhdGlvbjogZnVuY3Rpb24oaXRlcmF0aW9uKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBrZXkgZm9yIGEgZ2l2ZW4gaXRlcmF0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGRhdGFTZXJ2aWNlID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAnYXNzaWdubWVudEtleSc6IGRhdGFTZXJ2aWNlLmtleUZyb21Bc3NpZ25tZW50KGl0ZXJhdGlvbi5hc3NpZ25tZW50KSxcbiAgICAgICAgICAnaXRlcmF0aW9uSW5kZXgnOiBpdGVyYXRpb24uYXNzaWdubWVudC5pdGVyYXRpb25zLmluZGV4T2YoaXRlcmF0aW9uKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn0pKCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
