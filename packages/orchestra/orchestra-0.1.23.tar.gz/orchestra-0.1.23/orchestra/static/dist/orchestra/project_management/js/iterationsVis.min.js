!function(){"use strict";var t=angular.module("orchestra.project_management.services");t.factory("iterationsVis",["$modal","dataService","visUtils","axis",function(t,e,n,a){return{relativeTime:!0,draw:function(){var s=n.parentContainer.selectAll(".task").selectAll(".assignment").selectAll(".iteration").data(function(t){var n=[];return e.assignmentFromKey(t).iterations.forEach(function(t,a){a>0&&n.push(e.keyFromIteration(t))}),n});s.exit().remove(),s.enter().append("rect").attr({"class":"iteration",height:n.params.barHeight,stroke:"none","stroke-width":"2px",fill:"rgb(0, 121, 191)"}).on("mouseenter",function(){d3.select(this).attr("stroke","yellow")}).on("mouseleave",function(){d3.select(this).attr("stroke","none")}).on("click",function(n,a){var s=e.iterationFromKey(n);t.open({templateUrl:"/static/orchestra/project_management/partials/data_modal.html",controller:["$scope",function(t){var e=s.assignment.snapshots.snapshots[a];t.data=e?e.data:s.assignment.in_progress_task_data,t.header=s.assignment.task.step_slug+", "+s.assignment.worker.username+", iteration "+a,t.admin_url=s.assignment.admin_url}]})}),s.transition().attr({width:function(t){var n=e.iterationFromKey(t);return a.getOffset(n.end_datetime)-a.getOffset(n.start_datetime)},transform:function(t){var s=e.iterationFromKey(t);return n.translateString(a.getOffset(s.start_datetime)-a.getOffset(s.assignment.task.start_datetime),0)},opacity:function(t){var n=e.iterationFromKey(t),a=n.assignment.task;return(a.assignments.length-a.assignments.indexOf(n.assignment))/a.assignments.length}})}}}])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9yY2hlc3RyYS9wcm9qZWN0X21hbmFnZW1lbnQvanMvaXRlcmF0aW9uc1Zpcy5qcyJdLCJuYW1lcyI6WyJzZXJ2aWNlTW9kdWxlIiwiYW5ndWxhciIsIm1vZHVsZSIsImZhY3RvcnkiLCIkbW9kYWwiLCJkYXRhU2VydmljZSIsInZpc1V0aWxzIiwiYXhpcyIsInJlbGF0aXZlVGltZSIsImRyYXciLCJpdGVyYXRpb25zIiwicGFyZW50Q29udGFpbmVyIiwic2VsZWN0QWxsIiwiZGF0YSIsImFzc2lnbm1lbnRLZXkiLCJhc3NpZ25tZW50RnJvbUtleSIsImZvckVhY2giLCJpdGVyYXRpb24iLCJpIiwicHVzaCIsImtleUZyb21JdGVyYXRpb24iLCJleGl0IiwicmVtb3ZlIiwiZW50ZXIiLCJhcHBlbmQiLCJhdHRyIiwiY2xhc3MiLCJoZWlnaHQiLCJwYXJhbXMiLCJiYXJIZWlnaHQiLCJzdHJva2UiLCJzdHJva2Utd2lkdGgiLCJmaWxsIiwib24iLCJkMyIsInNlbGVjdCIsInRoaXMiLCJpdGVyYXRpb25LZXkiLCJpdGVyYXRpb25Gcm9tS2V5Iiwib3BlbiIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsIiRzY29wZSIsInNuYXBzaG90IiwiYXNzaWdubWVudCIsInNuYXBzaG90cyIsImluX3Byb2dyZXNzX3Rhc2tfZGF0YSIsImhlYWRlciIsInRhc2siLCJzdGVwX3NsdWciLCJ3b3JrZXIiLCJ1c2VybmFtZSIsImFkbWluX3VybCIsInRyYW5zaXRpb24iLCJ3aWR0aCIsImdldE9mZnNldCIsImVuZF9kYXRldGltZSIsInN0YXJ0X2RhdGV0aW1lIiwidHJhbnNmb3JtIiwidHJhbnNsYXRlU3RyaW5nIiwib3BhY2l0eSIsImFzc2lnbm1lbnRzIiwibGVuZ3RoIiwiaW5kZXhPZiJdLCJtYXBwaW5ncyI6IkNBQUEsV0FDRSxZQUVBLElBQUlBLEdBQWdCQyxRQUFRQyxPQUFPLHdDQUVuQ0YsR0FBY0csUUFBUSxpQkFBQSxTQUFBLGNBQUEsV0FBQSxPQUFpQixTQUFTQyxFQUFRQyxFQUFhQyxFQUFVQyxHQUs3RSxPQUNFQyxjQUFjLEVBQ2RDLEtBQU0sV0FJSixHQUFJQyxHQUFhSixFQUFTSyxnQkFBZ0JDLFVBQVUsU0FBU0EsVUFBVSxlQUNwRUEsVUFBVSxjQUNWQyxLQUFLLFNBQVNDLEdBQ2IsR0FBSUosS0FNSixPQUxBTCxHQUFZVSxrQkFBa0JELEdBQWVKLFdBQVdNLFFBQVEsU0FBU0MsRUFBV0MsR0FDOUVBLEVBQUksR0FDTlIsRUFBV1MsS0FBS2QsRUFBWWUsaUJBQWlCSCxNQUcxQ1AsR0FHWEEsR0FBV1csT0FBT0MsU0FDbEJaLEVBQVdhLFFBQVFDLE9BQU8sUUFDdkJDLE1BQ0NDLFFBQVMsWUFDVEMsT0FBVXJCLEVBQVNzQixPQUFPQyxVQUMxQkMsT0FBVSxPQUNWQyxlQUFnQixNQUNoQkMsS0FBUSxxQkFFVEMsR0FBRyxhQUFjLFdBQ2hCQyxHQUFHQyxPQUFPQyxNQUFNWCxLQUFLLFNBQVUsWUFFaENRLEdBQUcsYUFBYyxXQUNoQkMsR0FBR0MsT0FBT0MsTUFBTVgsS0FBSyxTQUFVLFVBRWhDUSxHQUFHLFFBQVMsU0FBU0ksRUFBY25CLEdBQ2xDLEdBQUlELEdBQVlaLEVBQVlpQyxpQkFBaUJELEVBQ3pCakMsR0FBT21DLE1BQ3pCQyxZQUFhLGdFQUNiQyxZQUFBLFNBQVksU0FBU0MsR0FDbkIsR0FBSUMsR0FBVzFCLEVBQVUyQixXQUFXQyxVQUFVQSxVQUFVM0IsRUFDeER3QixHQUFPN0IsS0FBTzhCLEVBQVdBLEVBQVM5QixLQUFPSSxFQUFVMkIsV0FBV0Usc0JBQzlESixFQUFPSyxPQUFTOUIsRUFBVTJCLFdBQVdJLEtBQUtDLFVBQVksS0FDdENoQyxFQUFVMkIsV0FBV00sT0FBT0MsU0FBVyxlQUFpQmpDLEVBQ3hFd0IsRUFBT1UsVUFBWW5DLEVBQVUyQixXQUFXUSxnQkFLaEQxQyxFQUFXMkMsYUFBYTVCLE1BQ3RCNkIsTUFBUyxTQUFTakIsR0FDaEIsR0FBSXBCLEdBQVlaLEVBQVlpQyxpQkFBaUJELEVBQzdDLE9BQU85QixHQUFLZ0QsVUFBVXRDLEVBQVV1QyxjQUFnQmpELEVBQUtnRCxVQUFVdEMsRUFBVXdDLGlCQUMzRUMsVUFBYSxTQUFTckIsR0FDcEIsR0FBSXBCLEdBQVlaLEVBQVlpQyxpQkFBaUJELEVBQzdDLE9BQU8vQixHQUFTcUQsZ0JBQ2JwRCxFQUFLZ0QsVUFBVXRDLEVBQVV3QyxnQkFDekJsRCxFQUFLZ0QsVUFBVXRDLEVBQVUyQixXQUFXSSxLQUFLUyxnQkFBa0IsSUFDaEVHLFFBQVcsU0FBU3ZCLEdBQ2xCLEdBQUlwQixHQUFZWixFQUFZaUMsaUJBQWlCRCxHQUN6Q1csRUFBTy9CLEVBQVUyQixXQUFXSSxJQUNoQyxRQUFRQSxFQUFLYSxZQUFZQyxPQUFTZCxFQUFLYSxZQUFZRSxRQUFROUMsRUFBVTJCLGFBQWVJLEVBQUthLFlBQVlDIiwiZmlsZSI6Im9yY2hlc3RyYS9wcm9qZWN0X21hbmFnZW1lbnQvanMvaXRlcmF0aW9uc1Zpcy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgc2VydmljZU1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdvcmNoZXN0cmEucHJvamVjdF9tYW5hZ2VtZW50LnNlcnZpY2VzJyk7XG5cbiAgc2VydmljZU1vZHVsZS5mYWN0b3J5KCdpdGVyYXRpb25zVmlzJywgZnVuY3Rpb24oJG1vZGFsLCBkYXRhU2VydmljZSwgdmlzVXRpbHMsIGF4aXMpIHtcbiAgICAvKipcbiAgICAgKiBTZXJ2aWNlIHRvIG1vZHVsYXJpemUgaXRlcmF0aW9uIHZpc3VhbGl6YXRpb24gYW5kIG1hbmlwdWxhdGlvbiB3aXRoaW5cbiAgICAgKiB0aGUgcHJvamVjdCBtYW5hZ2VtZW50IHZpZXcuXG4gICAgICovXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlbGF0aXZlVGltZTogdHJ1ZSxcbiAgICAgIGRyYXc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogRHJhd3MvdXBkYXRlcyBpdGVyYXRpb25zIHdpdGhpbiBwcm9qZWN0IG1hbmFnZW1lbnQgdmlzdWFsaXphdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBpdGVyYXRpb25zID0gdmlzVXRpbHMucGFyZW50Q29udGFpbmVyLnNlbGVjdEFsbCgnLnRhc2snKS5zZWxlY3RBbGwoJy5hc3NpZ25tZW50JylcbiAgICAgICAgICAuc2VsZWN0QWxsKCcuaXRlcmF0aW9uJylcbiAgICAgICAgICAuZGF0YShmdW5jdGlvbihhc3NpZ25tZW50S2V5KSB7XG4gICAgICAgICAgICB2YXIgaXRlcmF0aW9ucyA9IFtdO1xuICAgICAgICAgICAgZGF0YVNlcnZpY2UuYXNzaWdubWVudEZyb21LZXkoYXNzaWdubWVudEtleSkuaXRlcmF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZXJhdGlvbiwgaSkge1xuICAgICAgICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRpb25zLnB1c2goZGF0YVNlcnZpY2Uua2V5RnJvbUl0ZXJhdGlvbihpdGVyYXRpb24pKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgICAgICAgIH0pXG5cbiAgICAgICAgaXRlcmF0aW9ucy5leGl0KCkucmVtb3ZlKCk7XG4gICAgICAgIGl0ZXJhdGlvbnMuZW50ZXIoKS5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICdjbGFzcyc6ICdpdGVyYXRpb24nLFxuICAgICAgICAgICAgJ2hlaWdodCc6IHZpc1V0aWxzLnBhcmFtcy5iYXJIZWlnaHQsXG4gICAgICAgICAgICAnc3Ryb2tlJzogJ25vbmUnLFxuICAgICAgICAgICAgJ3N0cm9rZS13aWR0aCc6ICcycHgnLFxuICAgICAgICAgICAgJ2ZpbGwnOiAncmdiKDAsIDEyMSwgMTkxKScsXG4gICAgICAgICAgfSlcbiAgICAgICAgICAub24oJ21vdXNlZW50ZXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hdHRyKCdzdHJva2UnLCAneWVsbG93Jyk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAub24oJ21vdXNlbGVhdmUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hdHRyKCdzdHJva2UnLCAnbm9uZScpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLm9uKCdjbGljaycsIGZ1bmN0aW9uKGl0ZXJhdGlvbktleSwgaSkge1xuICAgICAgICAgICAgdmFyIGl0ZXJhdGlvbiA9IGRhdGFTZXJ2aWNlLml0ZXJhdGlvbkZyb21LZXkoaXRlcmF0aW9uS2V5KTtcbiAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJG1vZGFsLm9wZW4oe1xuICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9zdGF0aWMvb3JjaGVzdHJhL3Byb2plY3RfbWFuYWdlbWVudC9wYXJ0aWFscy9kYXRhX21vZGFsLmh0bWwnLFxuICAgICAgICAgICAgICBjb250cm9sbGVyOiBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgc25hcHNob3QgPSBpdGVyYXRpb24uYXNzaWdubWVudC5zbmFwc2hvdHMuc25hcHNob3RzW2ldO1xuICAgICAgICAgICAgICAgICRzY29wZS5kYXRhID0gc25hcHNob3QgPyBzbmFwc2hvdC5kYXRhIDogaXRlcmF0aW9uLmFzc2lnbm1lbnQuaW5fcHJvZ3Jlc3NfdGFza19kYXRhO1xuICAgICAgICAgICAgICAgICRzY29wZS5oZWFkZXIgPSBpdGVyYXRpb24uYXNzaWdubWVudC50YXNrLnN0ZXBfc2x1ZyArICcsICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRpb24uYXNzaWdubWVudC53b3JrZXIudXNlcm5hbWUgKyAnLCBpdGVyYXRpb24gJyArIGlcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRtaW5fdXJsID0gaXRlcmF0aW9uLmFzc2lnbm1lbnQuYWRtaW5fdXJsXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcblxuICAgICAgICBpdGVyYXRpb25zLnRyYW5zaXRpb24oKS5hdHRyKHtcbiAgICAgICAgICAnd2lkdGgnOiBmdW5jdGlvbihpdGVyYXRpb25LZXkpIHtcbiAgICAgICAgICAgIHZhciBpdGVyYXRpb24gPSBkYXRhU2VydmljZS5pdGVyYXRpb25Gcm9tS2V5KGl0ZXJhdGlvbktleSk7XG4gICAgICAgICAgICByZXR1cm4gYXhpcy5nZXRPZmZzZXQoaXRlcmF0aW9uLmVuZF9kYXRldGltZSkgLSBheGlzLmdldE9mZnNldChpdGVyYXRpb24uc3RhcnRfZGF0ZXRpbWUpfSxcbiAgICAgICAgICAndHJhbnNmb3JtJzogZnVuY3Rpb24oaXRlcmF0aW9uS2V5KSB7XG4gICAgICAgICAgICB2YXIgaXRlcmF0aW9uID0gZGF0YVNlcnZpY2UuaXRlcmF0aW9uRnJvbUtleShpdGVyYXRpb25LZXkpO1xuICAgICAgICAgICAgcmV0dXJuIHZpc1V0aWxzLnRyYW5zbGF0ZVN0cmluZyhcbiAgICAgICAgICAgICAgKGF4aXMuZ2V0T2Zmc2V0KGl0ZXJhdGlvbi5zdGFydF9kYXRldGltZSkgLVxuICAgICAgICAgICAgICAgYXhpcy5nZXRPZmZzZXQoaXRlcmF0aW9uLmFzc2lnbm1lbnQudGFzay5zdGFydF9kYXRldGltZSkpLCAwKX0sXG4gICAgICAgICAgJ29wYWNpdHknOiBmdW5jdGlvbihpdGVyYXRpb25LZXkpIHtcbiAgICAgICAgICAgIHZhciBpdGVyYXRpb24gPSBkYXRhU2VydmljZS5pdGVyYXRpb25Gcm9tS2V5KGl0ZXJhdGlvbktleSk7XG4gICAgICAgICAgICB2YXIgdGFzayA9IGl0ZXJhdGlvbi5hc3NpZ25tZW50LnRhc2s7XG4gICAgICAgICAgICByZXR1cm4gKHRhc2suYXNzaWdubWVudHMubGVuZ3RoIC0gdGFzay5hc3NpZ25tZW50cy5pbmRleE9mKGl0ZXJhdGlvbi5hc3NpZ25tZW50KSkgLyB0YXNrLmFzc2lnbm1lbnRzLmxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuICB9KTtcbn0pKCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
