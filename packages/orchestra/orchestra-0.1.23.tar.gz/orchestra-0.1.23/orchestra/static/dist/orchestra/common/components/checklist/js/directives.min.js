!function(){"use strict";function t(t,e,n,o){return{restrict:"E",scope:{data:"=",author:"@?",imagePrefix:"@?"},link:function(t,n,i){var a={title:"Update the hero image (This is a sample item! Click on the text to edit or click to the right to expand.)",comments:[{author:"jane",timestamp:new Date(new Date-108e5),text:"The hero image you've chosen doesn't fit well with the color scheme. Try something less washed out?"},{author:"john",timestamp:new Date(new Date-72e5),text:"Sounds good! I swapped it out, what do you think? "},{author:"",text:"This is a sample checklist comment. You can add a new comment for each new round of iteration on your work!"}],checked:!1,expanded:!1,readonly:!0,index:0,order:0};t.data=t.data||{},t.data.items=t.data.items||[a],t.data.deletedItems=t.data.deletedItems||[],t.hideCompleted=!1,o.signals.registerSignal("submit.before",function(){t.data.items.forEach(function(e){e.comments[e.comments.length-1].text&&(e.comments[e.comments.length-1].author=t.author,e.comments[e.comments.length-1].timestamp=Date.now(),e.comments.push({author:"",text:""}))})}),o.signals.registerSignal("submit.error",function(){t.data.items.forEach(function(t){t.comments[t.comments.length-1].text&&(t.comments.pop(),t.comments[t.comments.length-1].author="",t.comments[t.comments.length-1].timestamp=void 0)})}),t.preventAction=!1;var r=n.find("ul.checklist"),s=dragula([r.get(0)],{moves:function(t,e,n){return n.className.indexOf("checklist-item")>=0||n.className.indexOf("item-title-input")>=0&&n.className.indexOf("readonly")>=0||n.className.indexOf("item-title")>=0&&n.className.indexOf("item-title-input")<0},invalid:function(e,n){return t.preventAction}});s.on("drag",function(){t.preventAction=!0,t.$apply()}),s.on("dragend",function(){c(),t.preventAction=!1,t.$apply()});var c=function(){for(var t=n.get(0).querySelectorAll(".checklist-item"),e=0;e<t.length;e++){var o=t[e];m(o.getAttribute("data-key")).order=e}},m=function(e){for(var n,o=t.data.items.length-1;o>=0;o--)if(n=t.data.items[o],n.$$hashKey===e)return n};t.addItem=function(){t.data.items.push({title:"",comments:[{author:t.author,text:""}],checked:!1,expanded:!1,readonly:!0,order:t.data.items.length})},t.removeItem=function(n,o){var i=t.data.items.indexOf(n);o&&!confirm("Are you sure you want to delete this item?")||(t.preventAction=!0,t.data.items.splice(i,1),t.data.deletedItems.push(n),e(function(){c(),t.preventAction=!1},0,!1))},t.editItem=function(e,n){e.readonly&&(n&&n.target.focus(),t.data.items.forEach(function(t){t.readonly=!0})),e.readonly=!e.readonly},t.expandItem=function(e){e.expanded=!e.expanded,t.data.items.forEach(function(t){t.readonly=!0})},t.getCommentTimestamp=function(t){return new Date(t.timestamp).toLocaleString()}},templateUrl:"/static/orchestra/common/components/checklist/partials/checklist.html"}}function e(t,e,n,o){return{restrict:"E",link:function(t,n,o){t.autosizeInput=function(t,e,n,o){function i(t){return t.replace(a,"&nbsp;").replace(r,"&lt;").replace(s,"&gt;")}var a=/\s/g,r=/>/g,s=/</g;o=o||t.value||"";var c=window.getComputedStyle(t),m="font-family:"+c.fontFamily+";font-size:"+c.fontSize;e.style.cssText+=m,e.innerHTML=i(o);var d=window.getComputedStyle(e).width;return"0px"===d&&(d=n),t.style.width=d,d},t.setupAutosizer=function(n){var o=document.createElement("div");o.className="ghost",o.style.cssText="box-sizing:content-box;display:inline-block;height:0;overflow:hidden;position:absolute;top:0;visibility:hidden;white-space:nowrap;",document.body.appendChild(o),n.style.boxSizing="content-box";var i=t.autosizeInput(n,o,0,n.getAttribute("placeholder"));n.addEventListener("input",function(){t.autosizeInput(n,o,i)}),e(function(){t.autosizeInput(n,o,i)},0)},t.setupAutosizer(n.find(".item-title input").get(0))},templateUrl:"/static/orchestra/common/components/checklist/partials/checklist-item.html"}}angular.module("orchestra.common.components.directives").directive("orchestraChecklist",["$http","$timeout","$compile","orchestraService",t]),angular.module("orchestra.common.components.directives").directive("orchestraChecklistItem",["$http","$timeout","$compile","orchestraService",e])}();
//# sourceMappingURL=data:application/json;base64,
