!function(){"use strict";function t(t,s,n,e,r,o,a,i,u,c){var l=this;l.taskId=n.taskId,l.taskAssignment={},l.angularDirective="",l.activate=function(){e.post("/orchestra/api/interface/task_assignment_information/",{task_id:l.taskId}).success(function(t,n,e,o){l.taskAssignment=t,l.project=t.project,l.is_read_only=t.is_read_only,l.work_times_seconds=t.work_times_seconds,l.is_read_only||(c.setup(l),s.$watch("vm.taskAssignment.task.data",function(t,s){t!=s&&r.$broadcast("task.data:change")},!0),l.autoSaver=i,i.setup(s,l.taskId,l.taskAssignment.task.data));var a=window.orchestra.angular_directives[t.workflow.slug][t.workflow_version.slug][t.step.slug],u=[];if(a){a=a.replace(/[A-Z]/g,function(t,s){return(s?"-":"")+t.toLowerCase()});var u=["<",a,' task-assignment="vm.taskAssignment"></',a,">"].join("")}l.angularDirective=u})},l.confirmSubmission=function(s,n){return l.submitting=!0,u.signals.fireSignal("submit.before")===!1?void(l.submitting=!1):void e.post("/orchestra/api/interface/submit_task_assignment/",{task_id:l.taskId,task_data:l.taskAssignment.task.data,command_type:s,work_time_seconds:n}).success(function(s,n,e,r){l.autoSaver.cancel(),u.signals.fireSignal("submit.success"),t.path("/")}).error(function(t,s,n,e){u.signals.fireSignal("submit.error")})["finally"](function(){u.signals.fireSignal("submit.finally"),l.submitting=!1})},l.submitTask=function(t){var s=o.open({templateUrl:"submit_task_modal.html",controller:"SubmitModalInstanceCtrl",size:"sm",windowClass:"modal-confirm-submit",resolve:{command:function(){return t},work_times_seconds:function(){return l.work_times_seconds}}});s.result.then(function(s){l.confirmSubmission(t,s)})},l.activate()}t.$inject=["$location","$scope","$routeParams","$http","$rootScope","$modal","$timeout","autoSaveTask","orchestraService","requiredFields"],angular.module("orchestra.task.controllers").controller("TaskController",t)}(),function(){"use strict";function t(t,s,n,e){t.command=n,t.currentIterationHours=null,t.currentIterationMinutes=null,t.workTimesSeconds=e,t.submit=function(){s.close(t.totalSeconds())},t.cancel=function(){s.dismiss("cancel")},t.totalSeconds=function(){var s=parseInt(t.currentIterationHours),n=parseInt(t.currentIterationMinutes);if(isNaN(s))throw"Please provide hours (0 is acceptable)";if(s.toString()!==t.currentIterationHours)throw"Hours should be a whole number";if(0>s)throw"Hours should be >=0";if(isNaN(n))throw"Please provide minutes (0 is acceptable)";if(n.toString()!==t.currentIterationMinutes)throw"Minutes should be a whole number";if(n>59||0>n)throw"Minutes should be <60 and >=0";return 3600*s+60*n},t.secondsError=function(){try{t.totalSeconds()}catch(s){return s}return null},t.hoursMinutes=function(t){var s=(t-t%3600)/3600,n=t%3600/60;return[s,n]},t.totalPreviousSeconds=function(){var s=0;return angular.forEach(t.workTimesSeconds,function(t){s+=t}),s},t.totalPreviousHoursMinutes=function(){return t.hoursMinutes(t.totalPreviousSeconds())},t.totalHoursMinutes=function(){var s=t.totalPreviousSeconds();try{s+=t.totalSeconds()}catch(n){}return t.hoursMinutes(s)},t.$watchGroup(["currentIterationHours","currentIterationMinutes"],function(s,n){for(var e=0;e<s.length;e++)s[e]!=n[e]&&(t.secondsErrorMessage=t.secondsError())})}angular.module("orchestra.task.controllers").controller("SubmitModalInstanceCtrl",t),t.$inject=["$scope","$modalInstance","command","work_times_seconds"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9yY2hlc3RyYS90YXNrL2pzL2NvbnRyb2xsZXJzLmpzIl0sIm5hbWVzIjpbIlRhc2tDb250cm9sbGVyIiwiJGxvY2F0aW9uIiwiJHNjb3BlIiwiJHJvdXRlUGFyYW1zIiwiJGh0dHAiLCIkcm9vdFNjb3BlIiwiJG1vZGFsIiwiJHRpbWVvdXQiLCJhdXRvU2F2ZVRhc2siLCJvcmNoZXN0cmFTZXJ2aWNlIiwicmVxdWlyZWRGaWVsZHMiLCJ2bSIsInRoaXMiLCJ0YXNrSWQiLCJ0YXNrQXNzaWdubWVudCIsImFuZ3VsYXJEaXJlY3RpdmUiLCJhY3RpdmF0ZSIsInBvc3QiLCJ0YXNrX2lkIiwic3VjY2VzcyIsImRhdGEiLCJzdGF0dXMiLCJoZWFkZXJzIiwiY29uZmlnIiwicHJvamVjdCIsImlzX3JlYWRfb25seSIsIndvcmtfdGltZXNfc2Vjb25kcyIsInNldHVwIiwiJHdhdGNoIiwibmV3VmFsIiwib2xkVmFsIiwiJGJyb2FkY2FzdCIsImF1dG9TYXZlciIsInRhc2siLCJkaXJlY3RpdmVUYWciLCJ3aW5kb3ciLCJvcmNoZXN0cmEiLCJhbmd1bGFyX2RpcmVjdGl2ZXMiLCJ3b3JrZmxvdyIsInNsdWciLCJ3b3JrZmxvd192ZXJzaW9uIiwic3RlcCIsImluamVjdCIsInJlcGxhY2UiLCJsZXR0ZXIiLCJwb3MiLCJ0b0xvd2VyQ2FzZSIsImpvaW4iLCJjb25maXJtU3VibWlzc2lvbiIsImNvbW1hbmQiLCJ0b3RhbFNlY29uZHMiLCJzdWJtaXR0aW5nIiwic2lnbmFscyIsImZpcmVTaWduYWwiLCJ0YXNrX2RhdGEiLCJjb21tYW5kX3R5cGUiLCJ3b3JrX3RpbWVfc2Vjb25kcyIsImNhbmNlbCIsInBhdGgiLCJlcnJvciIsInN1Ym1pdFRhc2siLCJtb2RhbEluc3RhbmNlIiwib3BlbiIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsInNpemUiLCJ3aW5kb3dDbGFzcyIsInJlc29sdmUiLCJyZXN1bHQiLCJ0aGVuIiwiJGluamVjdCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJTdWJtaXRNb2RhbEluc3RhbmNlQ3RybCIsIiRtb2RhbEluc3RhbmNlIiwid29ya1RpbWVzU2Vjb25kcyIsImN1cnJlbnRJdGVyYXRpb25Ib3VycyIsImN1cnJlbnRJdGVyYXRpb25NaW51dGVzIiwic3VibWl0IiwiY2xvc2UiLCJkaXNtaXNzIiwiaG91cnMiLCJwYXJzZUludCIsIm1pbnV0ZXMiLCJpc05hTiIsInRvU3RyaW5nIiwic2Vjb25kc0Vycm9yIiwiaG91cnNNaW51dGVzIiwic2Vjb25kcyIsInRvdGFsUHJldmlvdXNTZWNvbmRzIiwidG90YWwiLCJmb3JFYWNoIiwidG90YWxQcmV2aW91c0hvdXJzTWludXRlcyIsInRvdGFsSG91cnNNaW51dGVzIiwiYWxsU2Vjb25kcyIsIiR3YXRjaEdyb3VwIiwibmV3VGltZXMiLCJvbGRUaW1lcyIsImkiLCJsZW5ndGgiLCJzZWNvbmRzRXJyb3JNZXNzYWdlIl0sIm1hcHBpbmdzIjoiQ0FBQSxXQUNFLFlBTUEsU0FBU0EsR0FBZUMsRUFBV0MsRUFBUUMsRUFBY0MsRUFBT0MsRUFDeENDLEVBQVFDLEVBQVVDLEVBQWNDLEVBQ2hDQyxHQUN0QixHQUFJQyxHQUFLQyxJQUNURCxHQUFHRSxPQUFTVixFQUFhVSxPQUN6QkYsRUFBR0csa0JBQ0hILEVBQUdJLGlCQUFtQixHQUV0QkosRUFBR0ssU0FBVyxXQUNaWixFQUFNYSxLQUFLLHlEQUNDQyxRQUFXUCxFQUFHRSxTQUN4Qk0sUUFBUSxTQUFTQyxFQUFNQyxFQUFRQyxFQUFTQyxHQUN0Q1osRUFBR0csZUFBaUJNLEVBQ3BCVCxFQUFHYSxRQUFVSixFQUFLSSxRQUNsQmIsRUFBR2MsYUFBZUwsRUFBS0ssYUFDdkJkLEVBQUdlLG1CQUFxQk4sRUFBS00sbUJBRXhCZixFQUFHYyxlQUNOZixFQUFlaUIsTUFBTWhCLEdBQ3JCVCxFQUFPMEIsT0FBTyw4QkFBK0IsU0FBU0MsRUFBUUMsR0FHeERELEdBQVVDLEdBQ1p6QixFQUFXMEIsV0FBVyxzQkFFdkIsR0FFSHBCLEVBQUdxQixVQUFZeEIsRUFDZkEs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RUFBVSxLQUFRLEVBQ2pDLFFBQVFQLEVBQU9FLElBR2pCakYsRUFBT3VGLHFCQUF1QixXQUM1QixHQUFJQyxHQUFRLENBSVosT0FIQW5CLFNBQVFvQixRQUFRekYsRUFBT3lFLGlCQUFrQixTQUFTYSxHQUNoREUsR0FBU0YsSUFFSkUsR0FHVHhGLEVBQU8wRiwwQkFBNEIsV0FDakMsTUFBTzFGLEdBQU9xRixhQUFhckYsRUFBT3VGLHlCQUdwQ3ZGLEVBQU8yRixrQkFBb0IsV0FDekIsR0FBSUMsR0FBYTVGLEVBQU91RixzQkFDeEIsS0FDRUssR0FBYzVGLEVBQU9nRCxlQUNyQixNQUFPUyxJQUVULE1BQU96RCxHQUFPcUYsYUFBYU8sSUFHN0I1RixFQUFPNkYsYUFBYSx3QkFDQSwyQkFDRCxTQUFTQyxFQUFVQyxHQUNwQyxJQUFLLEdBQUlDLEdBQUUsRUFBR0EsRUFBSUYsRUFBU0csT0FBUUQsSUFDN0JGLEVBQVNFLElBQU1ELEVBQVNDLEtBQzFCaEcsRUFBT2tHLG9CQUFzQmxHLEVBQU9vRixrQkF2RjVDZixRQUNHQyxPQUFPLDhCQUNQUixXQUFXLDBCQUEyQlMsR0FFekNBLEVBQXdCSCxTQUFXLFNBQVUsaUJBQWtCLFVBQVciLCJmaWxlIjoib3JjaGVzdHJhL3Rhc2svanMvY29udHJvbGxlcnMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdvcmNoZXN0cmEudGFzay5jb250cm9sbGVycycpXG4gICAgLmNvbnRyb2xsZXIoJ1Rhc2tDb250cm9sbGVyJywgVGFza0NvbnRyb2xsZXIpO1xuXG4gIGZ1bmN0aW9uIFRhc2tDb250cm9sbGVyKCRsb2NhdGlvbiwgJHNjb3BlLCAkcm91dGVQYXJhbXMsICRodHRwLCAkcm9vdFNjb3BlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAkbW9kYWwsICR0aW1lb3V0LCBhdXRvU2F2ZVRhc2ssIG9yY2hlc3RyYVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkRmllbGRzKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS50YXNrSWQgPSAkcm91dGVQYXJhbXMudGFza0lkO1xuICAgIHZtLnRhc2tBc3NpZ25tZW50ID0ge307XG4gICAgdm0uYW5ndWxhckRpcmVjdGl2ZSA9ICcnO1xuXG4gICAgdm0uYWN0aXZhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICRodHRwLnBvc3QoJy9vcmNoZXN0cmEvYXBpL2ludGVyZmFjZS90YXNrX2Fzc2lnbm1lbnRfaW5mb3JtYXRpb24vJyxcbiAgICAgICAgICAgICAgICAgeyd0YXNrX2lkJzogdm0udGFza0lkfSkuXG4gICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICB2bS50YXNrQXNzaWdubWVudCA9IGRhdGE7XG4gICAgICAgICAgdm0ucHJvamVjdCA9IGRhdGEucHJvamVjdDtcbiAgICAgICAgICB2bS5pc19yZWFkX29ubHkgPSBkYXRhLmlzX3JlYWRfb25seTtcbiAgICAgICAgICB2bS53b3JrX3RpbWVzX3NlY29uZHMgPSBkYXRhLndvcmtfdGltZXNfc2Vjb25kcztcblxuICAgICAgICAgIGlmICghdm0uaXNfcmVhZF9vbmx5KSB7XG4gICAgICAgICAgICByZXF1aXJlZEZpZWxkcy5zZXR1cCh2bSk7XG4gICAgICAgICAgICAkc2NvcGUuJHdhdGNoKCd2bS50YXNrQXNzaWdubWVudC50YXNrLmRhdGEnLCBmdW5jdGlvbihuZXdWYWwsIG9sZFZhbCkge1xuICAgICAgICAgICAgICAvLyBFbnN1cmUgc2F2ZSBmaXJlZCBhdCBpbml0aWFsaXphdGlvblxuICAgICAgICAgICAgICAvLyBbaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTg5MTU1ODVdXG4gICAgICAgICAgICAgIGlmIChuZXdWYWwgIT0gb2xkVmFsKSB7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCd0YXNrLmRhdGE6Y2hhbmdlJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRydWUpO1xuXG4gICAgICAgICAgICB2bS5hdXRvU2F2ZXIgPSBhdXRvU2F2ZVRhc2s7XG4gICAgICAgICAgICBhdXRvU2F2ZVRhc2suc2V0dXAoJHNjb3BlLCB2bS50YXNrSWQsIHZtLnRhc2tBc3NpZ25tZW50LnRhc2suZGF0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGRpcmVjdGl2ZVRhZyA9ICh3aW5kb3cub3JjaGVzdHJhXG4gICAgICAgICAgICAuYW5ndWxhcl9kaXJlY3RpdmVzW2RhdGEud29ya2Zsb3cuc2x1Z11bZGF0YS53b3JrZmxvd192ZXJzaW9uLnNsdWddXG4gICAgICAgICAgICBbZGF0YS5zdGVwLnNsdWddKTtcblxuICAgICAgICAgIHZhciBpbmplY3QgPSBbXVxuICAgICAgICAgIGlmIChkaXJlY3RpdmVUYWcpIHtcbiAgICAgICAgICAgIC8vIEh5cGhlbmF0ZSBhbmQgbG93ZXJjYXNlIGNhbWVsLWNhc2VkIGRpcmVjdGl2ZSBuYW1lcyBhY2NvcmRpbmcgdG9cbiAgICAgICAgICAgIC8vIGFuZ3VsYXIgc3RhbmRhcmRzLlxuICAgICAgICAgICAgZGlyZWN0aXZlVGFnID0gZGlyZWN0aXZlVGFnLnJlcGxhY2UoL1tBLVpdL2csIGZ1bmN0aW9uKGxldHRlciwgcG9zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChwb3MgPyAnLScgOiAnJykgKyBsZXR0ZXIudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgaW5qZWN0ID0gW1xuICAgICAgICAgICAgICAnPCcsXG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlVGFnLFxuICAgICAgICAgICAgICAnIHRhc2stYXNzaWdubWVudD1cInZtLnRhc2tBc3NpZ25tZW50XCI+PC8nLFxuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZVRhZyxcbiAgICAgICAgICAgICAgICAnPiddLmpvaW4oJycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2bS5hbmd1bGFyRGlyZWN0aXZlID0gaW5qZWN0O1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgdm0uY29uZmlybVN1Ym1pc3Npb24gPSBmdW5jdGlvbihjb21tYW5kLCB0b3RhbFNlY29uZHMpIHtcbiAgICAgIHZtLnN1Ym1pdHRpbmcgPSB0cnVlO1xuICAgICAgaWYgKG9yY2hlc3RyYVNlcnZpY2Uuc2lnbmFscy5maXJlU2lnbmFsKCdzdWJtaXQuYmVmb3JlJykgPT09IGZhbHNlKSB7XG4gICAgICAgIC8vIElmIGFueSBvZiB0aGUgcmVnaXN0ZXJlZCBzaWduYWwgaGFuZGxlcnMgcmV0dXJucyBmYWxzZSwgcHJldmVudFxuICAgICAgICAvLyBzdWJtaXQuXG4gICAgICAgIHZtLnN1Ym1pdHRpbmcgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfTtcbiAgICAgICRodHRwLnBvc3QoJy9vcmNoZXN0cmEvYXBpL2ludGVyZmFjZS9zdWJtaXRfdGFza19hc3NpZ25tZW50LycsXG4gICAgICAgICAgICAgICAgIHsndGFza19pZCc6IHZtLnRhc2tJZCwgJ3Rhc2tfZGF0YSc6IHZtLnRhc2tBc3NpZ25tZW50LnRhc2suZGF0YSxcbiAgICAgICAgICAgICAgICAgICdjb21tYW5kX3R5cGUnOiBjb21tYW5kLCAnd29ya190aW1lX3NlY29uZHMnOiB0b3RhbFNlY29uZHN9KVxuICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgIC8vIFByZXZlbnQgYWRkaXRpb25hbCBjb25maXJtYXRpb24gZGlhbG9nIG9uIGxlYXZpbmcgdGhlIHBhZ2U7IGRhdGFcbiAgICAgICAgICAvLyB3aWxsIGJlIHNhdmVkIGJ5IHN1Ym1pc3Npb25cbiAgICAgICAgICB2bS5hdXRvU2F2ZXIuY2FuY2VsKCk7XG4gICAgICAgICAgb3JjaGVzdHJhU2VydmljZS5zaWduYWxzLmZpcmVTaWduYWwoJ3N1Ym1pdC5zdWNjZXNzJyk7XG4gICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgb3JjaGVzdHJhU2VydmljZS5zaWduYWxzLmZpcmVTaWduYWwoJ3N1Ym1pdC5lcnJvcicpO1xuICAgICAgICB9KVxuICAgICAgICAuZmluYWxseShmdW5jdGlvbigpIHtcbiAgICAgICAgICBvcmNoZXN0cmFTZXJ2aWNlLnNpZ25hbHMuZmlyZVNpZ25hbCgnc3VibWl0LmZpbmFsbHknKTtcbiAgICAgICAgICB2bS5zdWJtaXR0aW5nID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICB2bS5zdWJtaXRUYXNrID0gZnVuY3Rpb24oY29tbWFuZCkge1xuICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkbW9kYWwub3Blbih7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAnc3VibWl0X3Rhc2tfbW9kYWwuaHRtbCcsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdTdWJtaXRNb2RhbEluc3RhbmNlQ3RybCcsXG4gICAgICAgIHNpemU6ICdzbScsXG4gICAgICAgIHdpbmRvd0NsYXNzOiAnbW9kYWwtY29uZmlybS1zdWJtaXQnLFxuICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgY29tbWFuZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmQ7XG4gICAgICAgICAgfSxcbiAgICAgICAgICB3b3JrX3RpbWVzX3NlY29uZHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHZtLndvcmtfdGltZXNfc2Vjb25kcztcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbih0b3RhbFNlY29uZHMpe1xuICAgICAgICB2bS5jb25maXJtU3VibWlzc2lvbihjb21tYW5kLCB0b3RhbFNlY29uZHMpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZtLmFjdGl2YXRlKCk7XG4gIH1cblxufSkoKTtcblxuXG4oZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ29yY2hlc3RyYS50YXNrLmNvbnRyb2xsZXJzJylcbiAgICAuY29udHJvbGxlcignU3VibWl0TW9kYWxJbnN0YW5jZUN0cmwnLCBTdWJtaXRNb2RhbEluc3RhbmNlQ3RybCk7XG5cbiAgU3VibWl0TW9kYWxJbnN0YW5jZUN0cmwuJGluamVjdCA9IFsnJHNjb3BlJywgJyRtb2RhbEluc3RhbmNlJywgJ2NvbW1hbmQnLCAnd29ya190aW1lc19zZWNvbmRzJ11cblxuICBmdW5jdGlvbiBTdWJtaXRNb2RhbEluc3RhbmNlQ3RybCgkc2NvcGUsICRtb2RhbEluc3RhbmNlLCBjb21tYW5kLCB3b3JrVGltZXNTZWNvbmRzKSB7XG4gICAgJHNjb3BlLmNvbW1hbmQgPSBjb21tYW5kO1xuICAgICRzY29wZS5jdXJyZW50SXRlcmF0aW9uSG91cnMgPSBudWxsO1xuICAgICRzY29wZS5jdXJyZW50SXRlcmF0aW9uTWludXRlcyA9IG51bGw7XG4gICAgJHNjb3BlLndvcmtUaW1lc1NlY29uZHMgPSB3b3JrVGltZXNTZWNvbmRzO1xuXG4gICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgJG1vZGFsSW5zdGFuY2UuY2xvc2UoJHNjb3BlLnRvdGFsU2Vjb25kcygpKTtcbiAgICB9XG5cbiAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gICAgICAkbW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcbiAgICB9XG5cbiAgICAkc2NvcGUudG90YWxTZWNvbmRzID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaG91cnMgPSBwYXJzZUludCgkc2NvcGUuY3VycmVudEl0ZXJhdGlvbkhvdXJzKTtcbiAgICAgIHZhciBtaW51dGVzID0gcGFyc2VJbnQoJHNjb3BlLmN1cnJlbnRJdGVyYXRpb25NaW51dGVzKTtcbiAgICAgIGlmIChpc05hTihob3VycykpIHtcbiAgICAgICAgdGhyb3cgJ1BsZWFzZSBwcm92aWRlIGhvdXJzICgwIGlzIGFjY2VwdGFibGUpJztcbiAgICAgIH1cbiAgICAgIGlmIChob3Vycy50b1N0cmluZygpICE9PSAkc2NvcGUuY3VycmVudEl0ZXJhdGlvbkhvdXJzKSB7XG4gICAgICAgIHRocm93ICdIb3VycyBzaG91bGQgYmUgYSB3aG9sZSBudW1iZXInXG4gICAgICB9XG4gICAgICBpZiAoaG91cnMgPCAwKSB7XG4gICAgICAgIHRocm93ICdIb3VycyBzaG91bGQgYmUgPj0wJ1xuICAgICAgfVxuICAgICAgaWYgKGlzTmFOKG1pbnV0ZXMpKSB7XG4gICAgICAgIHRocm93ICdQbGVhc2UgcHJvdmlkZSBtaW51dGVzICgwIGlzIGFjY2VwdGFibGUpJztcbiAgICAgIH1cbiAgICAgIGlmIChtaW51dGVzLnRvU3RyaW5nKCkgIT09ICRzY29wZS5jdXJyZW50SXRlcmF0aW9uTWludXRlcykge1xuICAgICAgICB0aHJvdyAnTWludXRlcyBzaG91bGQgYmUgYSB3aG9sZSBudW1iZXInXG4gICAgICB9XG4gICAgICBpZiAobWludXRlcyA+IDU5IHx8IG1pbnV0ZXMgPCAwKSB7XG4gICAgICAgIHRocm93ICdNaW51dGVzIHNob3VsZCBiZSA8NjAgYW5kID49MCdcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIChob3VycyAqIDM2MDApICsgKG1pbnV0ZXMgKiA2MCk7XG4gICAgfVxuXG4gICAgJHNjb3BlLnNlY29uZHNFcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgJHNjb3BlLnRvdGFsU2Vjb25kcygpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAkc2NvcGUuaG91cnNNaW51dGVzID0gZnVuY3Rpb24oc2Vjb25kcykge1xuICAgICAgdmFyIGhvdXJzID0gKHNlY29uZHMgLSAoc2Vjb25kcyAlIDM2MDApKSAvIDM2MDA7XG4gICAgICB2YXIgbWludXRlcyA9IChzZWNvbmRzICUgMzYwMCkgLyA2MDtcbiAgICAgIHJldHVybiBbaG91cnMsIG1pbnV0ZXNdO1xuICAgIH1cblxuICAgICRzY29wZS50b3RhbFByZXZpb3VzU2Vjb25kcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHRvdGFsID0gMDtcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUud29ya1RpbWVzU2Vjb25kcywgZnVuY3Rpb24oc2Vjb25kcykge1xuICAgICAgICB0b3RhbCArPSBzZWNvbmRzO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdG90YWw7XG4gICAgfVxuXG4gICAgJHNjb3BlLnRvdGFsUHJldmlvdXNIb3Vyc01pbnV0ZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAkc2NvcGUuaG91cnNNaW51dGVzKCRzY29wZS50b3RhbFByZXZpb3VzU2Vjb25kcygpKTtcbiAgICB9XG5cbiAgICAkc2NvcGUudG90YWxIb3Vyc01pbnV0ZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhbGxTZWNvbmRzID0gJHNjb3BlLnRvdGFsUHJldmlvdXNTZWNvbmRzKCk7O1xuICAgICAgdHJ5IHtcbiAgICAgICAgYWxsU2Vjb25kcyArPSAkc2NvcGUudG90YWxTZWNvbmRzKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgfVxuICAgICAgcmV0dXJuICRzY29wZS5ob3Vyc01pbnV0ZXMoYWxsU2Vjb25kcyk7XG4gICAgfVxuXG4gICAgJHNjb3BlLiR3YXRjaEdyb3VwKFsnY3VycmVudEl0ZXJhdGlvbkhvdXJzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdjdXJyZW50SXRlcmF0aW9uTWludXRlcyddLFxuICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihuZXdUaW1lcywgb2xkVGltZXMpIHtcbiAgICAgIGZvciAodmFyIGk9MDsgaSA8IG5ld1RpbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChuZXdUaW1lc1tpXSAhPSBvbGRUaW1lc1tpXSkge1xuICAgICAgICAgICRzY29wZS5zZWNvbmRzRXJyb3JNZXNzYWdlID0gJHNjb3BlLnNlY29uZHNFcnJvcigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pKCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
