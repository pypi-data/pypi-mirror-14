!function(){"use strict";var t=angular.module("orchestra.project_management.services");t.factory("visUtils",["dataService",function(t){return{setup:function(t,a){this.parentContainer=t,this.params=a},svgLeftMargin:function(){return d3.select(".freeze-pane-left").node().getBoundingClientRect().width},getTaskHeight:function(a){var e=1,n=t.keyFromTask(a);return t.taskMeta(n,"expandAssignments")&&(e=a.assignments.length+1),this.params.barHeight*e+this.params.lanePadding.top+this.params.lanePadding.bottom},getSvgHeight:function(){var a=this,e=this.params.scaleHeight;for(var n in t.data.tasks){var s=t.data.tasks[n];e+=a.getTaskHeight(s)}return e},getSvgWidth:function(){return this.params.scaleWidth+this.params.marginRight},translateString:function(t,a){return"translate("+t+", "+a+")"}}}])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9yY2hlc3RyYS9wcm9qZWN0X21hbmFnZW1lbnQvanMvdmlzVXRpbHMuanMiXSwibmFtZXMiOlsic2VydmljZU1vZHVsZSIsImFuZ3VsYXIiLCJtb2R1bGUiLCJmYWN0b3J5IiwiZGF0YVNlcnZpY2UiLCJzZXR1cCIsInBhcmVudENvbnRhaW5lciIsInBhcmFtcyIsInRoaXMiLCJzdmdMZWZ0TWFyZ2luIiwiZDMiLCJzZWxlY3QiLCJub2RlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwid2lkdGgiLCJnZXRUYXNrSGVpZ2h0IiwidGFzayIsIm51bUFzc2lnbm1lbnRzIiwidGFza0tleSIsImtleUZyb21UYXNrIiwidGFza01ldGEiLCJhc3NpZ25tZW50cyIsImxlbmd0aCIsImJhckhlaWdodCIsImxhbmVQYWRkaW5nIiwidG9wIiwiYm90dG9tIiwiZ2V0U3ZnSGVpZ2h0IiwidXRpbHMiLCJzdmdIZWlnaHQiLCJzY2FsZUhlaWdodCIsInN0ZXBfc2x1ZyIsImRhdGEiLCJ0YXNrcyIsImdldFN2Z1dpZHRoIiwic2NhbGVXaWR0aCIsIm1hcmdpblJpZ2h0IiwidHJhbnNsYXRlU3RyaW5nIiwieCIsInkiXSwibWFwcGluZ3MiOiJDQUFBLFdBQ0UsWUFFQSxJQUFJQSxHQUFpQkMsUUFBUUMsT0FBTyx3Q0FFcENGLEdBQWNHLFFBQVEsWUFBQSxjQUFZLFNBQVNDLEdBUXpDLE9BQ0VDLE1BQU8sU0FBU0MsRUFBaUJDLEdBQy9CQyxLQUFLRixnQkFBa0JBLEVBQ3ZCRSxLQUFLRCxPQUFTQSxHQUVoQkUsY0FBZSxXQUtiLE1BQU9DLElBQUdDLE9BQU8scUJBQXFCQyxPQUFPQyx3QkFBd0JDLE9BRXZFQyxjQUFlLFNBQVNDLEdBSXRCLEdBQUlDLEdBQWlCLEVBQ2pCQyxFQUFVZCxFQUFZZSxZQUFZSCxFQUl0QyxPQUhJWixHQUFZZ0IsU0FBU0YsRUFBUyx1QkFDaENELEVBQWlCRCxFQUFLSyxZQUFZQyxPQUFTLEdBRXJDZCxLQUFLRCxPQUFPZ0IsVUFBWU4sRUFDeEJULEtBQUtELE9BQU9pQixZQUFZQyxJQUN4QmpCLEtBQUtELE9BQU9pQixZQUFZRSxRQUVsQ0MsYUFBYyxXQUlaLEdBQUlDLEdBQVFwQixLQUNScUIsRUFBWXJCLEtBQUtELE9BQU91QixXQUM1QixLQUFLLEdBQUlDLEtBQWEzQixHQUFZNEIsS0FBS0MsTUFBTyxDQUM1QyxHQUFJakIsR0FBT1osRUFBWTRCLEtBQUtDLE1BQU1GLEVBQ2xDRixJQUFhRCxFQUFNYixjQUFjQyxHQUVuQyxNQUFPYSxJQUVUSyxZQUFhLFdBSVgsTUFBTzFCLE1BQUtELE9BQU80QixXQUFhM0IsS0FBS0QsT0FBTzZCLGFBRTlDQyxnQkFBaUIsU0FBU0MsRUFBR0MsR0FJM0IsTUFBTyxhQUFlRCxFQUFJLEtBQU9DLEVBQUkiLCJmaWxlIjoib3JjaGVzdHJhL3Byb2plY3RfbWFuYWdlbWVudC9qcy92aXNVdGlscy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHNlcnZpY2VNb2R1bGUgPSAgYW5ndWxhci5tb2R1bGUoJ29yY2hlc3RyYS5wcm9qZWN0X21hbmFnZW1lbnQuc2VydmljZXMnKTtcblxuICBzZXJ2aWNlTW9kdWxlLmZhY3RvcnkoJ3Zpc1V0aWxzJywgZnVuY3Rpb24oZGF0YVNlcnZpY2UpIHtcbiAgICAvKipcbiAgICAgKiBTZXJ2aWNlIHRvIHByb3ZpZGUgY29tbW9uIHZpc3VhbGl6YXRpb24gaGVscGVycyBhY3Jvc3MgcHJvamVjdFxuICAgICAqIG1hbmFnZW1lbnQgY29tcG9uZW50cy5cbiAgICAgKi9cblxuICAgIHZhciBfdmlzO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHNldHVwOiBmdW5jdGlvbihwYXJlbnRDb250YWluZXIsIHBhcmFtcykge1xuICAgICAgICB0aGlzLnBhcmVudENvbnRhaW5lciA9IHBhcmVudENvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7XG4gICAgICB9LFxuICAgICAgc3ZnTGVmdE1hcmdpbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxjdWxhdGVzIHdpZHRoIG9mIHRoZSBmcm96ZW4gcGFuZSBjb250YWluaW5nIHRhc2sgc3RlcCBzbHVncyBhbmRcbiAgICAgICAgICogb3RoZXIgZGF0YS5cbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiBkMy5zZWxlY3QoJy5mcmVlemUtcGFuZS1sZWZ0Jykubm9kZSgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xuICAgICAgfSxcbiAgICAgIGdldFRhc2tIZWlnaHQ6IGZ1bmN0aW9uKHRhc2spIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGN1bGF0ZXMgdGhlIGhlaWdodCBvZiBhbiBpbmRpdmlkdWFsIHRhc2sgdmlzdWFsaXphdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBudW1Bc3NpZ25tZW50cyA9IDE7XG4gICAgICAgIHZhciB0YXNrS2V5ID0gZGF0YVNlcnZpY2Uua2V5RnJvbVRhc2sodGFzayk7XG4gICAgICAgIGlmIChkYXRhU2VydmljZS50YXNrTWV0YSh0YXNrS2V5LCAnZXhwYW5kQXNzaWdubWVudHMnKSkge1xuICAgICAgICAgIG51bUFzc2lnbm1lbnRzID0gdGFzay5hc3NpZ25tZW50cy5sZW5ndGggKyAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAodGhpcy5wYXJhbXMuYmFySGVpZ2h0ICogbnVtQXNzaWdubWVudHMgK1xuICAgICAgICAgICAgICAgIHRoaXMucGFyYW1zLmxhbmVQYWRkaW5nLnRvcCArXG4gICAgICAgICAgICAgICAgdGhpcy5wYXJhbXMubGFuZVBhZGRpbmcuYm90dG9tKTtcbiAgICAgIH0sXG4gICAgICBnZXRTdmdIZWlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogVG90YWxzIHRoZSBoZWlnaHRzIG9mIGFsbCB0aGUgcHJvamVjdCdzIHRhc2sgdmlzdWFsaXphdGlvbnMuXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgdXRpbHMgPSB0aGlzO1xuICAgICAgICB2YXIgc3ZnSGVpZ2h0ID0gdGhpcy5wYXJhbXMuc2NhbGVIZWlnaHQ7XG4gICAgICAgIGZvciAodmFyIHN0ZXBfc2x1ZyBpbiBkYXRhU2VydmljZS5kYXRhLnRhc2tzKSB7XG4gICAgICAgICAgdmFyIHRhc2sgPSBkYXRhU2VydmljZS5kYXRhLnRhc2tzW3N0ZXBfc2x1Z107XG4gICAgICAgICAgc3ZnSGVpZ2h0ICs9IHV0aWxzLmdldFRhc2tIZWlnaHQodGFzayk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN2Z0hlaWdodDtcbiAgICAgIH0sXG4gICAgICBnZXRTdmdXaWR0aDogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxjdWxhdGVzIHRoZSBkZXNpcmVkIHdpZHRoIG9mIHRoZSB2aWV3LlxuICAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIHRoaXMucGFyYW1zLnNjYWxlV2lkdGggKyB0aGlzLnBhcmFtcy5tYXJnaW5SaWdodFxuICAgICAgfSxcbiAgICAgIHRyYW5zbGF0ZVN0cmluZzogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyBhIHRyYW5zbGF0ZSBzdHJpbmcgZm9yIHRoZSBnaXZlbiBjb29yZGluYXRlcy5cbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyB4ICsgJywgJyArIHkgKyAnKSc7XG4gICAgICB9LFxuICAgIH1cbiAgfSk7XG59KSgpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
