!function(){"use strict";var t=angular.module("orchestra.project_management.services");t.factory("tasksVis",["$modal","dataService","orchestraApi","visUtils","assignmentsVis","crosshair","axis",function(t,e,a,s,n,r,i){var o=function(t){var e={step:t.task.step_slug,change:t.change,assignments:{}};return t.assignments.forEach(function(t){e.assignments[t.assignment.worker.username]={change:t.change,snapshots:t.snapshots}}),e},l=function(t,e){for(var a,s=0;s<e.length&&!(a=t.classed(e[s]));s++);return a};return{reverting:!1,draw:function(){var t=this,a=s.parentContainer.selectAll(".task-view").data(e.timeSortedSlugs,function(t){return t});a.exit().remove();var r=a.enter().append("div").attr("class","task-view"),o=r.append("svg").attr("class","task-svg").style("margin-left",s.params.marginLeft+"px");a.selectAll(".task-svg").attr("width",s.getSvgWidth()),a.style("width",s.getSvgWidth()+s.params.marginLeft+"px");var c=o.append("g").attr("class","task");a.selectAll(".task").transition().attr({transform:function(t){var a=e.taskFromKey(t);return s.translateString(i.getOffset(a.start_datetime),s.params.lanePadding.top)}}),t.drawRevertFlags(),n.draw();c.append("rect").attr({"class":"task-rect",height:s.params.barHeight,"fill-opacity":0,stroke:"black"});a.selectAll(".task-rect").transition().attr("width",function(t){var a=e.taskFromKey(t);return i.getOffset(e.taskEnd(a))-i.getOffset(a.start_datetime)}).each(function(a){e.taskFromKey(a);t.expand(d3.select(t.parentNode))}),a.on("click",function(a){var s=(e.taskFromKey(a),d3.select(d3.event.target)),n=["task-view","task-svg","task-rect"];if(l(s,n)){var r=(e.taskFromKey(a),e.taskMeta(a,"expandAssignments"));e.taskMeta(a,"expandAssignments",!r),t.distribute()}}),this.drawMeta(),this.drawBackgrounds(),t.distribute()},drawMeta:function(){var t=this,a=d3.select(".task-names").selectAll(".task-name").data(e.timeSortedSlugs,function(t){return t});a.exit().remove();var s=a.enter().append("div").attr("class","task-name");s.append("span").attr("class","step-slug");var n=s.append("div").attr("class","task-action-wrapper"),r=a.selectAll(".task-action-wrapper").selectAll(".skip-task").data(function(t){return"Complete"!=e.taskFromKey(t).status?[t]:[]});r.exit().remove(),r.enter().append("button").attr("class","skip-task task-action btn btn-danger btn-xs").text("Skip task").on("click",function(a){t.completeAndSkipTask(e.taskFromKey(a))}),n.append("a").attr({href:function(t){return e.taskFromKey(t).admin_url},target:"_blank","class":"task-action"}).append("button").attr("class","btn btn-default btn-xs").text("View in admin"),s.append("span").attr("class","step-status"),a.selectAll(".step-slug").text(function(t){var a=e.taskFromKey(t);return a.step_slug}),a.selectAll(".step-status").text(function(t){var a=e.taskFromKey(t);return a.status})},drawBackgrounds:function(){d3.selectAll(".task-name").style("background-color",function(t,e,a){return e%2==0?"#eee":"white"}),s.parentContainer.selectAll(".task-view").style("background-color",function(t,e){return e%2==0?"#eee":"white"})},drawRevertFlags:function(){var t=this,a=s.parentContainer.selectAll(".task"),n=a.selectAll(".revert-group").data(function(t){var a=e.taskFromKey(t),s=[];return a.assignments.forEach(function(t){t.iterations&&t.iterations.forEach(function(t){s.push({datetime:new Date(t.start_datetime),taskKey:a.step_slug})})}),e.inProgressAssignment(a)||s.push({datetime:new Date(e.taskEnd(a)),taskKey:a.step_slug}),s},function(t){return t.datetime});n.exit().remove();var o=n.enter().append("g").attr("class","revert-group");o.append("line").attr({"class":"revert-line",stroke:"rgb(0, 121, 191)"}),o.append("path").attr({d:"M0,0 V4 L-2,2 Z",fill:"rgb(0, 121, 191)",transform:s.translateString(0,-s.params.lanePadding.top/2)+" scale(3, 3)"}).style("cursor","pointer").on("mouseenter",function(e){t.reverting||(r.move(e.datetime),r.show())}).on("mouseleave",function(e){t.reverting||r.hide()}).on("click",function(a){var s=e.taskFromKey(a.taskKey).id;t.revertTask(s,a.datetime)}),n.transition().attr({transform:function(t){var a=e.taskFromKey(t.taskKey).start_datetime;return s.translateString(i.timeScale(t.datetime)-i.getOffset(a),0)}}),n.selectAll(".revert-line").transition().attr({y1:-s.params.lanePadding.top/2,y2:function(t){var a=t.taskKey,n=e.taskFromKey(a);return e.taskMeta(a,"expandAssignments")?(n.assignments.length+1)*s.params.barHeight+1:s.params.barHeight+1}})},expand:function(){var t=d3.selectAll(".task-view");t.selectAll(".assignments").transition().attr("transform",function(t){var a=e.taskMeta(t,"expandAssignments");s.translateString(0,a?s.params.barHeight:0)}),t.selectAll(".assignment").transition().attr({transform:function(t,a){var n=e.assignmentFromKey(t),r=e.keyFromTask(n.task),i=e.taskMeta(r,"expandAssignments");return s.translateString(0,i?s.params.barHeight*(a+1):0)}}),t.selectAll(".assignment-meta").transition().style({position:"absolute",top:function(t,a){var n=e.assignmentFromKey(t),r=e.keyFromTask(n.task),i=e.taskMeta(r,"expandAssignments");return i?s.params.barHeight*(a+1)+s.params.lanePadding.top+4+"px":s.params.lanePadding.top+"px"},right:function(t){var a=e.assignmentFromKey(t);return s.getSvgWidth()-i.getOffset(a.task.start_datetime)+10+"px"},display:function(t,a){var s=e.assignmentFromKey(t),n=e.keyFromTask(s.task),r=e.taskMeta(n,"expandAssignments");return r?"inherit":"none"}}),t.selectAll(".active-assignment").attr("display",function(t){var a=e.assignmentFromKey(t),s=e.keyFromTask(a.task),n=e.taskMeta(s,"expandAssignments");return n?"inherit":"none"})},distribute:function(){s.parentContainer.selectAll(".task-svg").transition().attr({height:function(t){var a=e.taskFromKey(t);return s.getTaskHeight(a)}});var t=d3.selectAll(".task-names").style("margin-top",s.params.scaleHeight+"px");t.selectAll(".task-name").transition().style({height:function(t,a){var n=e.taskFromKey(t);return s.getTaskHeight(n)+"px"},"padding-top":s.params.lanePadding.top/2+"px"});this.drawRevertFlags(),this.expand()},completeAndSkipTask:function(t){confirm("Are you sure you want to skip this task and mark it as complete? This might leave the project in a corrupted/unrecoverable state.")&&a.completeAndSkipTask(t).then(function(){e.updateData()},function(t){var e="Error skipping task.";400===t.status&&(e=t.data.message),alert(e)})},revertTask:function(s,n){var i=this;i.reverting||(i.reverting=!0,a.revertTask(s,n,!0).then(function(l){var c=t.open({templateUrl:"/static/orchestra/project_management/partials/revert_modal.html",controller:["$scope",function(t){t.audit=o(l.data),t.cancel=c.close,t.confirmRevert=function(){a.revertTask(s,n,!1).then(function(){e.updateData()},function(t){var e="Could not revert task.";400===t.status&&(e=t.data.message),alert(e)})["finally"](function(){c.close()})}}]});c.result["finally"](function(){i.reverting=!1,r.hide()})},function(t){var e="Could not generate revert information.";400===t.status&&(e=t.data.message),alert(e)}))}}}])}();
//# sourceMappingURL=data:application/json;base64,
