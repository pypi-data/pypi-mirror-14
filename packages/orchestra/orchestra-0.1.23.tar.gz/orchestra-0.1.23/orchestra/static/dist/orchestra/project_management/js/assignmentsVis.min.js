!function(){"use strict";var n=angular.module("orchestra.project_management.services");n.factory("assignmentsVis",["dataService","orchestraApi","iterationsVis","visUtils",function(n,e,s,t){var a,r;return{addingAssignment:!1,setup:function(n){a=n,r=this},draw:function(){var e=t.parentContainer.selectAll(".task"),a=e.selectAll(".assignment").data(function(e){var s=n.taskFromKey(e).assignments.map(function(e){return n.keyFromAssignment(e)});return s.push(),s});a.exit().remove();var r=a.enter().append("g").attr("class","assignment");s.draw(),r.append("circle").attr({"class":"active-assignment",cx:0,cy:15,r:5}),a.selectAll(".active-assignment").attr({fill:function(e){var s=n.assignmentFromKey(e);return"Submitted"==s.status?"rgb(0, 121, 191)":"white"},stroke:function(e){var s=n.assignmentFromKey(e);return"Submitted"==s.status?"white":"rgb(0, 121, 191)"}}),this.drawAssignmentTools()},drawAssignmentTools:function(){var e=this,s=t.parentContainer.selectAll(".task-view").selectAll(".assignment-meta").data(function(e){return n.taskFromKey(e).assignments.map(function(e){return n.keyFromAssignment(e)})});s.exit().remove();var a=s.enter().append("div").attr("class","assignment-meta");a.append("input").attr({"class":"worker-name readonly"}).on("click",function(){d3.select(this).classed("readonly",!1)}).on("blur",function(e){var s=n.assignmentFromKey(e);this.value=s.task.is_human?s.worker.username:"Machine",d3.select(this).classed("readonly",!0)}),s.selectAll(".worker-name").attr({placeholder:function(e){var s=n.assignmentFromKey(e);return s.worker.username||!s.task.is_human?"":"Add new assignment"}}).on("keydown",function(s){var t=n.assignmentFromKey(s);13==d3.event.keyCode&&t.task.is_human&&(t.worker.username?e.reassignAssignment(t,d3.select(this)):e.assign_task(t.task,d3.select(this)))}).each(function(e){var s=n.assignmentFromKey(e);this.value=s.task.is_human?s.worker.username:"Machine"})},assign_task:function(s,t){var a=this;a.addingAssignment||(a.addingAssignment=!0,e.assignTask(s,t.node().value).then(function(){t.node().blur(),n.updateData()},function(n){t.node().value="",t.node().blur();var e="Error assigning task.";400===n.status&&(e=n.data.message),alert(e)})["finally"](function(){a.addingAssignment=!1}))},reassignAssignment:function(n,s){n.reassigning||(n.reassigning=!0,e.reassignAssignment(n,s.node().value).then(function(){n.worker.username=s.node().value,r.draw()},function(n){s.node().blur();var e="Error reassigning worker.";400===n.status&&(e=n.data.message),alert(e)})["finally"](function(){s.node().blur(),s.node().value=n.worker.username,n.reassigning=!1}))}}}])}();
//# sourceMappingURL=data:application/json;base64,
