var Gritter=function(){$("#add-sticky").click(function(){$.gritter.add({title:"This is a Sticky Notice!",text:'Hover me to enable the Close Button. This note also contains a link example. Thank you so much to try Dashgum. Developed by <a href="#" style="color:#FFD777">Alvarez.is</a>.',image:"assets/img/ui-sam.jpg",sticky:!0,time:"",class_name:"my-sticky-class"});return!1}),$("#add-regular").click(function(){return $.gritter.add({title:"This is a Regular Notice!",text:'This will fade out after a certain amount of time. This note also contains a link example. Thank you so much to try Dashgum. Developed by <a href="#" style="color:#FFD777">Alvarez.is</a>.',image:"assets/img/ui-sam.jpg",sticky:!1,time:""}),!1}),$("#add-max").click(function(){return $.gritter.add({title:"This is a notice with a max of 3 on screen at one time!",text:'This will fade out after a certain amount of time. This note also contains a link example. Thank you so much to try Dashgum. Developed by <a href="#" style="color:#FFD777">Alvarez.is</a>.',image:"assets/img/ui-sam.jpg",sticky:!1,before_open:function(){return 3==$(".gritter-item-wrapper").length?!1:void 0}}),!1}),$("#add-without-image").click(function(){return $.gritter.add({title:"This is a Notice Without an Image!",text:'This will fade out after a certain amount of time. This note also contains a link example. Thank you so much to try Dashgum. Developed by <a href="#" style="color:#FFD777">Alvarez.is</a>.'}),!1}),$("#add-gritter-light").click(function(){return $.gritter.add({title:"This is a Light Notification",text:'Just add a "gritter-light" class_name to your $.gritter.add or globally to $.gritter.options.class_name',class_name:"gritter-light"}),!1}),$("#remove-all").click(function(){return $.gritter.removeAll(),!1})}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9yY2hlc3RyYS9jb21tb24vanMvbGliL2dyaXR0ZXItY29uZi5qcyJdLCJuYW1lcyI6WyJHcml0dGVyIiwiJCIsImNsaWNrIiwiZ3JpdHRlciIsImFkZCIsInRpdGxlIiwidGV4dCIsImltYWdlIiwic3RpY2t5IiwidGltZSIsImNsYXNzX25hbWUiLCJiZWZvcmVfb3BlbiIsImxlbmd0aCIsInJlbW92ZUFsbCJdLCJtYXBwaW5ncyI6IkFBQUEsR0FBSUEsU0FBVSxXQUVWQyxFQUFFLGVBQWVDLE1BQU0sV0FFSEQsRUFBRUUsUUFBUUMsS0FFdEJDLE1BQU8sMkJBRVBDLEtBQU0sZ0xBRU5DLE1BQU8sd0JBRVBDLFFBQVEsRUFFUkMsS0FBTSxHQUVOQyxXQUFZLG1CQWVoQixRQUFPLElBSVhULEVBQUUsZ0JBQWdCQyxNQUFNLFdBZXBCLE1BYkFELEdBQUVFLFFBQVFDLEtBRU5DLE1BQU8sNEJBRVBDLEtBQU0sOExBRU5DLE1BQU8sd0JBRVBDLFFBQVEsRUFFUkMsS0FBTSxNQUdILElBSVhSLEVBQUUsWUFBWUMsTUFBTSxXQXFCaEIsTUFuQkFELEdBQUVFLFFBQVFDLEtBRU5DLE1BQU8sMERBRVBDLEtBQU0sOExBRU5DLE1BQU8sd0JBRVBDLFFBQVEsRUFFUkcsWUFBYSxXQUNULE1BQXdDLElBQXJDVixFQUFFLHlCQUF5QlcsUUFHbkIsRUFIWCxXQVFELElBSVhYLEVBQUUsc0JBQXNCQyxNQUFNLFdBUzFCLE1BUEFELEdBQUVFLFFBQVFDLEtBRU5DLE1BQU8scUNBRVBDLEtBQU0saU1BR0gsSUFHWEwsRUFBRSxzQkFBc0JDLE1BQU0sV0FVMUIsTUFSQUQsR0FBRUUsUUFBUUMsS0FFTkMsTUFBTywrQkFFUEMsS0FBTSwwR0FDTkksV0FBWSxtQkFHVCxJQUdYVCxFQUFFLGVBQWVDLE1BQU0sV0FHbkIsTUFEQUQsR0FBRUUsUUFBUVUsYUFDSCIsImZpbGUiOiJvcmNoZXN0cmEvY29tbW9uL2pzL2xpYi9ncml0dGVyLWNvbmYubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIEdyaXR0ZXIgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgJCgnI2FkZC1zdGlja3knKS5jbGljayhmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICB2YXIgdW5pcXVlX2lkID0gJC5ncml0dGVyLmFkZCh7XHJcbiAgICAgICAgICAgIC8vIChzdHJpbmcgfCBtYW5kYXRvcnkpIHRoZSBoZWFkaW5nIG9mIHRoZSBub3RpZmljYXRpb25cclxuICAgICAgICAgICAgdGl0bGU6ICdUaGlzIGlzIGEgU3RpY2t5IE5vdGljZSEnLFxyXG4gICAgICAgICAgICAvLyAoc3RyaW5nIHwgbWFuZGF0b3J5KSB0aGUgdGV4dCBpbnNpZGUgdGhlIG5vdGlmaWNhdGlvblxyXG4gICAgICAgICAgICB0ZXh0OiAnSG92ZXIgbWUgdG8gZW5hYmxlIHRoZSBDbG9zZSBCdXR0b24uIFRoaXMgbm90ZSBhbHNvIGNvbnRhaW5zIGEgbGluayBleGFtcGxlLiBUaGFuayB5b3Ugc28gbXVjaCB0byB0cnkgRGFzaGd1bS4gRGV2ZWxvcGVkIGJ5IDxhIGhyZWY9XCIjXCIgc3R5bGU9XCJjb2xvcjojRkZENzc3XCI+QWx2YXJlei5pczwvYT4uJyxcclxuICAgICAgICAgICAgLy8gKHN0cmluZyB8IG9wdGlvbmFsKSB0aGUgaW1hZ2UgdG8gZGlzcGxheSBvbiB0aGUgbGVmdFxyXG4gICAgICAgICAgICBpbWFnZTogJ2Fzc2V0cy9pbWcvdWktc2FtLmpwZycsXHJcbiAgICAgICAgICAgIC8vIChib29sIHwgb3B0aW9uYWwpIGlmIHlvdSB3YW50IGl0IHRvIGZhZGUgb3V0IG9uIGl0cyBvd24gb3IganVzdCBzaXQgdGhlcmVcclxuICAgICAgICAgICAgc3RpY2t5OiB0cnVlLFxyXG4gICAgICAgICAgICAvLyAoaW50IHwgb3B0aW9uYWwpIHRoZSB0aW1lIHlvdSB3YW50IGl0IHRvIGJlIGFsaXZlIGZvciBiZWZvcmUgZmFkaW5nIG91dFxyXG4gICAgICAgICAgICB0aW1lOiAnJyxcclxuICAgICAgICAgICAgLy8gKHN0cmluZyB8IG9wdGlvbmFsKSB0aGUgY2xhc3MgbmFtZSB5b3Ugd2FudCB0byBhcHBseSB0byB0aGF0IHNwZWNpZmljIG1lc3NhZ2VcclxuICAgICAgICAgICAgY2xhc3NfbmFtZTogJ215LXN0aWNreS1jbGFzcydcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gWW91IGNhbiBoYXZlIGl0IHJldHVybiBhIHVuaXF1ZSBpZCwgdGhpcyBjYW4gYmUgdXNlZCB0byBtYW51YWxseSByZW1vdmUgaXQgbGF0ZXIgdXNpbmdcclxuICAgICAgICAvKlxyXG4gICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAkLmdyaXR0ZXIucmVtb3ZlKHVuaXF1ZV9pZCwge1xyXG4gICAgICAgICBmYWRlOiB0cnVlLFxyXG4gICAgICAgICBzcGVlZDogJ3Nsb3cnXHJcbiAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgfSwgNjAwMClcclxuICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICAgICQoJyNhZGQtcmVndWxhcicpLmNsaWNrKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICQuZ3JpdHRlci5hZGQoe1xyXG4gICAgICAgICAgICAvLyAoc3RyaW5nIHwgbWFuZGF0b3J5KSB0aGUgaGVhZGluZyBvZiB0aGUgbm90aWZpY2F0aW9uXHJcbiAgICAgICAgICAgIHRpdGxlOiAnVGhpcyBpcyBhIFJlZ3VsYXIgTm90aWNlIScsXHJcbiAgICAgICAgICAgIC8vIChzdHJpbmcgfCBtYW5kYXRvcnkpIHRoZSB0ZXh0IGluc2lkZSB0aGUgbm90aWZpY2F0aW9uXHJcbiAgICAgICAgICAgIHRleHQ6ICdUaGlzIHdpbGwgZmFkZSBvdXQgYWZ0ZXIgYSBjZXJ0YWluIGFtb3VudCBvZiB0aW1lLiBUaGlzIG5vdGUgYWxzbyBjb250YWlucyBhIGxpbmsgZXhhbXBsZS4gVGhhbmsgeW91IHNvIG11Y2ggdG8gdHJ5IERhc2hndW0uIERldmVsb3BlZCBieSA8YSBocmVmPVwiI1wiIHN0eWxlPVwiY29sb3I6I0ZGRDc3N1wiPkFsdmFyZXouaXM8L2E+LicsXHJcbiAgICAgICAgICAgIC8vIChzdHJpbmcgfCBvcHRpb25hbCkgdGhlIGltYWdlIHRvIGRpc3BsYXkgb24gdGhlIGxlZnRcclxuICAgICAgICAgICAgaW1hZ2U6ICdhc3NldHMvaW1nL3VpLXNhbS5qcGcnLFxyXG4gICAgICAgICAgICAvLyAoYm9vbCB8IG9wdGlvbmFsKSBpZiB5b3Ugd2FudCBpdCB0byBmYWRlIG91dCBvbiBpdHMgb3duIG9yIGp1c3Qgc2l0IHRoZXJlXHJcbiAgICAgICAgICAgIHN0aWNreTogZmFsc2UsXHJcbiAgICAgICAgICAgIC8vIChpbnQgfCBvcHRpb25hbCkgdGhlIHRpbWUgeW91IHdhbnQgaXQgdG8gYmUgYWxpdmUgZm9yIGJlZm9yZSBmYWRpbmcgb3V0XHJcbiAgICAgICAgICAgIHRpbWU6ICcnXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICB9KTtcclxuXHJcbiAgICAkKCcjYWRkLW1heCcpLmNsaWNrKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICQuZ3JpdHRlci5hZGQoe1xyXG4gICAgICAgICAgICAvLyAoc3RyaW5nIHwgbWFuZGF0b3J5KSB0aGUgaGVhZGluZyBvZiB0aGUgbm90aWZpY2F0aW9uXHJcbiAgICAgICAgICAgIHRpdGxlOiAnVGhpcyBpcyBhIG5vdGljZSB3aXRoIGEgbWF4IG9mIDMgb24gc2NyZWVuIGF0IG9uZSB0aW1lIScsXHJcbiAgICAgICAgICAgIC8vIChzdHJpbmcgfCBtYW5kYXRvcnkpIHRoZSB0ZXh0IGluc2lkZSB0aGUgbm90aWZpY2F0aW9uXHJcbiAgICAgICAgICAgIHRleHQ6ICdUaGlzIHdpbGwgZmFkZSBvdXQgYWZ0ZXIgYSBjZXJ0YWluIGFtb3VudCBvZiB0aW1lLiBUaGlzIG5vdGUgYWxzbyBjb250YWlucyBhIGxpbmsgZXhhbXBsZS4gVGhhbmsgeW91IHNvIG11Y2ggdG8gdHJ5IERhc2hndW0uIERldmVsb3BlZCBieSA8YSBocmVmPVwiI1wiIHN0eWxlPVwiY29sb3I6I0ZGRDc3N1wiPkFsdmFyZXouaXM8L2E+LicsXHJcbiAgICAgICAgICAgIC8vIChzdHJpbmcgfCBvcHRpb25hbCkgdGhlIGltYWdlIHRvIGRpc3BsYXkgb24gdGhlIGxlZnRcclxuICAgICAgICAgICAgaW1hZ2U6ICdhc3NldHMvaW1nL3VpLXNhbS5qcGcnLFxyXG4gICAgICAgICAgICAvLyAoYm9vbCB8IG9wdGlvbmFsKSBpZiB5b3Ugd2FudCBpdCB0byBmYWRlIG91dCBvbiBpdHMgb3duIG9yIGp1c3Qgc2l0IHRoZXJlXHJcbiAgICAgICAgICAgIHN0aWNreTogZmFsc2UsXHJcbiAgICAgICAgICAgIC8vIChmdW5jdGlvbikgYmVmb3JlIHRoZSBncml0dGVyIG5vdGljZSBpcyBvcGVuZWRcclxuICAgICAgICAgICAgYmVmb3JlX29wZW46IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBpZigkKCcuZ3JpdHRlci1pdGVtLXdyYXBwZXInKS5sZW5ndGggPT0gMylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBSZXR1cm5pbmcgZmFsc2UgcHJldmVudHMgYSBuZXcgZ3JpdHRlciBmcm9tIG9wZW5pbmdcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICAgICQoJyNhZGQtd2l0aG91dC1pbWFnZScpLmNsaWNrKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICQuZ3JpdHRlci5hZGQoe1xyXG4gICAgICAgICAgICAvLyAoc3RyaW5nIHwgbWFuZGF0b3J5KSB0aGUgaGVhZGluZyBvZiB0aGUgbm90aWZpY2F0aW9uXHJcbiAgICAgICAgICAgIHRpdGxlOiAnVGhpcyBpcyBhIE5vdGljZSBXaXRob3V0IGFuIEltYWdlIScsXHJcbiAgICAgICAgICAgIC8vIChzdHJpbmcgfCBtYW5kYXRvcnkpIHRoZSB0ZXh0IGluc2lkZSB0aGUgbm90aWZpY2F0aW9uXHJcbiAgICAgICAgICAgIHRleHQ6ICdUaGlzIHdpbGwgZmFkZSBvdXQgYWZ0ZXIgYSBjZXJ0YWluIGFtb3VudCBvZiB0aW1lLiBUaGlzIG5vdGUgYWxzbyBjb250YWlucyBhIGxpbmsgZXhhbXBsZS4gVGhhbmsgeW91IHNvIG11Y2ggdG8gdHJ5IERhc2hndW0uIERldmVsb3BlZCBieSA8YSBocmVmPVwiI1wiIHN0eWxlPVwiY29sb3I6I0ZGRDc3N1wiPkFsdmFyZXouaXM8L2E+LidcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJCgnI2FkZC1ncml0dGVyLWxpZ2h0JykuY2xpY2soZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgJC5ncml0dGVyLmFkZCh7XHJcbiAgICAgICAgICAgIC8vIChzdHJpbmcgfCBtYW5kYXRvcnkpIHRoZSBoZWFkaW5nIG9mIHRoZSBub3RpZmljYXRpb25cclxuICAgICAgICAgICAgdGl0bGU6ICdUaGlzIGlzIGEgTGlnaHQgTm90aWZpY2F0aW9uJyxcclxuICAgICAgICAgICAgLy8gKHN0cmluZyB8IG1hbmRhdG9yeSkgdGhlIHRleHQgaW5zaWRlIHRoZSBub3RpZmljYXRpb25cclxuICAgICAgICAgICAgdGV4dDogJ0p1c3QgYWRkIGEgXCJncml0dGVyLWxpZ2h0XCIgY2xhc3NfbmFtZSB0byB5b3VyICQuZ3JpdHRlci5hZGQgb3IgZ2xvYmFsbHkgdG8gJC5ncml0dGVyLm9wdGlvbnMuY2xhc3NfbmFtZScsXHJcbiAgICAgICAgICAgIGNsYXNzX25hbWU6ICdncml0dGVyLWxpZ2h0J1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkKFwiI3JlbW92ZS1hbGxcIikuY2xpY2soZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgJC5ncml0dGVyLnJlbW92ZUFsbCgpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICB9KTtcclxuXHJcblxyXG5cclxufSgpOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
