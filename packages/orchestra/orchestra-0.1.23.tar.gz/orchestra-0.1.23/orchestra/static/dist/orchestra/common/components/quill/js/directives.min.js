!function(){"use strict";function e(e,t){return{restrict:"E",scope:{data:"=",imagePrefix:"=?",readonly:"=",uploadLimitMb:"=?"},link:function(i,r,o){function n(e){if(e.clipboardData&&e.clipboardData.items){var t=e.clipboardData.items[0],r=t.getAsFile();d(r,i.editor.getSelection(),e)}}function a(e){for(var t=e.dataTransfer.files,i=t.length-1;i>=0;i--){var r=t[i],o=l(e);d(r,{start:o,end:o},e)}}function l(e){function t(e,t){var i;if(document.caretPositionFromPoint){var r=document.caretPositionFromPoint(e,t);return{offset:r.offset,node:r.offsetNode}}return document.caretRangeFromPoint?(i=document.caretRangeFromPoint(e,t),{offset:i.startOffset,node:i.startContainer}):void document.body.createTextRange}function r(e){for(var t=[e],i=[];t.length;){var r=t.pop();r.childNodes&&(t=t.concat(Array.prototype.slice.call(r.childNodes))),i.push(r)}return i.reverse()}function o(e){var t=3,i=r(e),o=i.filter(function(e){return e.nodeType===t||!e.firstChild});return o}var n=t(e.clientX,e.clientY);if(!n)return i.editor.getLength();var a=o(c.getElementsByClassName("ql-editor")[0]),l=a.indexOf(n.node),d=i.editor.getContents();return d.ops=d.ops.slice(0,l),d.length()+n.offset}function d(t,r,o){var n="/orchestra/api/interface/upload_image/",a=["image/jpeg","image/png","image/gif"];if(-1===a.indexOf(t.type))return void alert("Files type "+t.type+" not supported.");if(o&&o.preventDefault(),null===r){var l=i.editor.getLength();r={start:l,end:l}}var d=new FileReader;d.onload=function(o){var a=o.target.result,l=a.substring(a.indexOf(",")+1,a.length),d=3*l.length/4;return d>i.uploadLimitMb*Math.pow(10,6)?void alert("Files larger than "+i.uploadLimitMb+"MB cannot be uploaded"):void e.post(n,{image_data:l,image_type:t.type,prefix:i.imagePrefix}).then(function(e,t,o,n){i.editor.deleteText(r),i.editor.insertEmbed(r.start,"image",e.data.url,"user")})},d.readAsDataURL(t)}i.uploadLimitMb=i.uploadLimitMb||5,i.imagePrefix=i.imagePrefix||"";var c=r.find(".orchestra-quill-editor").get(0),s=r.find(".orchestra-quill-toolbar").get(0);if(i.editor=new Quill(c,{modules:{toolbar:{container:s},"link-tooltip":!0},theme:"snow"}),i.$watch("data",function(e,t){i.data&&i.data!=i.editor.getHTML()&&i.editor.setHTML(i.data)}),i.readonly)return i.editor.editor.disable(),void s.remove();i.editor.on("text-change",function(){t(function(){i.data=i.editor.getHTML(),i.$apply()},0,!1)}),i.fileSelector=document.createElement("input"),i.fileSelector.setAttribute("type","file"),i.fileSelector.setAttribute("accept","image/*");var u=r.find(".orchestra-quill-toolbar .ql-image").get(0);i.fileSelector.onchange=function(e){i.editor.focus();for(var t=i.fileSelector.files,r=t.length-1;r>=0;r--)null!==t[r]&&d(t[r],i.editor.getSelection())},u.onclick=function(){return i.fileSelector.click(),!1},c.addEventListener("paste",n,!0),c.addEventListener("drop",a,!0)},templateUrl:"/static/orchestra/common/components/quill/partials/quill.html"}}angular.module("orchestra.common.components.directives").directive("orchestraQuill",["$http","$timeout",e])}();
//# sourceMappingURL=data:application/json;base64,
