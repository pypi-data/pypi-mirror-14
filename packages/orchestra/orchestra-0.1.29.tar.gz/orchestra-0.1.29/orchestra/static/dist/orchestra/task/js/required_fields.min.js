!function(){"use strict";var serviceModule=angular.module("orchestra.task.services");serviceModule.factory("requiredFields",["$rootScope","orchestraService",function($rootScope,orchestraService){var requiredFields={validators:{"input-checkbox":[function(elem){return elem.checked}],"input-text":[function(elem){return elem.value&&elem.value.length>0}]},setup:function(data){this.fields={},this.invalid=[],this.data=data},require:function(fieldType,field){void 0===this.fields[fieldType]?this.fields[fieldType]=[field]:this.fields[fieldType].push(field)},validate:function(){var requiredFields=this;requiredFields.invalid=[];for(var fieldType in requiredFields.fields){var validators=requiredFields.validators[fieldType];if(validators){var fields=requiredFields.fields[fieldType];fields.forEach(function(field){var success=!0;validators.forEach(function(validator){success=success&&validator(field)}),success||requiredFields.invalid.push(field)})}else console.error("Validators not found for field type:"+fieldType)}return $rootScope.$broadcast("orchestra:task:validatedFields"),0===requiredFields.invalid.length},registerValidator:function(fieldType,validator){var requiredFields=this;void 0===requiredFields.validators[fieldType]?requiredFields.validators[fieldType].push(validator):requiredFields.validators[fieldType]=[validator]}};return orchestraService.signals.registerSignal("submit.before",function(){return requiredFields.validate()?void 0:(alert("One or more required fields have not been filled out."),!1)}),requiredFields}]),angular.module("orchestra.task.directives").directive("orchestraRequiredField",["$compile","requiredFields",function($compile,requiredFields){return{restrict:"EA",link:function(scope,elem,attrs){var field=elem.find("input")[0],errorClass=elem.attr("data-error-class");if(errorClass||(errorClass=field.getAttribute("type")+"-error"),field&&"checkbox"!=field.getAttribute("type")&&"text"!=field.getAttribute("type"))return void console.error("Unsupported required field type.");requiredFields.require("input-"+field.getAttribute("type"),field);var toggleError=function(){requiredFields.invalid.indexOf(field)>=0?elem.addClass("required-field-error "+errorClass):elem.removeClass("required-field-error "+errorClass)};toggleError(),scope.$on("orchestra:task:validatedFields",toggleError)}}}])}();
//# sourceMappingURL=data:application/json;base64,
