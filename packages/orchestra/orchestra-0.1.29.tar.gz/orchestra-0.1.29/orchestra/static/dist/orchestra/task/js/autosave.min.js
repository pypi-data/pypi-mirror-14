!function(){"use strict";var serviceModule=angular.module("orchestra.task.services");serviceModule.factory("autoSaveTask",["$rootScope","$timeout","$http","orchestraService",function($rootScope,$timeout,$http,orchestraService){return{setup:function($scope,taskId,taskData){var service=this;service.saveError=!1,service.saving=!1,service.timeout=1e4,service.taskId=taskId,service.data=taskData,service.scope=$scope;var handler=$rootScope.$on("task.data:change",function(){service.schedule()});$scope.$on("$destroy",handler),window.onbeforeunload=function(){return service.autoSaveTimer||service.saveError?"Your latest changes haven't been saved.":void 0},$scope.$on("$locationChangeStart",function(e){(service.autoSaveTimer||service.saveError)&&(confirm("Your latest changes haven't been saved.\n\nAre you sure you want to leave this page?")||(window.onbeforeunload=null,e.preventDefault()))})},schedule:function(){var service=this;service.autoSaveTimer||service.scope.is_read_only||(service.autoSaveTimer=$timeout(function(){service.save()},service.timeout))},cancel:function(){var service=this;$timeout.cancel(service.autoSaveTimer),service.autoSaveTimer=void 0},save:function(){var service=this;if(!service.scope.is_read_only)return service.saving=!0,service.saveError=!1,service.cancel(),orchestraService.signals.fireSignal("save.before")===!1?void(service.saving=!1):void $http.post("/orchestra/api/interface/save_task_assignment/",{task_id:service.taskId,task_data:service.data}).success(function(data,status,headers,config){service.lastSaved=Date.now(),service.timeout=1e4,orchestraService.signals.fireSignal("save.success")}).error(function(data,status,headers,config){service.saveError=!0,orchestraService.signals.fireSignal("save.error")})["finally"](function(){orchestraService.signals.fireSignal("save.finally"),service.saving=!1,service.saveError&&(service.timeout*=2,service.schedule())})}}}])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9yY2hlc3RyYS90YXNrL2pzL2F1dG9zYXZlLmpzIl0sIm5hbWVzIjpbInNlcnZpY2VNb2R1bGUiLCJhbmd1bGFyIiwibW9kdWxlIiwiZmFjdG9yeSIsIiRyb290U2NvcGUiLCIkdGltZW91dCIsIiRodHRwIiwib3JjaGVzdHJhU2VydmljZSIsInNldHVwIiwiJHNjb3BlIiwidGFza0lkIiwidGFza0RhdGEiLCJzZXJ2aWNlIiwidGhpcyIsInNhdmVFcnJvciIsInNhdmluZyIsInRpbWVvdXQiLCJkYXRhIiwic2NvcGUiLCJoYW5kbGVyIiwiJG9uIiwic2NoZWR1bGUiLCJ3aW5kb3ciLCJvbmJlZm9yZXVubG9hZCIsImF1dG9TYXZlVGltZXIiLCJlIiwiY29uZmlybSIsInByZXZlbnREZWZhdWx0IiwiaXNfcmVhZF9vbmx5Iiwic2F2ZSIsImNhbmNlbCIsInVuZGVmaW5lZCIsInNpZ25hbHMiLCJmaXJlU2lnbmFsIiwicG9zdCIsInRhc2tfaWQiLCJ0YXNrX2RhdGEiLCJzdWNjZXNzIiwic3RhdHVzIiwiaGVhZGVycyIsImNvbmZpZyIsImxhc3RTYXZlZCIsIkRhdGUiLCJub3ciLCJlcnJvciJdLCJtYXBwaW5ncyI6IkNBQUEsV0FDRSxZQUVBLElBQUlBLGVBQWdCQyxRQUFRQyxPQUFPLDBCQUVuQ0YsZUFBY0csUUFBUSxnQkFBQSxhQUFBLFdBQUEsUUFBQSxtQkFBZ0IsU0FBU0MsV0FBWUMsU0FBVUMsTUFBT0Msa0JBQzFFLE9BQ0VDLE1BQU8sU0FBU0MsT0FBUUMsT0FBUUMsVUFDOUIsR0FBSUMsU0FBVUMsSUFDZEQsU0FBUUUsV0FBWSxFQUNwQkYsUUFBUUcsUUFBUyxFQUNqQkgsUUFBUUksUUFBVSxJQUNsQkosUUFBUUYsT0FBU0EsT0FDakJFLFFBQVFLLEtBQU9OLFNBQ2ZDLFFBQVFNLE1BQVFULE1BRWhCLElBQUlVLFNBQVVmLFdBQVdnQixJQUFJLG1CQUFvQixXQUMvQ1IsUUFBUVMsWUFFVlosUUFBT1csSUFBSSxXQUFZRCxTQUd2QkcsT0FBT0MsZUFBaUIsV0FDdEIsTUFBSVgsU0FBUVksZUFBaUJaLFFBQVFFLFVBQzVCLDBDQURULFFBTUZMLE9BQU9XLElBQUksdUJBQXdCLFNBQVNLLElBQ3RDYixRQUFRWSxlQUFpQlosUUFBUUUsYUFDOUJZLFFBQVEsMEZBR1hKLE9BQU9DLGVBQWlCLEtBQ3hCRSxFQUFFRSxzQkFLVk4sU0FBVSxXQUNSLEdBQUlULFNBQVVDLElBQ1RELFNBQVFZLGVBQWtCWixRQUFRTSxNQUFNVSxlQUMzQ2hCLFFBQVFZLGNBQWdCbkIsU0FBUyxXQUMvQk8sUUFBUWlCLFFBQ1BqQixRQUFRSSxXQUdmYyxPQUFRLFdBQ04sR0FBSWxCLFNBQVVDLElBQ2RSLFVBQVN5QixPQUFPbEIsUUFBUVksZUFDeEJaLFFBQVFZLGNBQWdCTyxRQUUxQkYsS0FBTSxXQUNKLEdBQUlqQixTQUFVQyxJQUNkLEtBQUlELFFBQVFNLE1BQU1VLGFBTWxCLE1BSEFoQixTQUFRRyxRQUFTLEVBQ2pCSCxRQUFRRSxXQUFZLEVBQ3BCRixRQUFRa0IsU0FDSnZCLGlCQUFpQnlCLFFBQVFDLFdBQVcsa0JBQW1CLE9BR3pEckIsUUFBUUcsUUFBUyxPQUduQlQsT0FBTTRCLEtBQUssa0RBQ1BDLFFBQVd2QixRQUFRRixPQUNuQjBCLFVBQWF4QixRQUFRSyxPQUV0Qm9CLFFBQVEsU0FBU3BCLEtBQU1xQixPQUFRQyxRQUFTQyxRQUN2QzVCLFFBQVE2QixVQUFZQyxLQUFLQyxNQUV6Qi9CLFFBQVFJLFFBQVUsSUFDbEJULGlCQUFpQnlCLFFBQVFDLFdBQVcsa0JBRXJDVyxNQUFNLFNBQVMzQixLQUFNcUIsT0FBUUMsUUFBU0MsUUFDckM1QixRQUFRRSxXQUFZLEVBQ3BCUCxpQkFBaUJ5QixRQUFRQyxXQUFXLGdCQVp4QzNCLFdBY1csV0FDUEMsaUJBQWlCeUIsUUFBUUMsV0FBVyxnQkFDcENyQixRQUFRRyxRQUFTLEVBQ2JILFFBQVFFLFlBRVZGLFFBQVFJLFNBQVcsRUFDbkJKLFFBQVFTIiwiZmlsZSI6Im9yY2hlc3RyYS90YXNrL2pzL2F1dG9zYXZlLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBzZXJ2aWNlTW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ29yY2hlc3RyYS50YXNrLnNlcnZpY2VzJyk7XG5cbiAgc2VydmljZU1vZHVsZS5mYWN0b3J5KCdhdXRvU2F2ZVRhc2snLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkdGltZW91dCwgJGh0dHAsIG9yY2hlc3RyYVNlcnZpY2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2V0dXA6IGZ1bmN0aW9uKCRzY29wZSwgdGFza0lkLCB0YXNrRGF0YSkge1xuICAgICAgICB2YXIgc2VydmljZSA9IHRoaXM7XG4gICAgICAgIHNlcnZpY2Uuc2F2ZUVycm9yID0gZmFsc2U7XG4gICAgICAgIHNlcnZpY2Uuc2F2aW5nID0gZmFsc2U7XG4gICAgICAgIHNlcnZpY2UudGltZW91dCA9IDEwMDAwO1xuICAgICAgICBzZXJ2aWNlLnRhc2tJZCA9IHRhc2tJZDtcbiAgICAgICAgc2VydmljZS5kYXRhID0gdGFza0RhdGE7XG4gICAgICAgIHNlcnZpY2Uuc2NvcGUgPSAkc2NvcGU7XG5cbiAgICAgICAgdmFyIGhhbmRsZXIgPSAkcm9vdFNjb3BlLiRvbigndGFzay5kYXRhOmNoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlcnZpY2Uuc2NoZWR1bGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgaGFuZGxlcik7XG5cbiAgICAgICAgLy8gQnJvd3NlciBjbG9zZSBvciByZWxvYWRcbiAgICAgICAgd2luZG93Lm9uYmVmb3JldW5sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHNlcnZpY2UuYXV0b1NhdmVUaW1lciB8fCBzZXJ2aWNlLnNhdmVFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuICdZb3VyIGxhdGVzdCBjaGFuZ2VzIGhhdmVuXFwndCBiZWVuIHNhdmVkLic7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEFuZ3VsYXIgbG9jYXRpb24gY2hhbmdlXG4gICAgICAgICRzY29wZS4kb24oJyRsb2NhdGlvbkNoYW5nZVN0YXJ0JywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgIGlmIChzZXJ2aWNlLmF1dG9TYXZlVGltZXIgfHwgc2VydmljZS5zYXZlRXJyb3IpIHtcbiAgICAgICAgICAgIGlmICghY29uZmlybSgnWW91ciBsYXRlc3QgY2hhbmdlcyBoYXZlblxcJ3QgYmVlbiBzYXZlZC5cXG5cXG4nICtcbiAgICAgICAgICAgICAgJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBsZWF2ZSB0aGlzIHBhZ2U/JykpIHtcbiAgICAgICAgICAgICAgLy8gRGlzYWJsZSBjb25maXJtIGRpYWxvZyBpZiBuYXZpZ2F0aW5nIGF3YXkgZnJvbSB0YXNrIHZpZXcuXG4gICAgICAgICAgICAgIHdpbmRvdy5vbmJlZm9yZXVubG9hZCA9IG51bGw7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHNjaGVkdWxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB0aGlzO1xuICAgICAgICBpZiAoIXNlcnZpY2UuYXV0b1NhdmVUaW1lciAmJiAhc2VydmljZS5zY29wZS5pc19yZWFkX29ubHkpIHtcbiAgICAgICAgICBzZXJ2aWNlLmF1dG9TYXZlVGltZXIgPSAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNlcnZpY2Uuc2F2ZSgpO1xuICAgICAgICAgIH0sIHNlcnZpY2UudGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjYW5jZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2VydmljZSA9IHRoaXM7XG4gICAgICAgICR0aW1lb3V0LmNhbmNlbChzZXJ2aWNlLmF1dG9TYXZlVGltZXIpO1xuICAgICAgICBzZXJ2aWNlLmF1dG9TYXZlVGltZXIgPSB1bmRlZmluZWQ7XG4gICAgICB9LFxuICAgICAgc2F2ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzZXJ2aWNlID0gdGhpcztcbiAgICAgICAgaWYgKHNlcnZpY2Uuc2NvcGUuaXNfcmVhZF9vbmx5KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNlcnZpY2Uuc2F2aW5nID0gdHJ1ZTtcbiAgICAgICAgc2VydmljZS5zYXZlRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgc2VydmljZS5jYW5jZWwoKTtcbiAgICAgICAgaWYgKG9yY2hlc3RyYVNlcnZpY2Uuc2lnbmFscy5maXJlU2lnbmFsKCdzYXZlLmJlZm9yZScpID09PSBmYWxzZSkge1xuICAgICAgICAgIC8vIElmIGFueSBvZiB0aGUgcmVnaXN0ZXJlZCBzaWduYWwgaGFuZGxlcnMgcmV0dXJucyBmYWxzZSwgcHJldmVudFxuICAgICAgICAgIC8vIHNhdmUuXG4gICAgICAgICAgc2VydmljZS5zYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgJGh0dHAucG9zdCgnL29yY2hlc3RyYS9hcGkvaW50ZXJmYWNlL3NhdmVfdGFza19hc3NpZ25tZW50LycsIHtcbiAgICAgICAgICAgICd0YXNrX2lkJzogc2VydmljZS50YXNrSWQsXG4gICAgICAgICAgICAndGFza19kYXRhJzogc2VydmljZS5kYXRhXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgc2VydmljZS5sYXN0U2F2ZWQgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgLy8gUmVzZXQgdGltZW91dCBjb3VudGVyIG9uIHNhdmUgc3VjY2Vzc1xuICAgICAgICAgICAgc2VydmljZS50aW1lb3V0ID0gMTAwMDA7XG4gICAgICAgICAgICBvcmNoZXN0cmFTZXJ2aWNlLnNpZ25hbHMuZmlyZVNpZ25hbCgnc2F2ZS5zdWNjZXNzJyk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgIHNlcnZpY2Uuc2F2ZUVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgIG9yY2hlc3RyYVNlcnZpY2Uuc2lnbmFscy5maXJlU2lnbmFsKCdzYXZlLmVycm9yJyk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZmluYWxseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG9yY2hlc3RyYVNlcnZpY2Uuc2lnbmFscy5maXJlU2lnbmFsKCdzYXZlLmZpbmFsbHknKTtcbiAgICAgICAgICAgIHNlcnZpY2Uuc2F2aW5nID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoc2VydmljZS5zYXZlRXJyb3IpIHtcbiAgICAgICAgICAgICAgLy8gUmV0cnkgc2F2ZSB3aXRoIGV4cCBiYWNrb2ZmXG4gICAgICAgICAgICAgIHNlcnZpY2UudGltZW91dCAqPSAyO1xuICAgICAgICAgICAgICBzZXJ2aWNlLnNjaGVkdWxlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICB9LFxuICAgIH07XG4gIH0pO1xufSkoKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
