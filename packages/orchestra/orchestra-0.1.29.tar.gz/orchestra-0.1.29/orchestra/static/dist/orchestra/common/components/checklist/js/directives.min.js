!function(){"use strict";function orchestraChecklist($http,$timeout,$compile,orchestraService){return{restrict:"E",scope:{data:"=",author:"@?",imagePrefix:"@?"},link:function(scope,el,attr){var sampleItem={title:"Update the hero image (This is a sample item! Click on the text to edit or click to the right to expand.)",comments:[{author:"jane",timestamp:new Date(new Date-108e5),text:"The hero image you've chosen doesn't fit well with the color scheme. Try something less washed out?"},{author:"john",timestamp:new Date(new Date-72e5),text:"Sounds good! I swapped it out, what do you think? "},{author:"",text:"This is a sample checklist comment. You can add a new comment for each new round of iteration on your work!"}],checked:!1,expanded:!1,readonly:!0,index:0,order:0};scope.data=scope.data||{},scope.data.items=scope.data.items||[sampleItem],scope.data.deletedItems=scope.data.deletedItems||[],scope.hideCompleted=!1,orchestraService.signals.registerSignal("submit.before",function(){scope.data.items.forEach(function(item){item.comments[item.comments.length-1].text&&(item.comments[item.comments.length-1].author=scope.author,item.comments[item.comments.length-1].timestamp=Date.now(),item.comments.push({author:"",text:""}))})}),orchestraService.signals.registerSignal("submit.error",function(){scope.data.items.forEach(function(item){item.comments[item.comments.length-1].text&&(item.comments.pop(),item.comments[item.comments.length-1].author="",item.comments[item.comments.length-1].timestamp=void 0)})}),scope.preventAction=!1;var checklistContainer=el.find("ul.checklist"),drake=dragula([checklistContainer.get(0)],{moves:function(el,container,handle){return handle.className.indexOf("checklist-item")>=0||handle.className.indexOf("item-title-input")>=0&&handle.className.indexOf("readonly")>=0||handle.className.indexOf("item-title")>=0&&handle.className.indexOf("item-title-input")<0},invalid:function(el,target){return scope.preventAction}});drake.on("drag",function(){scope.preventAction=!0,scope.$apply()}),drake.on("dragend",function(){setOrder(),scope.preventAction=!1,scope.$apply()});var setOrder=function(){for(var items=el.get(0).querySelectorAll(".checklist-item"),i=0;i<items.length;i++){var item=items[i];getItemByKey(item.getAttribute("data-key")).order=i}},getItemByKey=function(key){for(var item,i=scope.data.items.length-1;i>=0;i--)if(item=scope.data.items[i],item.$$hashKey===key)return item};scope.addItem=function(){scope.data.items.push({title:"",comments:[{author:scope.author,text:""}],checked:!1,expanded:!1,readonly:!0,order:scope.data.items.length})},scope.removeItem=function(item,confirm_needed){var index=scope.data.items.indexOf(item);confirm_needed&&!confirm("Are you sure you want to delete this item?")||(scope.preventAction=!0,scope.data.items.splice(index,1),scope.data.deletedItems.push(item),$timeout(function(){setOrder(),scope.preventAction=!1},0,!1))},scope.editItem=function(item,$event){item.readonly&&($event&&$event.target.focus(),scope.data.items.forEach(function(scopeItem){scopeItem.readonly=!0})),item.readonly=!item.readonly},scope.expandItem=function(item){item.expanded=!item.expanded,scope.data.items.forEach(function(scopeItem){scopeItem.readonly=!0})},scope.getCommentTimestamp=function(comment){return new Date(comment.timestamp).toLocaleString()}},templateUrl:"/static/orchestra/common/components/checklist/partials/checklist.html"}}function orchestraChecklistItem($http,$timeout,$compile,orchestraService){return{restrict:"E",link:function(scope,el,attr){scope.autosizeInput=function(elem,ghost,minWidth,str){function escape(str){return str.replace(SPACE,"&nbsp;").replace(LESS_THAN,"&lt;").replace(MORE_THAN,"&gt;")}var SPACE=/\s/g,LESS_THAN=/>/g,MORE_THAN=/</g;str=str||elem.value||"";var elemStyle=window.getComputedStyle(elem),elemCssText="font-family:"+elemStyle.fontFamily+";font-size:"+elemStyle.fontSize;ghost.style.cssText+=elemCssText,ghost.innerHTML=escape(str);var width=window.getComputedStyle(ghost).width;return"0px"===width&&(width=minWidth),elem.style.width=width,width},scope.setupAutosizer=function(elem){var ghost=document.createElement("div");ghost.className="ghost",ghost.style.cssText="box-sizing:content-box;display:inline-block;height:0;overflow:hidden;position:absolute;top:0;visibility:hidden;white-space:nowrap;",document.body.appendChild(ghost),elem.style.boxSizing="content-box";var minWidth=scope.autosizeInput(elem,ghost,0,elem.getAttribute("placeholder"));elem.addEventListener("input",function(){scope.autosizeInput(elem,ghost,minWidth)}),$timeout(function(){scope.autosizeInput(elem,ghost,minWidth)},0)},scope.setupAutosizer(el.find(".item-title input").get(0))},templateUrl:"/static/orchestra/common/components/checklist/partials/checklist-item.html"}}angular.module("orchestra.common.components.directives").directive("orchestraChecklist",["$http","$timeout","$compile","orchestraService",orchestraChecklist]),angular.module("orchestra.common.components.directives").directive("orchestraChecklistItem",["$http","$timeout","$compile","orchestraService",orchestraChecklistItem])}();
//# sourceMappingURL=data:application/json;base64,
