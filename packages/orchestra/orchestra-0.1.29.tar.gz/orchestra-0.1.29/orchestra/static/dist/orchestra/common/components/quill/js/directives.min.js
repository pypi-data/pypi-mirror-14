!function(){"use strict";function orchestraQuill($http,$timeout){return{restrict:"E",scope:{data:"=",imagePrefix:"=?",readonly:"=",uploadLimitMb:"=?"},link:function(scope,el,attr){function pasteImage(e){if(e.clipboardData&&e.clipboardData.items){var copiedData=e.clipboardData.items[0],imageFile=copiedData.getAsFile();uploadImage(imageFile,scope.editor.getSelection(),e)}}function dropImage(e){for(var files=e.dataTransfer.files,i=files.length-1;i>=0;i--){var file=files[i],dropOffset=getDropIndexOffset(e);uploadImage(file,{start:dropOffset,end:dropOffset},e)}}function getDropIndexOffset(dropEvent){function getDropCharOffset(x,y){var range;if(document.caretPositionFromPoint){var pos=document.caretPositionFromPoint(x,y);return{offset:pos.offset,node:pos.offsetNode}}return document.caretRangeFromPoint?(range=document.caretRangeFromPoint(x,y),{offset:range.startOffset,node:range.startContainer}):void document.body.createTextRange}function getAllChildNodes(parent){for(var bfsStack=[parent],nodes=[];bfsStack.length;){var currentNode=bfsStack.pop();currentNode.childNodes&&(bfsStack=bfsStack.concat(Array.prototype.slice.call(currentNode.childNodes))),nodes.push(currentNode)}return nodes.reverse()}function getLeafNodes(parent){var textNodeType=3,nodes=getAllChildNodes(parent),leafNodes=nodes.filter(function(elem){return elem.nodeType===textNodeType||!elem.firstChild});return leafNodes}var caretPosition=getDropCharOffset(dropEvent.clientX,dropEvent.clientY);if(!caretPosition)return scope.editor.getLength();var leaves=getLeafNodes(editorContainer.getElementsByClassName("ql-editor")[0]),opIndex=leaves.indexOf(caretPosition.node),contents=scope.editor.getContents();return contents.ops=contents.ops.slice(0,opIndex),contents.length()+caretPosition.offset}function uploadImage(file,range,e){var uploadAPIEndpoint="/orchestra/api/interface/upload_image/",supportedTypes=["image/jpeg","image/png","image/gif"];if(-1===supportedTypes.indexOf(file.type))return void alert("Files type "+file.type+" not supported.");if(e&&e.preventDefault(),null===range){var endIndex=scope.editor.getLength();range={start:endIndex,end:endIndex}}var reader=new FileReader;reader.onload=function(e){var rawData=e.target.result,imageData=rawData.substring(rawData.indexOf(",")+1,rawData.length),imageSize=3*imageData.length/4;return imageSize>scope.uploadLimitMb*Math.pow(10,6)?void alert("Files larger than "+scope.uploadLimitMb+"MB cannot be uploaded"):void $http.post(uploadAPIEndpoint,{image_data:imageData,image_type:file.type,prefix:scope.imagePrefix}).then(function(response,status,headers,config){scope.editor.deleteText(range),scope.editor.insertEmbed(range.start,"image",response.data.url,"user")})},reader.readAsDataURL(file)}scope.uploadLimitMb=scope.uploadLimitMb||5,scope.imagePrefix=scope.imagePrefix||"";var editorContainer=el.find(".orchestra-quill-editor").get(0),toolbarContainer=el.find(".orchestra-quill-toolbar").get(0);if(scope.editor=new Quill(editorContainer,{modules:{toolbar:{container:toolbarContainer},"link-tooltip":!0},theme:"snow"}),scope.$watch("data",function(now,before){scope.data&&scope.data!=scope.editor.getHTML()&&scope.editor.setHTML(scope.data)}),scope.readonly)return scope.editor.editor.disable(),void toolbarContainer.remove();scope.editor.on("text-change",function(){$timeout(function(){scope.data=scope.editor.getHTML(),scope.$apply()},0,!1)}),scope.fileSelector=document.createElement("input"),scope.fileSelector.setAttribute("type","file"),scope.fileSelector.setAttribute("accept","image/*");var imageSelector=el.find(".orchestra-quill-toolbar .ql-image").get(0);scope.fileSelector.onchange=function(e){scope.editor.focus();for(var files=scope.fileSelector.files,i=files.length-1;i>=0;i--)null!==files[i]&&uploadImage(files[i],scope.editor.getSelection())},imageSelector.onclick=function(){return scope.fileSelector.click(),!1},editorContainer.addEventListener("paste",pasteImage,!0),editorContainer.addEventListener("drop",dropImage,!0)},templateUrl:"/static/orchestra/common/components/quill/partials/quill.html"}}angular.module("orchestra.common.components.directives").directive("orchestraQuill",["$http","$timeout",orchestraQuill])}();
//# sourceMappingURL=data:application/json;base64,
