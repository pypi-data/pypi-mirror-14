!function(){"use strict";var serviceModule=angular.module("orchestra.project_management.services");serviceModule.factory("dataService",["$rootScope","$location","orchestraApi",function($rootScope,$location,orchestraApi){var _meta,_now=new Date;return{setup:function(projectId){_meta={tasks:{}},this.projectId=projectId},updateData:function(cb){var dataService=this;orchestraApi.projectInformation(this.projectId).then(function(response){dataService.setData(response.data),"Aborted"===dataService.data.project.status?(alert("Project is aborted."),$location.path("/")):($rootScope.$broadcast("orchestra:projectManagement:dataUpdate"),cb&&cb())},function(response){var errorMessage="Error updating data.";400===response.status&&(errorMessage=response.data.message),alert(errorMessage)})},setData:function(data){this.data=data;var steps={};this.data.steps.forEach(function(step){steps[step.slug]=step}),this.data.steps=steps;for(var step_slug in this.data.tasks){var task=this.data.tasks[step_slug];task.is_human=this.data.steps[task.step_slug].is_human,task.assignments.forEach(function(assignment){assignment.task=task,assignment.iterations.forEach(function(iteration,i){iteration.assignment=assignment})})}var dataService=this;this.timeSortedSlugs=Object.keys(this.data.tasks).sort(function(a,b){var previousTask=dataService.data.tasks[a],nextTask=dataService.data.tasks[b];return d3.ascending(new Date(previousTask.start_datetime),new Date(nextTask.start_datetime))})},taskFromKey:function(key){return this.data.tasks[key]},keyFromTask:function(task){return task.step_slug},awaitingAssignment:function(task){var statuses=["Awaiting Processing","Pending Review"];return statuses.indexOf(task.status)>=0},inProgressAssignment:function(task){var statuses=["Processing","Post-review Processing","Reviewing"];return statuses.indexOf(task.status)>=0||this.awaitingAssignment(task)},taskMeta:function(taskKey,metaKey,value){var taskMeta=_meta.tasks[taskKey]||{};return void 0===value?taskMeta[metaKey]:(taskMeta[metaKey]=value,void(_meta.tasks[taskKey]=taskMeta))},taskEnd:function(task){if(this.awaitingAssignment(task))return _now.toString();var taskEnd=task.start_datetime;return task.assignments.forEach(function(assignment){if(assignment.iterations.length){var lastIteration=assignment.iterations[assignment.iterations.length-1];new Date(lastIteration.end_datetime)>new Date(taskEnd)&&(taskEnd=lastIteration.end_datetime)}}),taskEnd},assignmentFromKey:function(key){return this.taskFromKey(key.taskKey).assignments[key.assignmentIndex]},keyFromAssignment:function(assignment){var dataService=this;return{taskKey:dataService.keyFromTask(assignment.task),assignmentIndex:dataService.indexFromAssignment(assignment)}},indexFromAssignment:function(assignment){return assignment.task.assignments.indexOf(assignment)},iterationFromKey:function(key){return this.assignmentFromKey(key.assignmentKey).iterations[key.iterationIndex]},keyFromIteration:function(iteration){var dataService=this;return{assignmentKey:dataService.keyFromAssignment(iteration.assignment),iterationIndex:iteration.assignment.iterations.indexOf(iteration)}}}}])}();
//# sourceMappingURL=data:application/json;base64,
