!function(){"use strict";var serviceModule=angular.module("orchestra.project_management.services");serviceModule.factory("tasksVis",["$modal","dataService","orchestraApi","visUtils","assignmentsVis","crosshair","axis",function($modal,dataService,orchestraApi,visUtils,assignmentsVis,crosshair,axis){var _humanizeAudit=function(audit){var humanAudit={step:audit.task.step_slug,change:audit.change,assignments:{}};return audit.assignments.forEach(function(assignmentAudit){humanAudit.assignments[assignmentAudit.assignment.worker.username]={change:assignmentAudit.change,snapshots:assignmentAudit.snapshots}}),humanAudit},_hasOneClassFrom=function(target,classes){for(var cls,i=0;i<classes.length&&!(cls=target.classed(classes[i]));i++);return cls};return{reverting:!1,draw:function(){var tasksVis=this,taskViews=visUtils.parentContainer.selectAll(".task-view").data(dataService.timeSortedSlugs,function(slug){return slug});taskViews.exit().remove();var taskViewsEnter=taskViews.enter().append("div").attr("class","task-view"),taskSvgsEnter=taskViewsEnter.append("svg").attr("class","task-svg").style("margin-left",visUtils.params.marginLeft+"px");taskViews.selectAll(".task-svg").attr("width",visUtils.getSvgWidth()),taskViews.style("width",visUtils.getSvgWidth()+visUtils.params.marginLeft+"px");var tasksEnter=taskSvgsEnter.append("g").attr("class","task");taskViews.selectAll(".task").transition().attr({transform:function(taskKey){var task=dataService.taskFromKey(taskKey);return visUtils.translateString(axis.getOffset(task.start_datetime),visUtils.params.lanePadding.top)}}),tasksVis.drawRevertFlags(),assignmentsVis.draw();tasksEnter.append("rect").attr({"class":"task-rect",height:visUtils.params.barHeight,"fill-opacity":0,stroke:"black"});taskViews.selectAll(".task-rect").transition().attr("width",function(slug){var task=dataService.taskFromKey(slug);return axis.getOffset(dataService.taskEnd(task))-axis.getOffset(task.start_datetime)}).each(function(slug){dataService.taskFromKey(slug);tasksVis.expand(d3.select(tasksVis.parentNode))}),taskViews.on("click",function(taskKey){var task=dataService.taskFromKey(taskKey),target=d3.select(d3.event.target),classes=["task-view","task-svg","task-rect"];if(_hasOneClassFrom(target,classes)){task=dataService.taskFromKey(taskKey);var expandAssignments=dataService.taskMeta(taskKey,"expandAssignments");dataService.taskMeta(taskKey,"expandAssignments",!expandAssignments),tasksVis.distribute()}}),this.drawMeta(),this.drawBackgrounds(),tasksVis.distribute()},drawMeta:function(){var tasksVis=this,taskNames=d3.select(".task-names").selectAll(".task-name").data(dataService.timeSortedSlugs,function(slug){return slug});taskNames.exit().remove();var taskNamesEnter=taskNames.enter().append("div").attr("class","task-name");taskNamesEnter.append("span").attr("class","step-slug");var taskActionWrappers=taskNamesEnter.append("div").attr("class","task-action-wrapper"),actions=taskNames.selectAll(".task-action-wrapper").selectAll(".skip-task").data(function(taskKey){return"Complete"!=dataService.taskFromKey(taskKey).status?[taskKey]:[]});actions.exit().remove(),actions.enter().append("button").attr("class","skip-task task-action btn btn-danger btn-xs").text("Skip task").on("click",function(taskKey){tasksVis.completeAndSkipTask(dataService.taskFromKey(taskKey))}),taskActionWrappers.append("a").attr({href:function(taskKey){return dataService.taskFromKey(taskKey).admin_url},target:"_blank","class":"task-action"}).append("button").attr("class","btn btn-default btn-xs").text("View in admin"),taskNamesEnter.append("span").attr("class","step-status"),taskNames.selectAll(".step-slug").text(function(slug){var task=dataService.taskFromKey(slug);return task.step_slug}),taskNames.selectAll(".step-status").text(function(slug){var task=dataService.taskFromKey(slug);return task.status})},drawBackgrounds:function(){d3.selectAll(".task-name").style("background-color",function(slug,i,j){return i%2===0?"#eee":"white"}),visUtils.parentContainer.selectAll(".task-view").style("background-color",function(slug,i){return i%2===0?"#eee":"white"})},drawRevertFlags:function(){var tasksVis=this,tasks=visUtils.parentContainer.selectAll(".task"),revertGroups=tasks.selectAll(".revert-group").data(function(slug){var task=dataService.taskFromKey(slug),datetimes=[];return task.assignments.forEach(function(assignment){assignment.iterations&&assignment.iterations.forEach(function(iteration){datetimes.push({datetime:new Date(iteration.start_datetime),taskKey:task.step_slug})})}),dataService.inProgressAssignment(task)||datetimes.push({datetime:new Date(dataService.taskEnd(task)),taskKey:task.step_slug}),datetimes},function(datetime){return datetime.datetime});revertGroups.exit().remove();var revertGroupsEnter=revertGroups.enter().append("g").attr("class","revert-group");revertGroupsEnter.append("line").attr({"class":"revert-line",stroke:"rgb(0, 121, 191)"}),revertGroupsEnter.append("path").attr({d:"M0,0 V4 L-2,2 Z",fill:"rgb(0, 121, 191)",transform:visUtils.translateString(0,-visUtils.params.lanePadding.top/2)+" scale(3, 3)"}).style("cursor","pointer").on("mouseenter",function(datetimeInfo){tasksVis.reverting||(crosshair.move(datetimeInfo.datetime),crosshair.show())}).on("mouseleave",function(datetimeInfo){tasksVis.reverting||crosshair.hide()}).on("click",function(datetimeInfo){var taskId=dataService.taskFromKey(datetimeInfo.taskKey).id;tasksVis.revertTask(taskId,datetimeInfo.datetime)}),revertGroups.transition().attr({transform:function(datetimeInfo){var taskStartDatetime=dataService.taskFromKey(datetimeInfo.taskKey).start_datetime;return visUtils.translateString(axis.timeScale(datetimeInfo.datetime)-axis.getOffset(taskStartDatetime),0)}}),revertGroups.selectAll(".revert-line").transition().attr({y1:-visUtils.params.lanePadding.top/2,y2:function(datetimeInfo){var taskKey=datetimeInfo.taskKey,task=dataService.taskFromKey(taskKey);return dataService.taskMeta(taskKey,"expandAssignments")?(task.assignments.length+1)*visUtils.params.barHeight+1:visUtils.params.barHeight+1}})},expand:function(){var taskViews=d3.selectAll(".task-view");taskViews.selectAll(".assignments").transition().attr("transform",function(taskKey){var expand=dataService.taskMeta(taskKey,"expandAssignments");visUtils.translateString(0,expand?visUtils.params.barHeight:0)}),taskViews.selectAll(".assignment").transition().attr({transform:function(assignmentKey,i){var assignment=dataService.assignmentFromKey(assignmentKey),taskKey=dataService.keyFromTask(assignment.task),expand=dataService.taskMeta(taskKey,"expandAssignments");return visUtils.translateString(0,expand?visUtils.params.barHeight*(i+1):0)}}),taskViews.selectAll(".assignment-meta").transition().style({position:"absolute",top:function(assignmentKey,i){var assignment=dataService.assignmentFromKey(assignmentKey),taskKey=dataService.keyFromTask(assignment.task),expand=dataService.taskMeta(taskKey,"expandAssignments");return expand?visUtils.params.barHeight*(i+1)+visUtils.params.lanePadding.top+4+"px":visUtils.params.lanePadding.top+"px"},right:function(assignmentKey){var assignment=dataService.assignmentFromKey(assignmentKey);return visUtils.getSvgWidth()-axis.getOffset(assignment.task.start_datetime)+10+"px"},display:function(assignmentKey,i){var assignment=dataService.assignmentFromKey(assignmentKey),taskKey=dataService.keyFromTask(assignment.task),expand=dataService.taskMeta(taskKey,"expandAssignments");return expand?"inherit":"none"}}),taskViews.selectAll(".active-assignment").attr("display",function(assignmentKey){var assignment=dataService.assignmentFromKey(assignmentKey),taskKey=dataService.keyFromTask(assignment.task),expand=dataService.taskMeta(taskKey,"expandAssignments");return expand?"inherit":"none"})},distribute:function(){visUtils.parentContainer.selectAll(".task-svg").transition().attr({height:function(taskKey){var task=dataService.taskFromKey(taskKey);return visUtils.getTaskHeight(task)}});var taskNamesWrapper=d3.selectAll(".task-names").style("margin-top",visUtils.params.scaleHeight+"px");taskNamesWrapper.selectAll(".task-name").transition().style({height:function(slug,i){var task=dataService.taskFromKey(slug);return visUtils.getTaskHeight(task)+"px"},"padding-top":visUtils.params.lanePadding.top/2+"px"});this.drawRevertFlags(),this.expand()},completeAndSkipTask:function(task){confirm("Are you sure you want to skip this task and mark it as complete? This might leave the project in a corrupted/unrecoverable state.")&&orchestraApi.completeAndSkipTask(task).then(function(){dataService.updateData()},function(response){var errorMessage="Error skipping task.";400===response.status&&(errorMessage=response.data.message),alert(errorMessage)})},revertTask:function(taskId,datetime){var tasksVis=this;tasksVis.reverting||(tasksVis.reverting=!0,orchestraApi.revertTask(taskId,datetime,!0).then(function(response){var modalInstance=$modal.open({templateUrl:"/static/orchestra/project_management/partials/revert_modal.html",controller:["$scope",function($scope){$scope.audit=_humanizeAudit(response.data),$scope.cancel=modalInstance.close,$scope.confirmRevert=function(){orchestraApi.revertTask(taskId,datetime,!1).then(function(){dataService.updateData()},function(response){var errorMessage="Could not revert task.";400===response.status&&(errorMessage=response.data.message),alert(errorMessage)})["finally"](function(){modalInstance.close()})}}]});modalInstance.result["finally"](function(){tasksVis.reverting=!1,crosshair.hide()})},function(response){var errorMessage="Could not generate revert information.";400===response.status&&(errorMessage=response.data.message),alert(errorMessage)}))}}}])}();
//# sourceMappingURL=data:application/json;base64,
