!function(){"use strict";var serviceModule=angular.module("orchestra.project_management.services");serviceModule.factory("assignmentsVis",["dataService","orchestraApi","iterationsVis","visUtils",function(dataService,orchestraApi,iterationsVis,visUtils){var _vis,assignmentsVis;return{addingAssignment:!1,setup:function(vis){_vis=vis,assignmentsVis=this},draw:function(){var tasks=visUtils.parentContainer.selectAll(".task"),assignments=tasks.selectAll(".assignment").data(function(taskKey){var assignments=dataService.taskFromKey(taskKey).assignments.map(function(assignment){return dataService.keyFromAssignment(assignment)});return assignments.push(),assignments});assignments.exit().remove();var assignmentsEnter=assignments.enter().append("g").attr("class","assignment");iterationsVis.draw(),assignmentsEnter.append("circle").attr({"class":"active-assignment",cx:0,cy:15,r:5}),assignments.selectAll(".active-assignment").attr({fill:function(assignmentKey){var assignment=dataService.assignmentFromKey(assignmentKey);return"Submitted"==assignment.status?"rgb(0, 121, 191)":"white"},stroke:function(assignmentKey){var assignment=dataService.assignmentFromKey(assignmentKey);return"Submitted"==assignment.status?"white":"rgb(0, 121, 191)"}}),this.drawAssignmentTools()},drawAssignmentTools:function(){var assignmentsVis=this,assignmentsMeta=visUtils.parentContainer.selectAll(".task-view").selectAll(".assignment-meta").data(function(taskKey){return dataService.taskFromKey(taskKey).assignments.map(function(assignment){return dataService.keyFromAssignment(assignment)})});assignmentsMeta.exit().remove();var assignmentsMetaEnter=assignmentsMeta.enter().append("div").attr("class","assignment-meta");assignmentsMetaEnter.append("input").attr({"class":"worker-name readonly"}).on("click",function(){d3.select(this).classed("readonly",!1)}).on("blur",function(assignmentKey){var assignment=dataService.assignmentFromKey(assignmentKey);this.value=assignment.task.is_human?assignment.worker.username:"Machine",d3.select(this).classed("readonly",!0)}),assignmentsMeta.selectAll(".worker-name").attr({placeholder:function(assignmentKey){var assignment=dataService.assignmentFromKey(assignmentKey);return assignment.worker.username||!assignment.task.is_human?"":"Add new assignment"}}).on("keydown",function(assignmentKey){var assignment=dataService.assignmentFromKey(assignmentKey);13==d3.event.keyCode&&assignment.task.is_human&&(assignment.worker.username?assignmentsVis.reassignAssignment(assignment,d3.select(this)):assignmentsVis.assign_task(assignment.task,d3.select(this)))}).each(function(assignmentKey){var assignment=dataService.assignmentFromKey(assignmentKey);this.value=assignment.task.is_human?assignment.worker.username:"Machine"})},assign_task:function(task,inputEl){var assignmentsVis=this;assignmentsVis.addingAssignment||(assignmentsVis.addingAssignment=!0,orchestraApi.assignTask(task,inputEl.node().value).then(function(){inputEl.node().blur(),dataService.updateData()},function(response){inputEl.node().value="",inputEl.node().blur();var errorMessage="Error assigning task.";400===response.status&&(errorMessage=response.data.message),alert(errorMessage)})["finally"](function(){assignmentsVis.addingAssignment=!1}))},reassignAssignment:function(assignment,inputEl){assignment.reassigning||(assignment.reassigning=!0,orchestraApi.reassignAssignment(assignment,inputEl.node().value).then(function(){assignment.worker.username=inputEl.node().value,assignmentsVis.draw()},function(response){inputEl.node().blur();var errorMessage="Error reassigning worker.";400===response.status&&(errorMessage=response.data.message),alert(errorMessage)})["finally"](function(){inputEl.node().blur(),inputEl.node().value=assignment.worker.username,assignment.reassigning=!1}))}}}])}();
//# sourceMappingURL=data:application/json;base64,
