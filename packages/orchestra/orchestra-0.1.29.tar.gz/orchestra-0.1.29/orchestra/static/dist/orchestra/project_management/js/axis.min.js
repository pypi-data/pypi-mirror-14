!function(){"use strict";var serviceModule=angular.module("orchestra.project_management.services");serviceModule.factory("axis",["dataService","visUtils",function(dataService,visUtils){return{draw:function(){if(visUtils.parentContainer.select(".x.axis").style("opacity",0),dataService.timeSortedSlugs.length){var firstTask=dataService.data.tasks[dataService.timeSortedSlugs[0]],minDatetime=new Date(firstTask.start_datetime),taskEndTimes=dataService.timeSortedSlugs.map(function(slug){return dataService.taskEnd(dataService.taskFromKey(slug))}),maxDatetime=minDatetime;taskEndTimes.forEach(function(datetime_string){var nextDatetime=new Date(datetime_string);nextDatetime>minDatetime&&(maxDatetime=nextDatetime)});var hourInMilliseconds=36e5,numHours=Math.ceil((maxDatetime-minDatetime)/hourInMilliseconds);maxDatetime=new Date(minDatetime.getTime()+numHours*hourInMilliseconds);var hourTicks=d3.range(0,numHours+1).map(function(hourIndex){return new Date(minDatetime.getTime()+hourIndex*hourInMilliseconds)});this.timeScale=d3.time.scale().domain([minDatetime,maxDatetime]).range([0,visUtils.params.scaleWidth]);var xLabelText,xAxis=d3.svg.axis().scale(this.timeScale).tickSize(10),tickSpread=5;if(this.relativeTime)xAxis.tickValues(hourTicks).tickFormat(function(d,i){return hourTicks.length<tickSpread||i%tickSpread===0?(d-minDatetime)/hourInMilliseconds:void 0}),xLabelText="Time (hours)";else{xAxis.ticks(d3.time.hour,1);var defaultFormat=this.timeScale.tickFormat();xAxis.tickFormat(function(d,i){return i%tickSpread===0?defaultFormat(d):""}),xLabelText="Time (local)"}visUtils.parentContainer.select(".x.label").text(xLabelText).style("right",visUtils.getSvgWidth()+5+"px"),visUtils.parentContainer.select(".x.axis").transition().call(xAxis),visUtils.parentContainer.select(".x.axis").style("opacity",1).attr("width",visUtils.getSvgWidth())}},getOffset:function(datetime){return this.timeScale(new Date(datetime))}}}])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9yY2hlc3RyYS9wcm9qZWN0X21hbmFnZW1lbnQvanMvYXhpcy5qcyJdLCJuYW1lcyI6WyJzZXJ2aWNlTW9kdWxlIiwiYW5ndWxhciIsIm1vZHVsZSIsImZhY3RvcnkiLCJkYXRhU2VydmljZSIsInZpc1V0aWxzIiwiZHJhdyIsInBhcmVudENvbnRhaW5lciIsInNlbGVjdCIsInN0eWxlIiwidGltZVNvcnRlZFNsdWdzIiwibGVuZ3RoIiwiZmlyc3RUYXNrIiwiZGF0YSIsInRhc2tzIiwibWluRGF0ZXRpbWUiLCJEYXRlIiwic3RhcnRfZGF0ZXRpbWUiLCJ0YXNrRW5kVGltZXMiLCJtYXAiLCJzbHVnIiwidGFza0VuZCIsInRhc2tGcm9tS2V5IiwibWF4RGF0ZXRpbWUiLCJmb3JFYWNoIiwiZGF0ZXRpbWVfc3RyaW5nIiwibmV4dERhdGV0aW1lIiwiaG91ckluTWlsbGlzZWNvbmRzIiwibnVtSG91cnMiLCJNYXRoIiwiY2VpbCIsImdldFRpbWUiLCJob3VyVGlja3MiLCJkMyIsInJhbmdlIiwiaG91ckluZGV4IiwidGhpcyIsInRpbWVTY2FsZSIsInRpbWUiLCJzY2FsZSIsImRvbWFpbiIsInBhcmFtcyIsInNjYWxlV2lkdGgiLCJ4TGFiZWxUZXh0IiwieEF4aXMiLCJzdmciLCJheGlzIiwidGlja1NpemUiLCJ0aWNrU3ByZWFkIiwicmVsYXRpdmVUaW1lIiwidGlja1ZhbHVlcyIsInRpY2tGb3JtYXQiLCJkIiwiaSIsInRpY2tzIiwiaG91ciIsImRlZmF1bHRGb3JtYXQiLCJ0ZXh0IiwiZ2V0U3ZnV2lkdGgiLCJ0cmFuc2l0aW9uIiwiY2FsbCIsImF0dHIiLCJnZXRPZmZzZXQiLCJkYXRldGltZSJdLCJtYXBwaW5ncyI6IkNBQUEsV0FDRSxZQUVBLElBQUlBLGVBQWdCQyxRQUFRQyxPQUFPLHdDQUVuQ0YsZUFBY0csUUFBUSxRQUFBLGNBQUEsV0FBUSxTQUFTQyxZQUFhQyxVQUlsRCxPQUNFQyxLQUFNLFdBS0osR0FEQUQsU0FBU0UsZ0JBQWdCQyxPQUFPLFdBQVdDLE1BQU0sVUFBVyxHQUN2REwsWUFBWU0sZ0JBQWdCQyxPQUFqQyxDQUdBLEdBQUlDLFdBQVlSLFlBQVlTLEtBQUtDLE1BQU1WLFlBQVlNLGdCQUFnQixJQUMvREssWUFBYyxHQUFJQyxNQUFLSixVQUFVSyxnQkFDakNDLGFBQWVkLFlBQVlNLGdCQUFnQlMsSUFBSSxTQUFTQyxNQUMxRCxNQUFPaEIsYUFBWWlCLFFBQVFqQixZQUFZa0IsWUFBWUYsU0FHakRHLFlBQWNSLFdBQ2xCRyxjQUFhTSxRQUFRLFNBQVNDLGlCQUM1QixHQUFJQyxjQUFlLEdBQUlWLE1BQUtTLGdCQUN4QkMsY0FBZVgsY0FDakJRLFlBQWNHLGVBSWxCLElBQUlDLG9CQUFxQixLQUNyQkMsU0FBV0MsS0FBS0MsTUFBTVAsWUFBY1IsYUFBZVksbUJBQ3ZESixhQUFjLEdBQUlQLE1BQUtELFlBQVlnQixVQUFZSCxTQUFXRCxtQkFFMUQsSUFBSUssV0FBWUMsR0FBR0MsTUFBTSxFQUFHTixTQUFXLEdBQUdULElBQUksU0FBU2dCLFdBQ3JELE1BQU8sSUFBSW5CLE1BQUtELFlBQVlnQixVQUFZSSxVQUFZUixxQkFHdERTLE1BQUtDLFVBQVlKLEdBQUdLLEtBQUtDLFFBQ3RCQyxRQUFRekIsWUFBYVEsY0FDckJXLE9BQU8sRUFBRzdCLFNBQVNvQyxPQUFPQyxZQUU3QixJQUtJQyxZQUxBQyxNQUFRWCxHQUFHWSxJQUFJQyxPQUNoQlAsTUFBTUgsS0FBS0MsV0FDWFUsU0FBUyxJQUVSQyxXQUFhLENBRWpCLElBQUlaLEtBQUthLGFBQ1BMLE1BQU1NLFdBQVdsQixXQUNkbUIsV0FBVyxTQUFTQyxFQUFHQyxHQUN0QixNQUFJckIsV0FBVXJCLE9BQVNxQyxZQUFjSyxFQUFJTCxhQUFlLEdBQzlDSSxFQUFJckMsYUFBZVksbUJBRDdCLFNBSUpnQixXQUFhLG1CQUNSLENBQ0xDLE1BQU1VLE1BQU1yQixHQUFHSyxLQUFLaUIsS0FBTSxFQUMxQixJQUFJQyxlQUFnQnBCLEtBQUtDLFVBQVVjLFlBQ25DUCxPQUFNTyxXQUFXLFNBQVNDLEVBQUdDLEdBQzNCLE1BQU9BLEdBQUlMLGFBQWUsRUFBSVEsY0FBY0osR0FBSyxLQUVuRFQsV0FBYSxlQUdmdEMsU0FBU0UsZ0JBQWdCQyxPQUFPLFlBQzdCaUQsS0FBS2QsWUFDTGxDLE1BQU0sUUFBU0osU0FBU3FELGNBQWdCLEVBQUksTUFFL0NyRCxTQUFTRSxnQkFBZ0JDLE9BQU8sV0FBV21ELGFBQWFDLEtBQUtoQixPQUM3RHZDLFNBQVNFLGdCQUFnQkMsT0FBTyxXQUM3QkMsTUFBTSxVQUFXLEdBQ2pCb0QsS0FBSyxRQUFTeEQsU0FBU3FELGlCQUU1QkksVUFBVyxTQUFTQyxVQUlsQixNQUFPM0IsTUFBS0MsVUFBVSxHQUFJckIsTUFBSytDIiwiZmlsZSI6Im9yY2hlc3RyYS9wcm9qZWN0X21hbmFnZW1lbnQvanMvYXhpcy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgc2VydmljZU1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdvcmNoZXN0cmEucHJvamVjdF9tYW5hZ2VtZW50LnNlcnZpY2VzJyk7XG5cbiAgc2VydmljZU1vZHVsZS5mYWN0b3J5KCdheGlzJywgZnVuY3Rpb24oZGF0YVNlcnZpY2UsIHZpc1V0aWxzKSB7XG4gICAgLyoqXG4gICAgICogU2VydmljZSB0byBoYW5kbGUgYWxpZ25pbmcgdmlzdWFsaXphdGlvbiBlbGVtZW50cyB0byBhIGNvbW1vbiB0aW1lIGF4aXMuXG4gICAgICovXG4gICAgcmV0dXJuIHtcbiAgICAgIGRyYXc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogRHJhd3MvdXBkYXRlcyBheGlzIHdpdGggYm90aCByZWxhdGl2ZSBhbmQgbG9jYWwgdGltZSBzY2FsZXMuXG4gICAgICAgICAqL1xuICAgICAgICB2aXNVdGlscy5wYXJlbnRDb250YWluZXIuc2VsZWN0KCcueC5heGlzJykuc3R5bGUoJ29wYWNpdHknLCAwKTtcbiAgICAgICAgaWYgKCFkYXRhU2VydmljZS50aW1lU29ydGVkU2x1Z3MubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmaXJzdFRhc2sgPSBkYXRhU2VydmljZS5kYXRhLnRhc2tzW2RhdGFTZXJ2aWNlLnRpbWVTb3J0ZWRTbHVnc1swXV07XG4gICAgICAgIHZhciBtaW5EYXRldGltZSA9IG5ldyBEYXRlKGZpcnN0VGFzay5zdGFydF9kYXRldGltZSk7XG4gICAgICAgIHZhciB0YXNrRW5kVGltZXMgPSBkYXRhU2VydmljZS50aW1lU29ydGVkU2x1Z3MubWFwKGZ1bmN0aW9uKHNsdWcpIHtcbiAgICAgICAgICByZXR1cm4gZGF0YVNlcnZpY2UudGFza0VuZChkYXRhU2VydmljZS50YXNrRnJvbUtleShzbHVnKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBtYXhEYXRldGltZSA9IG1pbkRhdGV0aW1lO1xuICAgICAgICB0YXNrRW5kVGltZXMuZm9yRWFjaChmdW5jdGlvbihkYXRldGltZV9zdHJpbmcpIHtcbiAgICAgICAgICB2YXIgbmV4dERhdGV0aW1lID0gbmV3IERhdGUoZGF0ZXRpbWVfc3RyaW5nKTtcbiAgICAgICAgICBpZiAobmV4dERhdGV0aW1lID4gbWluRGF0ZXRpbWUpIHtcbiAgICAgICAgICAgIG1heERhdGV0aW1lID0gbmV4dERhdGV0aW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIGhvdXJJbk1pbGxpc2Vjb25kcyA9IDYwICogNjAgKiAxMDAwO1xuICAgICAgICB2YXIgbnVtSG91cnMgPSBNYXRoLmNlaWwoKG1heERhdGV0aW1lIC0gbWluRGF0ZXRpbWUpIC8gaG91ckluTWlsbGlzZWNvbmRzKTtcbiAgICAgICAgbWF4RGF0ZXRpbWUgPSBuZXcgRGF0ZShtaW5EYXRldGltZS5nZXRUaW1lKCkgKyBudW1Ib3VycyAqIGhvdXJJbk1pbGxpc2Vjb25kcyk7XG5cbiAgICAgICAgdmFyIGhvdXJUaWNrcyA9IGQzLnJhbmdlKDAsIG51bUhvdXJzICsgMSkubWFwKGZ1bmN0aW9uKGhvdXJJbmRleCkge1xuICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShtaW5EYXRldGltZS5nZXRUaW1lKCkgKyBob3VySW5kZXggKiBob3VySW5NaWxsaXNlY29uZHMpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnRpbWVTY2FsZSA9IGQzLnRpbWUuc2NhbGUoKVxuICAgICAgICAgIC5kb21haW4oW21pbkRhdGV0aW1lLCBtYXhEYXRldGltZV0pXG4gICAgICAgICAgLnJhbmdlKFswLCB2aXNVdGlscy5wYXJhbXMuc2NhbGVXaWR0aF0pO1xuXG4gICAgICAgIHZhciB4QXhpcyA9IGQzLnN2Zy5heGlzKClcbiAgICAgICAgICAuc2NhbGUodGhpcy50aW1lU2NhbGUpXG4gICAgICAgICAgLnRpY2tTaXplKDEwKTtcblxuICAgICAgICB2YXIgdGlja1NwcmVhZCA9IDU7XG4gICAgICAgIHZhciB4TGFiZWxUZXh0O1xuICAgICAgICBpZiAodGhpcy5yZWxhdGl2ZVRpbWUpIHtcbiAgICAgICAgICB4QXhpcy50aWNrVmFsdWVzKGhvdXJUaWNrcylcbiAgICAgICAgICAgIC50aWNrRm9ybWF0KGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgICAgaWYgKGhvdXJUaWNrcy5sZW5ndGggPCB0aWNrU3ByZWFkIHx8IGkgJSB0aWNrU3ByZWFkID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChkIC0gbWluRGF0ZXRpbWUpIC8gaG91ckluTWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB4TGFiZWxUZXh0ID0gJ1RpbWUgKGhvdXJzKSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeEF4aXMudGlja3MoZDMudGltZS5ob3VyLCAxKTtcbiAgICAgICAgICB2YXIgZGVmYXVsdEZvcm1hdCA9IHRoaXMudGltZVNjYWxlLnRpY2tGb3JtYXQoKTtcbiAgICAgICAgICB4QXhpcy50aWNrRm9ybWF0KGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgIHJldHVybiBpICUgdGlja1NwcmVhZCA9PT0gMCA/IGRlZmF1bHRGb3JtYXQoZCkgOiAnJztcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB4TGFiZWxUZXh0ID0gJ1RpbWUgKGxvY2FsKSc7XG4gICAgICAgIH1cblxuICAgICAgICB2aXNVdGlscy5wYXJlbnRDb250YWluZXIuc2VsZWN0KCcueC5sYWJlbCcpXG4gICAgICAgICAgLnRleHQoeExhYmVsVGV4dClcbiAgICAgICAgICAuc3R5bGUoJ3JpZ2h0JywgdmlzVXRpbHMuZ2V0U3ZnV2lkdGgoKSArIDUgKyAncHgnKTtcblxuICAgICAgICB2aXNVdGlscy5wYXJlbnRDb250YWluZXIuc2VsZWN0KCcueC5heGlzJykudHJhbnNpdGlvbigpLmNhbGwoeEF4aXMpO1xuICAgICAgICB2aXNVdGlscy5wYXJlbnRDb250YWluZXIuc2VsZWN0KCcueC5heGlzJylcbiAgICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCAxKVxuICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIHZpc1V0aWxzLmdldFN2Z1dpZHRoKCkpO1xuICAgICAgfSxcbiAgICAgIGdldE9mZnNldDogZnVuY3Rpb24oZGF0ZXRpbWUpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGN1bGF0ZXMgdGhlIGF4aXMgb2Zmc2V0IGZvciBhIGdpdmVuIGRhdGV0aW1lIHN0cmluZy5cbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiB0aGlzLnRpbWVTY2FsZShuZXcgRGF0ZShkYXRldGltZSkpO1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xufSkoKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
