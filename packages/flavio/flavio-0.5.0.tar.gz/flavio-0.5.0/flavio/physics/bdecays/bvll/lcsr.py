import numpy as np
import scipy.interpolate

# this is table 4 of arXiv:1212.2242
# the columns are:
# 1) q^2/GeV^2
# 2) 100*G_1^perp (B- -> K*-)
# 3) 100*G_3^para (B- -> K*-)
# 4) 100*G_1^perp (B0 -> K*0)
# 5) 100*G_3^para (B0 -> K*0)
lcsr_o8_arr = np.array([[0.010,0.2931-0.3960j,2.3443+0.8303j,0.2022+0.1980j,-1.1952-0.4151j],
[0.261,0.3204-0.3781j,1.0673+0.8213j,0.1661+0.1890j,-0.5574-0.4107j],
[0.512,0.3384-0.3604j,0.7999+0.8122j,0.1431+0.1802j,-0.4243-0.4061j],
[0.764,0.3526-0.3429j,0.6388+0.8029j,0.1251+0.1715j,-0.3443-0.4014j],
[1.015,0.3641-0.3257j,0.5217+0.7933j,0.1102+0.1629j,-0.2863-0.3966j],
[1.266,0.3736-0.3087j,0.4286+0.7834j,0.0975+0.1544j,-0.2403-0.3917j],
[1.517,0.3815-0.2920j,0.3508+0.7732j,0.0866+0.1460j,-0.2020-0.3866j],
[1.768,0.3878-0.2755j,0.2834+0.7628j,0.0771+0.1378j,-0.1688-0.3814j],
[2.020,0.3929-0.2593j,0.2235+0.7519j,0.0689+0.1297j,-0.1395-0.3760j],
[2.271,0.3969-0.2434j,0.1693+0.7407j,0.0617+0.1217j,-0.1129-0.3703j],
[2.522,0.3998-0.2277j,0.1196+0.7290j,0.0554+0.1139j,-0.0887-0.3645j],
[2.773,0.4018-0.2124j,0.0734+0.7168j,0.0499+0.1062j,-0.0662-0.3584j],
[3.024,0.4028-0.1974j,0.0300+0.7041j,0.0453+0.0987j,-0.0451-0.3521j],
[3.275,0.4030-0.1827j,-0.0110+0.6908j,0.0413+0.0913j,-0.0253-0.3454j],
[3.527,0.4024-0.1683j,-0.0500+0.6768j,0.0379+0.0842j,-0.0064-0.3384j],
[4.786,0.3883-0.1024j,-0.2248+0.5935j,0.0295+0.0512j,0.0775-0.2967j],
[6.046,0.3586-0.0489j,-0.3754+0.4758j,0.0323+0.0245j,0.1488-0.2379j],
[7.305,0.3177-0.0129j,-0.4908+0.2946j,0.0431+0.0065j,0.2019-0.1473j],
[8.565,0.2758+0.0000j,-0.4519+0.0224j,0.0562-0.0000j,0.1770-0.0112j],
[9.824,0.2492+0.0000j,-0.2972+0.0000j,0.0630-0.0000j,0.0933-0.0000j],
[11.084,0.2312-0.0000j,-0.2485-0.0000j,0.0669+0.0000j,0.0613+0.0000j],
[12.343,0.2176-0.0000j,-0.2243-0.0000j,0.0696+0.0000j,0.0400+0.0000j],
[13.603,0.2070-0.0000j,-0.2128+0.0000j,0.0718+0.0000j,0.0230-0.0000j],
[14.862,0.1986+0.0000j,-0.2101+0.0000j,0.0740-0.0000j,0.0076-0.0000j],
[16.122,0.1921-0.0000j,-0.2147-0.0000j,0.0763+0.0000j,-0.0080+0.0000j],
[17.381,0.1873-0.0000j,-0.2267+0.0000j,0.0790+0.0000j,-0.0252-0.0000j],
[18.641,0.1843+0.0000j,-0.2475+0.0000j,0.0824-0.0000j,-0.0459-0.0000j],
[19.900,0.1831-0.0000j,-0.2803+0.0000j,0.0869+0.0000j,-0.0725-0.0000j],
[21.160,0.1844-0.0000j,-0.3310-0.0000j,0.0932+0.0000j,-0.1097+0.0000j]])

# interpolating the above table
lcsr_o8_interp = scipy.interpolate.interp1d(lcsr_o8_arr[:, 0], lcsr_o8_arr[:, 1:].view(float))

# returning the quantities G_1,2,3 defined in arXiv:1212.2242 using the above interpolation
def lcsr_o8(par, q2, B):
    G_arr = lcsr_o8_interp(q2).view(complex)
    G = {}
    if B == 'B0':
        G['1_perp'] = G_arr[3]
        G['3_para'] = G_arr[4]
    elif B == 'B+':
        G['1_perp'] = G_arr[0]
        G['3_para'] = G_arr[0]
    else:
        raise InputError("LCSR O8 contribution not implemented for " + B + " decay")
    mB = par['m_' + B]
    G['1_para'] = 0
    G['2_para'] = 0
    G['2_perp'] = (1 - q2/mB**2) * G['1_perp']
    G['3_perp'] = G['2_perp']/(1 - q2/mB**2)
    return { 'G_1': G['1_perp'] + G['1_para'],
             'G_2': G['2_perp'] + G['2_para'],
             'G_3': G['3_perp'] + G['3_para'] }
