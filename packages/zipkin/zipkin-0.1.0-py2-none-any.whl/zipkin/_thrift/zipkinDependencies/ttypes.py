#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style=true:slots=true
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class DependencyLink(object):
  """
  Attributes:
   - parent: parent service name (caller)
   - child: child service name (callee)
   - callCount: calls made during the duration of this link
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'parent', None, None, ), # 1
    (2, TType.STRING, 'child', None, None, ), # 2
    None, # 3
    (4, TType.I64, 'callCount', None, None, ), # 4
  )

  def __init__(self, parent=None, child=None, callCount=None,):
    self.parent = parent
    self.child = child
    self.callCount = callCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.parent = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.child = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.callCount = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DependencyLink')
    if self.parent is not None:
      oprot.writeFieldBegin('parent', TType.STRING, 1)
      oprot.writeString(self.parent)
      oprot.writeFieldEnd()
    if self.child is not None:
      oprot.writeFieldBegin('child', TType.STRING, 2)
      oprot.writeString(self.child)
      oprot.writeFieldEnd()
    if self.callCount is not None:
      oprot.writeFieldBegin('callCount', TType.I64, 4)
      oprot.writeI64(self.callCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.parent)
    value = (value * 31) ^ hash(self.child)
    value = (value * 31) ^ hash(self.callCount)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Dependencies(object):
  """
  Attributes:
   - start_ts: milliseconds from epoch
   - end_ts: milliseconds from epoch
   - links
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'start_ts', None, None, ), # 1
    (2, TType.I64, 'end_ts', None, None, ), # 2
    (3, TType.LIST, 'links', (TType.STRUCT,(DependencyLink, DependencyLink.thrift_spec)), None, ), # 3
  )

  def __init__(self, start_ts=None, end_ts=None, links=None,):
    self.start_ts = start_ts
    self.end_ts = end_ts
    self.links = links

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.start_ts = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.end_ts = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.links = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = DependencyLink()
            _elem5.read(iprot)
            self.links.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Dependencies')
    if self.start_ts is not None:
      oprot.writeFieldBegin('start_ts', TType.I64, 1)
      oprot.writeI64(self.start_ts)
      oprot.writeFieldEnd()
    if self.end_ts is not None:
      oprot.writeFieldBegin('end_ts', TType.I64, 2)
      oprot.writeI64(self.end_ts)
      oprot.writeFieldEnd()
    if self.links is not None:
      oprot.writeFieldBegin('links', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.links))
      for iter6 in self.links:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.start_ts)
    value = (value * 31) ^ hash(self.end_ts)
    value = (value * 31) ^ hash(self.links)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
