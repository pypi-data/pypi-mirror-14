import random

from pynetics import ga_list
from pynetics.ga_list import ListIndividualSpawningPool, \
    ListRecombination


class IntegerIndividualSpawningPool(ListIndividualSpawningPool):
    """ Defines the methods for creating integer individuals. """

    def __init__(self, size, lower, upper, fitness, diversity):
        """ Initializes this spawning pool for generating list individuals.

        :param size: The size of the individuals to be created from this
            spawning pool.
        :param lower: the lower bound of the integer set (included).
        :param upper: the upper bound of the integer set (included).
        :param fitness: The method to evaluate individuals. It's expected to be
            a callable that returns a float value where the higher the value,
            the better the individual. Instances of subclasses of class Fitness
            can be used for this purpose.
        :param diversity: The method to compute the diversity of a sequence of
            individuals generated by this SpawningPool instance. Is expected to
            be a function that generates a diversity representation given a
            subset of individuals. Instances of subclasses of class Diversity
            can be used for this purpose.
        """
        super().__init__(
            size=size,
            alleles=ga_list.FiniteSetAlleles(range(lower, upper + 1)),
            fitness=fitness,
            diversity=diversity,
        )
        self.lower = lower
        self.upper = upper


class IntegerRangeRecombination(ListRecombination):
    """ Offspring is obtained by crossing individuals gene by gene.

    For each gene, the interval of their values is calculated. Then, the
    difference of the interval is used for calculating the new interval from
    where to pick the values of the new genes. First, a value is taken from the
    new interval. Second, the other value is calculated by taking the
    symmetrical by the center of the range.
    """

    def __call__(self, parent1, parent2):
        """ Applies the crossover operator.

        :param parent1: One of the individuals from which generate the progeny.
        :param parent2: The other.
        :return: A list of individuals.
        """
        child1, child2 = super().__call__(parent1, parent2)

        i1_lower = parent1.population.spawning_pool.lower
        i1_upper = parent1.population.spawning_pool.upper
        i2_lower = parent2.population.spawning_pool.lower
        i2_upper = parent2.population.spawning_pool.upper

        for i, genes in enumerate(zip(parent1, parent2)):
            # For each gene, we calculate the the crossover interval. If the
            # genes are equal, we take the whole possible interval
            a, b = genes
            if a != b:
                diff = abs(a - b)
            else:
                diff = abs(min(i1_lower, i2_lower) - max(i1_upper, i2_upper))

            child1[i] = max(
                min(random.randint(a - diff, b + diff), i1_upper),
                i1_lower
            )
            child2[i] = max(
                min(a + b - child1[i], i2_upper),
                i2_lower
            )  # Just in case individuals generated by different spawning pools.
        return child1, child2
