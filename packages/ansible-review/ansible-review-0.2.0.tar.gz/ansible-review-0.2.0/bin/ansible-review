#!/usr/bin/env python

from __future__ import print_function
import optparse
import os
import sys
from ansiblereview.version import __version__
from ansiblereview import classify
from ansiblereview.utils import error, info
from appdirs import AppDirs
from fabric.api import env
from fabric.state import output
import ConfigParser

env.colorize_errors = True
output.warnings = False
output.running = False
env.warn_only = True


def main(args):

    parser = optparse.OptionParser("%prog playbook_file|role_file|inventory_file",
                                   version="%prog " + __version__)

    config_dir = AppDirs("ansible-review", "com.github.willthames").user_config_dir
    config_file = os.path.join(config_dir, "config.ini")
    config = ConfigParser.RawConfigParser({'standards': None, 'lint': None})
    config.read(config_file)
    rulesdir = config.get('rules', 'standards')
    lintdir = config.get('rules', 'lint')
    parser.add_option('-d', dest='rulesdir',
                      help="Location of standards rules: [%s]" % rulesdir,
                      default = rulesdir)
    parser.add_option('-r', dest='lintdir',
                      help="Location of additional lint rules: [%s]" % lintdir,
                      default=lintdir)
    parser.add_option('-R', dest='recurse', default=False,
                      help="Recurse into roles (good if you have control "
                      "over the role, less useful otherwise)")
    options, args = parser.parse_args(args)

    if len(args) == 0:
        parser.print_help(file=sys.stderr)
        info("\nUsing configuration file: %s" % config_file, file=sys.stderr)
        return 1

    errors = 0
    for arg in args:
        candidate = classify(arg)
        if candidate:
            errors = errors + candidate.review(options)
        else:
            error("Couldn't classify file %s" % arg)
    return errors


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
