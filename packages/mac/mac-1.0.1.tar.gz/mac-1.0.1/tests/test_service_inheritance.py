import os
import unittest

import mock
from argparse import ArgumentTypeError

from mock_data import *
import maccli.parser_cli
import maccli.dao.inheritance


class ServiceInheritanceTestCase(unittest.TestCase):

    def setUp(self):
        if os.path.exists(os.getcwd() + "/mock"):
            maccli.pwd = os.getcwd() + "/mock"
        else:
            maccli.pwd = os.getcwd() + "/tests/mock"

    def test_basic_inheritance(self):
        expected = OrderedDict([('mac', '1.0.0'), ('description', 'Scaled and Load-Balanced Application'), ('name', 'demo'), ('version', '1.0'), ('roles', OrderedDict([('app', OrderedDict([('instance create', OrderedDict([('bootstrap bash', 'sudo apt-get update\nsudo apt-get install nginx -y\n'), ('environment', [OrderedDict([('DB_IP', '127.0.0.1')]), OrderedDict([('APP_BRANCH', 'master')])])]))]))])), ('infrastructures', OrderedDict([('image_base_inf', OrderedDict([('name', 'app'), ('provider', 'amazon'), ('location', 'us-east-1'), ('hardware', 't1.micro'), ('role', 'app'), ('release', 'ubuntu'), ('amount', 1)])), ('build_lb_inf', OrderedDict([('resource', 'build_lb')])), ('create_image_inf', OrderedDict([('resource', 'create_image')])), ('create_launch_configuration_inf', OrderedDict([('resource', 'create_launch_configuration')])), ('create_autoscale_group_inf', OrderedDict([('resource', 'create_autoscale_group')]))])), ('actions', {'get_id': OrderedDict([('ssh', 'wget -q -O - http://169.254.169.254/latest/meta-data/instance-id')]), 'get_security_groups': OrderedDict([('ssh', 'wget -q -O - http://169.254.169.254/latest/meta-data/security-groups')]), 'get_availability_zone': OrderedDict([('ssh', 'wget -q -O - http://169.254.169.254/latest/meta-data/placement/availability-zone')])}), ('resources', {'build_lb': OrderedDict([('create bash', 'aws elb create-load-balancer --load-balancer-name my-load-balancer --listeners Protocol=HTTP,LoadBalancerPort=80,InstanceProtocol=HTTP,InstancePort=80 --region infrastructure.image_base_inf.location --availability-zones role.app.get_availability_zone')]), 'create_autoscale_group': OrderedDict([('create bash', 'aws autoscaling create-auto-scaling-group --auto-scaling-group-name my-lb-asg --launch-configuration-name my-lc --availability-zones role.app.get_availability_zone --load-balancer-names my-load-balancer --max-size 5 --min-size 1 --desired-capacity 2 --region infrastructure.image_base_inf.location')]), 'create_launch_configuration': OrderedDict([('create bash', 'aws autoscaling create-launch-configuration --launch-configuration-name my-lc --image-id resource.create_image_inf.json.ImageId --instance-type infrastructure.image_base_inf.hardware --security-groups role.app.get_security_groups --region infrastructure.image_base_inf.location')]), 'create_image': OrderedDict([('create bash', 'aws ec2 create-image --instance-id infrastructure.image_base_inf.get_id --name DemoApplication3 --description MyDemoApplication --region infrastructure.image_base_inf.location')])})])
        actual = maccli.dao.inheritance.resolve_inheritance(MOCK_BASIC_INHERITANCE)
        self.assertEquals(actual, expected)

    def test_single_inheritance(self):
        maccli.logging.basicConfig(level=maccli.logging.DEBUG)
        expected = OrderedDict([('mac', '1.0.0'), ('description', 'Scaled and Load-Balanced Application'), ('name', 'demo'), ('version', '1.0'), ('roles', OrderedDict([('app', OrderedDict([('instance create', OrderedDict([('bootstrap bash', 'sudo apt-get update\nsudo apt-get install nginx -y\n'), ('environment', [OrderedDict([('DB_IP', '127.0.0.1')]), OrderedDict([('APP_BRANCH', 'master')])])]))]))])), ('infrastructures', OrderedDict([('image_base_inf', OrderedDict([('name', 'app'), ('provider', 'amazon'), ('location', 'us-east-1'), ('hardware', 't1.micro'), ('role', 'app'), ('release', 'ubuntu'), ('amount', 1)])), ('create_image_inf', {'resource': 'create_image'}), ('build_lb_inf', OrderedDict([('resource', 'build_lb')])), ('create_launch_configuration_inf', OrderedDict([('resource', 'create_launch_configuration')])), ('create_autoscale_group_inf', OrderedDict([('resource', 'create_autoscale_group')]))])), ('actions', {'get_id': OrderedDict([('ssh', 'wget -q -O - http://169.254.169.254/latest/meta-data/instance-id')]), 'get_security_groups': OrderedDict([('ssh', 'wget -q -O - http://169.254.169.254/latest/meta-data/security-groups')]), 'get_availability_zone': OrderedDict([('ssh', 'wget -q -O - http://169.254.169.254/latest/meta-data/placement/availability-zone')])}), ('resources', {'build_lb': OrderedDict([('create bash', 'aws elb create-load-balancer --load-balancer-name my-load-balancer --listeners Protocol=HTTP,LoadBalancerPort=80,InstanceProtocol=HTTP,InstancePort=80 --region infrastructure.image_base_inf.location --availability-zones role.app.get_availability_zone')]), 'create_autoscale_group': OrderedDict([('create bash', 'aws autoscaling create-auto-scaling-group --auto-scaling-group-name my-lb-asg --launch-configuration-name my-lc --availability-zones role.app.get_availability_zone --load-balancer-names my-load-balancer --max-size 5 --min-size 1 --desired-capacity 2 --region infrastructure.image_base_inf.location')]), 'create_launch_configuration': OrderedDict([('create bash', 'aws autoscaling create-launch-configuration --launch-configuration-name my-lc --image-id resource.create_image_inf.json.ImageId --instance-type infrastructure.image_base_inf.hardware --security-groups role.app.get_security_groups --region infrastructure.image_base_inf.location')]), 'create_image': OrderedDict([('create bash', 'aws ec2 create-image --instance-id infrastructure.image_base_inf.get_id --name DemoApplication3 --description MyDemoApplication --region infrastructure.image_base_inf.location')])})])
        actual = maccli.dao.inheritance.resolve_inheritance(MOCK_SINGLE_INHERITANCE)
        self.assertEquals(actual, expected)

    def test_some_infrastructure_default_values(self):
        maccli.logging.basicConfig(level=maccli.logging.DEBUG)
        expected = OrderedDict([('mac', '1.0.0'), ('description', 'Scaled and Load-Balanced Application'), ('name', 'demo'), ('version', '1.0'), ('roles', OrderedDict([('app', OrderedDict([('instance create', OrderedDict([('bootstrap bash', 'sudo apt-get update\nsudo apt-get install nginx -y\n'), ('environment', [OrderedDict([('DB_IP', '127.0.0.1')]), OrderedDict([('APP_BRANCH', 'master')])])]))]))])), ('infrastructures', OrderedDict([('image_base_inf', OrderedDict([('location', 'us-east-1'), ('hardware', 't1.micro'), ('role', 'app'), ('release', 'ubuntu'), ('amount', 1), ('name', 'app'), ('provider', 'amazon')])), ('create_image_inf', {'resource': 'create_image'}), ('build_lb_inf', OrderedDict([('resource', 'build_lb')])), ('create_launch_configuration_inf', OrderedDict([('resource', 'create_launch_configuration')])), ('create_autoscale_group_inf', OrderedDict([('resource', 'create_autoscale_group')]))])), ('actions', {'get_id': OrderedDict([('ssh', 'wget -q -O - http://169.254.169.254/latest/meta-data/instance-id')]), 'get_security_groups': OrderedDict([('ssh', 'wget -q -O - http://169.254.169.254/latest/meta-data/security-groups')]), 'get_availability_zone': OrderedDict([('ssh', 'wget -q -O - http://169.254.169.254/latest/meta-data/placement/availability-zone')])}), ('resources', {'build_lb': OrderedDict([('create bash', 'aws elb create-load-balancer --load-balancer-name my-load-balancer --listeners Protocol=HTTP,LoadBalancerPort=80,InstanceProtocol=HTTP,InstancePort=80 --region infrastructure.image_base_inf.location --availability-zones role.app.get_availability_zone')]), 'create_autoscale_group': OrderedDict([('create bash', 'aws autoscaling create-auto-scaling-group --auto-scaling-group-name my-lb-asg --launch-configuration-name my-lc --availability-zones role.app.get_availability_zone --load-balancer-names my-load-balancer --max-size 5 --min-size 1 --desired-capacity 2 --region infrastructure.image_base_inf.location')]), 'create_launch_configuration': OrderedDict([('create bash', 'aws autoscaling create-launch-configuration --launch-configuration-name my-lc --image-id resource.create_image_inf.json.ImageId --instance-type infrastructure.image_base_inf.hardware --security-groups role.app.get_security_groups --region infrastructure.image_base_inf.location')]), 'create_image': OrderedDict([('create bash', 'aws ec2 create-image --instance-id infrastructure.image_base_inf.get_id --name DemoApplication3 --description MyDemoApplication --region infrastructure.image_base_inf.location')])})])
        actual = maccli.dao.inheritance.resolve_inheritance(MOCK_SOME_VALUES_INHERITANCE)
        self.assertEquals(actual, expected)

    def test_override_infrastructure_default_values(self):
        maccli.logging.basicConfig(level=maccli.logging.DEBUG)
        expected = OrderedDict([('mac', '1.0.0'), ('description', 'Scaled and Load-Balanced Application'), ('name', 'demo'), ('version', '1.0'), ('roles', OrderedDict([('app', OrderedDict([('instance create', OrderedDict([('bootstrap bash', 'sudo apt-get update\nsudo apt-get install nginx -y\n'), ('environment', [OrderedDict([('DB_IP', '127.0.0.1')]), OrderedDict([('APP_BRANCH', 'master')])])]))]))])), ('infrastructures', OrderedDict([('image_base_inf', OrderedDict([('name', 'override'), ('location', 'us-east-1'), ('hardware', 't1.micro'), ('role', 'app'), ('release', 'ubuntu'), ('amount', 1), ('provider', 'amazon')])), ('create_image_inf', {'resource': 'create_image'}), ('build_lb_inf', OrderedDict([('resource', 'build_lb')])), ('create_launch_configuration_inf', OrderedDict([('resource', 'create_launch_configuration')])), ('create_autoscale_group_inf', OrderedDict([('resource', 'create_autoscale_group')]))])), ('actions', {'get_id': OrderedDict([('ssh', 'wget -q -O - http://169.254.169.254/latest/meta-data/instance-id')]), 'get_security_groups': OrderedDict([('ssh', 'wget -q -O - http://169.254.169.254/latest/meta-data/security-groups')]), 'get_availability_zone': OrderedDict([('ssh', 'wget -q -O - http://169.254.169.254/latest/meta-data/placement/availability-zone')])}), ('resources', {'build_lb': OrderedDict([('create bash', 'aws elb create-load-balancer --load-balancer-name my-load-balancer --listeners Protocol=HTTP,LoadBalancerPort=80,InstanceProtocol=HTTP,InstancePort=80 --region infrastructure.image_base_inf.location --availability-zones role.app.get_availability_zone')]), 'create_autoscale_group': OrderedDict([('create bash', 'aws autoscaling create-auto-scaling-group --auto-scaling-group-name my-lb-asg --launch-configuration-name my-lc --availability-zones role.app.get_availability_zone --load-balancer-names my-load-balancer --max-size 5 --min-size 1 --desired-capacity 2 --region infrastructure.image_base_inf.location')]), 'create_launch_configuration': OrderedDict([('create bash', 'aws autoscaling create-launch-configuration --launch-configuration-name my-lc --image-id resource.create_image_inf.json.ImageId --instance-type infrastructure.image_base_inf.hardware --security-groups role.app.get_security_groups --region infrastructure.image_base_inf.location')]), 'create_image': OrderedDict([('create bash', 'aws ec2 create-image --instance-id infrastructure.image_base_inf.get_id --name DemoApplication3 --description MyDemoApplication --region infrastructure.image_base_inf.location')])})])
        actual = maccli.dao.inheritance.resolve_inheritance(MOCK_OVERRIDE_VALUES_INHERITANCE)
        self.assertEquals(actual, expected)

    def test_override_action(self):
        maccli.logging.basicConfig(level=maccli.logging.DEBUG)
        expected = OrderedDict([('mac', '1.0.0'), ('description', 'Scaled and Load-Balanced Application'), ('name', 'demo'), ('version', '1.0'), ('roles', OrderedDict([('app', OrderedDict([('instance create', OrderedDict([('bootstrap bash', 'sudo apt-get update\nsudo apt-get install nginx -y\n'), ('environment', [OrderedDict([('DB_IP', '127.0.0.1')]), OrderedDict([('APP_BRANCH', 'master')])])]))]))])), ('actions', OrderedDict([('get_id', OrderedDict([('ssh', 'overrided action')])), ('get_availability_zone', OrderedDict([('ssh', 'wget -q -O - http://169.254.169.254/latest/meta-data/placement/availability-zone')])), ('get_security_groups', OrderedDict([('ssh', 'wget -q -O - http://169.254.169.254/latest/meta-data/security-groups')]))])), ('infrastructures', OrderedDict([('image_base_inf', OrderedDict([('name', 'override'), ('location', 'us-east-1'), ('hardware', 't1.micro'), ('role', 'app'), ('release', 'ubuntu'), ('amount', 1), ('provider', 'amazon')])), ('create_image_inf', {'resource': 'create_image'}), ('build_lb_inf', OrderedDict([('resource', 'build_lb')])), ('create_launch_configuration_inf', OrderedDict([('resource', 'create_launch_configuration')])), ('create_autoscale_group_inf', OrderedDict([('resource', 'create_autoscale_group')]))])), ('resources', {'build_lb': OrderedDict([('create bash', 'aws elb create-load-balancer --load-balancer-name my-load-balancer --listeners Protocol=HTTP,LoadBalancerPort=80,InstanceProtocol=HTTP,InstancePort=80 --region infrastructure.image_base_inf.location --availability-zones role.app.get_availability_zone')]), 'create_autoscale_group': OrderedDict([('create bash', 'aws autoscaling create-auto-scaling-group --auto-scaling-group-name my-lb-asg --launch-configuration-name my-lc --availability-zones role.app.get_availability_zone --load-balancer-names my-load-balancer --max-size 5 --min-size 1 --desired-capacity 2 --region infrastructure.image_base_inf.location')]), 'create_launch_configuration': OrderedDict([('create bash', 'aws autoscaling create-launch-configuration --launch-configuration-name my-lc --image-id resource.create_image_inf.json.ImageId --instance-type infrastructure.image_base_inf.hardware --security-groups role.app.get_security_groups --region infrastructure.image_base_inf.location')]), 'create_image': OrderedDict([('create bash', 'aws ec2 create-image --instance-id infrastructure.image_base_inf.get_id --name DemoApplication3 --description MyDemoApplication --region infrastructure.image_base_inf.location')])})])
        actual = maccli.dao.inheritance.resolve_inheritance(MOCK_OVERRIDE_ACTION)
        self.assertEquals(actual, expected)

    def test_override_resource(self):
        maccli.logging.basicConfig(level=maccli.logging.DEBUG)
        expected = OrderedDict([('mac', '1.0.0'), ('description', 'Scaled and Load-Balanced Application'), ('name', 'demo'), ('version', '1.0'), ('roles', OrderedDict([('app', OrderedDict([('instance create', OrderedDict([('bootstrap bash', 'sudo apt-get update\nsudo apt-get install nginx -y\n'), ('environment', [OrderedDict([('DB_IP', '127.0.0.1')]), OrderedDict([('APP_BRANCH', 'master')])])]))]))])), ('resources', OrderedDict([('build_lb', OrderedDict([('create bash', 'overrided resource')])), ('create_image', OrderedDict([('create bash', 'aws ec2 create-image --instance-id infrastructure.image_base_inf.get_id --name DemoApplication3 --description MyDemoApplication --region infrastructure.image_base_inf.location')])), ('create_launch_configuration', OrderedDict([('create bash', 'aws autoscaling create-launch-configuration --launch-configuration-name my-lc --image-id resource.create_image_inf.json.ImageId --instance-type infrastructure.image_base_inf.hardware --security-groups role.app.get_security_groups --region infrastructure.image_base_inf.location')])), ('create_autoscale_group', OrderedDict([('create bash', 'aws autoscaling create-auto-scaling-group --auto-scaling-group-name my-lb-asg --launch-configuration-name my-lc --availability-zones role.app.get_availability_zone --load-balancer-names my-load-balancer --max-size 5 --min-size 1 --desired-capacity 2 --region infrastructure.image_base_inf.location')]))])), ('infrastructures', OrderedDict([('image_base_inf', OrderedDict([('name', 'override'), ('location', 'us-east-1'), ('hardware', 't1.micro'), ('role', 'app'), ('release', 'ubuntu'), ('amount', 1), ('provider', 'amazon')])), ('create_image_inf', {'resource': 'create_image'}), ('build_lb_inf', OrderedDict([('resource', 'build_lb')])), ('create_launch_configuration_inf', OrderedDict([('resource', 'create_launch_configuration')])), ('create_autoscale_group_inf', OrderedDict([('resource', 'create_autoscale_group')]))])), ('actions', {'get_id': OrderedDict([('ssh', 'wget -q -O - http://169.254.169.254/latest/meta-data/instance-id')]), 'get_security_groups': OrderedDict([('ssh', 'wget -q -O - http://169.254.169.254/latest/meta-data/security-groups')]), 'get_availability_zone': OrderedDict([('ssh', 'wget -q -O - http://169.254.169.254/latest/meta-data/placement/availability-zone')])})])
        actual = maccli.dao.inheritance.resolve_inheritance(MOCK_OVERRIDE_RESOURCE)
        self.assertEquals(actual, expected)

