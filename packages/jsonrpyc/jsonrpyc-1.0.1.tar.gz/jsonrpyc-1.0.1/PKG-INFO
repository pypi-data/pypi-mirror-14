Metadata-Version: 1.1
Name: jsonrpyc
Version: 1.0.1
Summary: Minimal python RPC implementation in a single file based on the JSON-RPC 2.0 specs from
http://www.jsonrpc.org/specification.
Home-page: https://github.com/riga/jsonrpyc
Author: Marcel Rieger
Author-email: UNKNOWN
License: MIT
Description: |Build Status| |Documentation Status|
        
        Minimal python RPC implementation in a single file based on the
        `JSON-RPC 2.0 specs <http://www.jsonrpc.org/specification>`__.
        
        Usage
        -----
        
        ``jsonrpyc.RPC`` instances basically wrap an input stream and an output
        stream in order to communicate with other *services*. A service is not
        even forced to be written in Python as long as it strictly implements
        the JSON-RPC 2.0 specs. A suitable implementation for NodeJs is
        `node-json-rpc <https://github.com/riga/node-json-rpc>`__. A
        ``jsonrpyc.RPC`` instance may wrap a *target* object. Incomming requests
        will be routed to methods of this object whose result might be sent back
        as a response. Example implementation:
        
        ``server.py``
        '''''''''''''
        
        .. code:: python
        
            import jsonrpyc
        
            class MyTarget(object):
        
                def greet(self, name):
                return "Hi, %s!" % name
        
            jsonrpc.RPC(MyTarget())
        
        ``async_client.py``
        '''''''''''''''''''
        
        .. code:: python
        
            import jsonrpyc
            from subprocess import Popen, PIPE
        
            p = Popen(["python", "server.py"], stdin=PIPE, stdout=PIPE)
            rpc = jsonrpyc.RPC(stdout=p.stdin, stdin=p.stdout)
        
            def cb(err, res=None):
                if err:
                    throw err
                print("callback got: " + res)
            rpc("greet", args=("John",))
            # cb is called asynchronously which prints
            # => "callback got: Hi, John!"
        
        ``sync_client.py``
        ''''''''''''''''''
        
        .. code:: python
        
            import jsonrpyc
            from subprocess import Popen, PIPE
        
            p = Popen(["python", "server.py"], stdin=PIPE, stdout=PIPE)
            rpc = jsonrpyc.RPC(stdout=p.stdin, stdin=p.stdout)
        
            print(rpc("greet", args=("John",), block=0.1))
            # => "Hi, John!"
        
        Installation and dependencies
        -----------------------------
        
        Via `pip <https://pypi.python.org/pypi/jsonrpyc>`__
        
        .. code:: bash
        
            pip install jsonrpyc
        
        or by simply copying the file into your project.
        
        Contributing
        ------------
        
        If you like to contribute to jsonrpyc, I'm happy to receive pull
        requests. Just make sure to add a new test cases and run them via:
        
        .. code:: bash
        
            > python -m unittest tests
        
        Development
        -----------
        
        -  Source hosted at `GitHub <https://github.com/riga/jsonrpyc>`__
        -  Report issues, questions, feature requests on `GitHub
           Issues <https://github.com/riga/jsonrpyc/issues>`__
        
        Authors
        -------
        
        -  `Marcel R. <https://github.com/riga>`__
        
        License
        -------
        
        The MIT License (MIT)
        
        Copyright (c) 2016 Marcel R.
        
        Permission is hereby granted, free of charge, to any person obtaining a
        copy of this software and associated documentation files (the
        "Software"), to deal in the Software without restriction, including
        without limitation the rights to use, copy, modify, merge, publish,
        distribute, sublicense, and/or sell copies of the Software, and to
        permit persons to whom the Software is furnished to do so, subject to
        the following conditions:
        
        The above copyright notice and this permission notice shall be included
        in all copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
        IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
        CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
        TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
        SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        
        .. |Build Status| image:: https://travis-ci.org/riga/jsonrpyc.svg?branch=master
           :target: https://travis-ci.org/riga/jsonrpyc
        .. |Documentation Status| image:: https://readthedocs.org/projects/jsonrpyc/badge/?version=latest
           :target: http://jsonrpyc.readthedocs.org/en/latest/?badge=latest
        
Keywords: rpc,json,json-rpc,2.0
Platform: UNKNOWN
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 3
Classifier: Development Status :: 4 - Beta
Classifier: Operating System :: OS Independent
Classifier: License :: OSI Approved :: MIT License
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: Information Technology
