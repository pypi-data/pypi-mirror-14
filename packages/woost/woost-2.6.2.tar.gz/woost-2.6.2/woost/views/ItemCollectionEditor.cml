<?xml version="1.0" encoding="utf-8"?>
<?py
from cocktail.iteration import first
from cocktail.html.selectable import selectable, MULTIPLE_SELECTION
from cocktail.html.uigeneration import UIGenerator
from cocktail.controllers import context
from woost.models import get_current_user, CreatePermission
from woost.views.uigeneration import backoffice_element_column_display
from woost.controllers.backoffice.useractions import export_user_actions
?>

<div
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:py="http://www.whads.com/ns/cocktail/templates"
    py:mixins="UIGenerator">

    <?py-class
    value = ()
    base_ui_generators = [backoffice_element_column_display]
    referer = None
    grouping = None

    def content_type_is_instantiable(self, content_type):
        return (
            (
                self._hidden_content_types is None
                or content_type not in self._hidden_content_types
            )
            and content_type.visible
            and content_type.instantiable
            and self._user.has_permission(
                CreatePermission,
                target = content_type
            )
        )

    def get_new_content_uri(self, content_type):

        params = {
            "item_type": content_type.full_name,
            "edit_stack": self._edit_stack.to_param() if self._edit_stack else None
        }

        if self.member:
            params["member"] = self.member.name

        return self._cms.contextual_uri('content', 'new', **params)
    ?>

    <?py
    selectable(
        self,
        mode = MULTIPLE_SELECTION,
        entry_selector = ".entries .entry"
    )

    self.add_resource("/cocktail/scripts/jquery-ui.js")
    self.add_resource("/resources/scripts/ItemCollectionEditor.js")
    ?>

    <py:ready>
        <?py
        self._cms = context["cms"]
        self._edit_stack = context["edit_stacks_manager"].current_edit_stack
        self._user = get_current_user()
        role = self._user.roles and self._user.roles[0]
        self._hidden_content_types = role and getattr(role, "hidden_content_types", None)

        self._instantiable_content_types = set(
            content_type
            for content_type in self.member.related_type.schema_tree()
            if self.content_type_is_instantiable(content_type)
        )

        if self.grouping:
            if isinstance(self.grouping, type):
                self.grouping = self.grouping()
            if self.value:
                self.grouping.populate(self.value)

        element["data-cocktail-grouped"] = "true" if self.grouping else "false"
        ?>
    </py:ready>

    <!-- Toolbar -->
    <py:woost.views.ActionBar
        py:id="toolbar"
        py:action_target="@{self.member.related_type}"
        py:action_parameter="@{'relation_action-' + self.member.name}"
        py:empty_result_set="@{not self.value}">
        <py:binding>
            <?py
            element.action_context.add("toolbar")
            element.action_context.add("collection")
            if self.member.integral:
                element.action_context.add("integral")
            ?>
        </py:binding>
        <?py
        @extend(toolbar)
        def get_actions(toolbar, context):
            actions = call_base(context)
            if not self._instantiable_content_types:
                actions = [action for action in actions if action.id not in ("new", "add_integral")]
            return actions

        @extend(toolbar)
        def create_action_button(toolbar, action, extra, action_context):
            if action.id in ("new", "add_integral"):
                if len(self._instantiable_content_types) > 1:
                    button = self.create_new_toolbar_button(action, extra)
                    button["data-woost-action"] = action.id
                else:
                    button = call_base(action, extra, action_context)
                    button.tag = "a"
                    del button["name"]
                    button["href"] = self.get_new_content_uri(list(self._instantiable_content_types)[0])
            else:
                button = call_base(action, extra, action_context)

            button.set_client_param("minSelection", action.min)
            button.set_client_param("maxSelection", action.max)
            button.set_client_param("ignoresSelection", action.ignores_selection)
            return button
        ?>
    </py:woost.views.ActionBar>

    <py:cocktail.html.DropdownPanel py:def="new_toolbar_button"
        py:args="action, extra">
        <?py
        element.add_class("action_button")
        element.add_class("action_new")
        element.add_class("action_add_integral")
        ?>
        <py:with py:element="element.label">
            <py:new
                py:element="self.toolbar.create_action_image(action, extra)"
                py:if="self.toolbar.button_images and not extra"/>
            ${translations("woost.actions." + action.id)}
        </py:with>
        <py:with py:element="element.panel">
            <py:woost.views.ContentTypeTree
                py:id="new_item_selector"
                py:root="@{self.member.related_type}">

                <?py
                @refine(element)
                def filter_item(new_item_selector, content_type):
                    return content_type in self._instantiable_content_types

                @refine(element)
                def get_item_url(new_item_selector, content_type):
                    return self.get_new_content_uri(content_type)
                ?>
            </py:woost.views.ContentTypeTree>
        </py:with>
    </py:cocktail.html.DropdownPanel>

    <ul py:id="entries">
        <py:ready>
            <?py
            if self.grouping:
                for grouping in self.grouping.groups:
                    element.append(self.create_group(grouping))
                for item in self.grouping.items:
                    element.append(self.create_entry(item))
            else:
                for item in self.value:
                    element.append(self.create_entry(item))
            ?>
        </py:ready>
    </ul>

    <li py:def="group" py:args="grouping">
        <py:new py:element="self.create_group_heading(grouping)"/>
        <py:new py:element="self.create_group_entries(grouping)"/>
    </li>

    <div py:def="group_heading" py:args="grouping">
        <span py:local_id="group_heading_text">
            ${translations(grouping)}
        </span>
    </div>

    <ul py:def="group_entries" py:args="grouping">
        <py:new py:element="self.create_group(child)" py:for="child in grouping.groups"/>
        <py:new py:element="self.create_entry(item)" py:for="item in grouping.items"/>
    </ul>

    <li py:def="entry" py:args="item">

        <?py
        export_user_actions(element, self.toolbar.action_context, item)
        ?>

        <input
            py:local_id="hidden"
            type="hidden"
            name="${self.name}"
            value="${item.id}"/>

        <input
            py:local_id="checkbox"
            type="checkbox"
            name="relation_selection-${self.member.name}"
            value="${item.id}"/>

        <span py:local_id="checkbox_wrapper" py:wrap="entry.checkbox"/>

        <py:new
            py:local_id="item_display"
            py:element="self.create_item_display(item)">
            <?py
            label_element = getattr(element, "item_label", element)
            label_element.tag = "label"
            label_element["for"] = entry.checkbox.require_id()
            ?>
        </py:new>

        <py:new
            py:local_id="context_menu"
            py:element="self.create_item_context_menu(item)"/>
    </li>

    <py:new
        py:def="item_display" py:args="item"
        py:element="self.create_object_display(item, referer = self.referer)"
        py:item="${item}"/>

    <py:woost.views.ItemContextMenu
        py:def="item_context_menu" py:args="item"
        py:item="${item}"
        py:effect_on_selection="change"/>

    <?py
    self.toolbar.connect_selectable(self)
    ?>

</div>

