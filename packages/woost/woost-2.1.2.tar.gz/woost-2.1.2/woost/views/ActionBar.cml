<?xml version="1.0" encoding="utf-8"?>

<?py
from itertools import chain
from cocktail.controllers import context
from woost.controllers.backoffice.useractions import (
    get_view_actions, get_view_actions_context, add_view_action_context
)
?>

<div
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:py="http://www.whads.com/ns/cocktail/templates">

    <?py-class
    action_context = None
    action_target = None
    action_parameter = "action"
    button_images = True
    hide_when_empty = True
    group_additional_actions = True
    min_frequent_actions = 1
    min_additional_actions = 2
    empty_result_set = False

    def get_actions(self, context):
        return [
            action
            for action in get_view_actions(context, self.action_target)
            if not self.empty_result_set
            or not action.min
            or action.ignores_selection
        ]

    def create_action_button(self, action, extra):

        panel = action.get_dropdown_panel(self.action_target)

        if panel:
            action_button = loader.new("cocktail.html.DropdownPanel")
            label = action_button.label
            action_button.panel.append(panel)
        else:
            action_button = label = Element()

            if action.direct_link:
                action_button.tag = "a"
                action_button["href"] = action.get_url(context["cms"], None)
                action_button["target"] = action.link_target
            else:
                action_button.tag = "button"
                action_button["type"] = "submit"
                action_button["name"] = self.action_parameter
                action_button["value"] = action.id
                action_button["formtarget"] = action.link_target

        action_button.add_class("action_button")
        action_button.add_class(action.id + "_action")

        if self.button_images and not extra:
            action_button.action_image = self.create_action_image(action, extra)
            label.append(action_button.action_image)

        label.append(translations(action))
        label["accesskey"] = translations("woost.actions." + action.id + ".shortcut")
        return action_button
    ?>

    <?py
    self.add_resource("/resources/scripts/ActionBar.js")
    ?>

    <img
        py:def="action_image"
        py:args="action, extra"
        src="${action.icon_uri}"/>

    <div py:def="additional_actions_selector" class="selector">
        <span class="label">${translations("woost.views.ActionBar Additional actions")}</span>
        <div py:id="additional_actions_box" class="selector_content"/>
    </div>

    <py:ready>
        <?py
        if not self.action_context:
            raise ValueError("woost.views.ActionBar needs an action_context attribute")

        if not self.action_target:
            raise ValueError("woost.views.ActionBar needs an action_target attribute")

        if self.empty_result_set:
            add_view_action_context(self, "empty_set")

        context = get_view_actions_context(self)
        actions = self.get_actions(context | set([self.action_context]))
        additional_actions = self.get_actions(context | set([self.action_context + "_extra"]))

        groupped = self.group_additional_actions

        # Avoid superflous groupping of additional actions
        if groupped:
            if self.min_frequent_actions:
                if len(actions) < self.min_frequent_actions:
                    groupped = False

            if self.min_additional_actions:
                if len(additional_actions) < self.min_additional_actions:
                    groupped = False

        if not groupped:
            actions = chain(actions, additional_actions)

        has_actions = False

        # Frequent actions
        for action in actions:
            action_button = self.create_action_button(action, False)
            self.append(action_button)
            has_actions = True

        # Additional actions dropdown
        if groupped:
            selector = self.create_additional_actions_selector()
            self.append(selector)

            for action in additional_actions:
                action_button = self.create_action_button(action, True)
                self.additional_actions_box.append(action_button)
                has_actions = True

        # Automatically hide an empty toolbar
        if self.hide_when_empty and not has_actions:
            self.visible = False
        ?>
    </py:ready>
</div>
