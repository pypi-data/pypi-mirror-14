#!/usr/bin/env python
#
# Hey Emacs, this is -*-python-*-
#
# Copyright 2013-2014 Peter Liljenberg <peter.liljenberg@gmail.com>
#
# Distributed under an MIT license, please see LICENSE in the top dir.

import sys
import os
import argparse
import threading


from codplayer import db, player, config, sink
from codplayer import command
from codplayer import zerohub
from codplayer import full_version
from codplayer import codaemon

def main(args):
    try:
        cfg = config.PlayerConfig(args.config)
        mq_cfg = config.MQConfig(os.path.join(os.path.dirname(cfg.config_path),
                                              cfg.codmq_conf_path))
        database = db.Database(cfg.database)

        if cfg.audio_device_type not in sink.SINKS:
            sys.exit('unknown audio device type: {0}'.format(cfg.audio_device_type))

    except config.ConfigError, e:
        sys.exit('invalid configuration:\n{0}'.format(e))

    except db.DatabaseError, e:
        sys.exit('error opening database:\n{0}'.format(e))

    if args.debug:
        if cfg.plugins:
            cfg.plugins.append(StdinCli())
        else:
            cfg.plugins = [StdinCli()]

    # All set, kick off the player
    player.Player(cfg, mq_cfg, database, debug = args.debug)


class StdinCli(codaemon.Plugin):
    def setup_prefork(self, player, cfg, mq_cfg):
        self._sender = zerohub.AsyncSender(mq_cfg.player_commands,
                                           name = 'stdin_cli', io_loop = player.io_loop)

    def setup_postfork(self):
        t = threading.Thread(target = self._loop, name = 'stdin_cli')
        t.daemon = True
        t.start()

    def _loop(self):
        reader = command.CommandReader()
        while True:
            data = os.read(0, 500)
            for cmd_args in reader.handle_data(data):
                self._sender.send_multipart(cmd_args)

#
# Set up the command argument parsing
#

parser = argparse.ArgumentParser(description = 'codplayer daemon')
parser.add_argument('-c', '--config', help = 'alternative configuration file')
parser.add_argument('-d', '--debug', action = 'store_true',
                    help = 'run in debug mode instead of deamon')
parser.add_argument('--version', action = 'version', version = full_version())

if __name__ == '__main__':
    args = parser.parse_args()
    main(args)
