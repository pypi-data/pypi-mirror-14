/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
object {

    linsolve: fun(a, b) {
        let foraMatrixA = self.toMatrix(a.values, a.shape)
        let foraMatrixB = self.toMatrix(b.values, b.shape)
        let res = 
            try {
                math.Matrix.linsolv(foraMatrixA, foraMatrixB)
                }
            catch (e) {
                throw ValueError(PyString(String(e)))
                }
            ;
        return serializeMatrix(res)
        };
    
    pInv: fun(matrixRowMajorFlat, matrixShape) {
        let matrix = self.toMatrix(matrixRowMajorFlat, matrixShape);
        let result = matrix.pinv();
        return self.serializeMatrix(result);
        };

    serializeMatrix: fun(matrix) {
        let data = matrix.rowMajorData().apply(fun(r) { PyFloat(r) });
        let shape = PyTuple(
            (PyInt(matrix.dim[0]), PyInt(matrix.dim[1]))
            )

        let values = PyList(data);
        let valuesAndShape = PyTuple((values, shape))
        return valuesAndShape;
        };

    toMatrix: fun(rowMajorFlat, shape) {
        let values = [val.@m for val in rowMajorFlat];
        let matrix = builtin.math.Matrix(values, (shape[0].@m, shape[1].@m), `row);
        return matrix;
        };

    matrixMult: fun(arr1Vals, arr1Shape, arr2Vals, arr2Shape) {
        let m1 = self.toMatrix(arr1Vals, arr1Shape);
        let m2 = self.toMatrix(arr2Vals, arr2Shape);
        let result = m1 * m2;
        return self.serializeMatrix(result);
        };

    svd: fun(a) {
        let foraMatrix = self.toMatrix(a.values, a.shape);

        let (singularValues, UData, VTData) = 
            try {
                self._svd(foraMatrix.columnMajorData(), foraMatrix.dim)
                }
            catch (e) {
                throw ValueError(PyString(String(e)))
                }

        let (m,n) = foraMatrix.dim

        let pureNumpyUValuesAndShape =
            self.serializeMatrix(
                math.Matrix(UData, (m, m))
                )

        let pureNumpySigmaValues =
            self.serializeMatrix(
                math.Matrix(singularValues, (m,1))
                )[0];
        let pureNumpyVtValuesAndShape =
            self.serializeMatrix(
                math.Matrix(VTData, (n, n))
                )

        return PyTuple(
            (
                pureNumpyUValuesAndShape,
                pureNumpySigmaValues,
                pureNumpyVtValuesAndShape
                )
            );
        };

    _svd: fun(columnMajorValues, shape) {
        let (m, n) = shape;
        
        let (singularValues, UData, VTData) =
            math.blasWrappers.gesvd('A', 'A', m, n, columnMajorValues)

        return (singularValues, UData, VTData)
        };

    };
