/***************************************************************************
    Copyright 2015 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/

"""The singleton object representing python's 'int' type."""
object {
    __bases__: PyTuple((Object,));
    
    __str__: PyBoundMethod(self, fun(self) { PyString("<type 'int'>") }, `__str__);

    __call__: PyBoundMethod(self, fun
            (self, PyFloat(...) other) { PyInt(Int64(other.@m)) }
            (self, PyInt(...) other) { other }
            (self, PyBool(...) other) { PyInt(if (other.@m) 1 else 0) }
            (self, PyString(...) other) {
                try { return PyInt(Int64(other.@m)) }
                catch(...) { throw ValueError(PyString("could not convert string to int: " + other.@m))}
                }
            (self, other) { 
                let flt = 
                    try { other.__int__ } 
                    catch(AttributeError(...)) { throw TypeError(PyString("int() argument must be a string or number")) };

                match (flt()) with
                    (PyInt(...) res) { return res }
                    (...) { throw TypeError(PyString("__int__ returned non-int")) }
                },
            `__call__
            );

    mixin Type;
    };
