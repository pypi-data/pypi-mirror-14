/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
class {
    member @m;
    
    ...(`Member, `@m) { @m };

    __str__: PyBoundMethod(self, fun(self) {
        PyString(String(self.@m))
        }, `__str__);

    __class__: FloatType;

    operator match(PyFloat _) { (self,) };

    __nonzero__: PyBoundMethod(self, fun(self) {
        PyBool(self.@m is not 0.0)
        }, `__nonzero__);

    //Arithmetic operators
    __add__: PyBoundMethod(self, fun(self, PyFloat(other)) {
        PyFloat(self.@m + other.@m)
        }
        (self, PyInt(other)) {
        PyFloat(self.@m + other.@m)
        }, `__add__);

    __sub__: PyBoundMethod(self, fun(self, PyFloat(other)) {
        PyFloat(self.@m - other.@m)
        }
        (self, PyInt(other)) {
        PyFloat(self.@m - other.@m)
        }, `__sub__);

    __mul__: PyBoundMethod(self, fun(self, PyFloat(other)) {
        PyFloat(self.@m * other.@m)
        }
        (self, PyInt(other)) {
        PyFloat(self.@m * other.@m)
        }, `__mul__);

    __div__: PyBoundMethod(self, fun(self, PyInt(other)) {
        if (other.@m == 0) {
            throw ZeroDivisionError(PyString("float division or modulo by zero"))
        }
        PyFloat(self.@m / other.@m)
        }
        (self, PyFloat(other)) {
        if (other.@m == 0.0) {
            throw ZeroDivisionError(PyString("float division or modulo by zero"))
        }
        PyFloat(self.@m / other.@m)
        }, `__div__);

    __neg__: PyBoundMethod(self, fun(self) { PyFloat(-self.@m) }, `__neg__);

    __pos__: PyBoundMethod(self, fun(self) { return self }, `__pos__);

    __pow__: PyBoundMethod(self, fun(self, PyFloat(other)) {
        if (self.@m < 0 and (other.@m != math.floor(other.@m))) 
            {
            throw ValueError(PyString("Negative number cannot be raised to a fractional power"))
            }
        PyFloat(self.@m ** other.@m)
        }
        (self, PyInt(other)) {
        PyFloat(self.@m ** other.@m)
        }, 
        `__pow__);

    //Comparison operators
    __lt__: PyBoundMethod(self, fun(self, PyFloat(other)) {
        PyBool(self.@m < other.@m)
        }
        (self, PyInt(other)) {
        PyBool(self.@m < other.@m)
        }
        (self, PyNone(other)) {
        PyBool(false)
        }
        (self, PyString(other)) {
        PyBool(true)
        }
        (self, PyList(other)) {
        PyBool(true)
        }
        (self, PyBool(other)) {
            if (self.@m >= 1)
                return PyBool(false)
            if (other.@m == true)
                return PyBool(self.@m < 1)
            else
                return PyBool(self.@m < 0)
        }, `__lt__);

    __abs__: PyBoundMethod(self, fun(self) {
        if (self.@m >= 0)
            return PyFloat(self.@m)
        else
            return PyFloat(self.@m * -1)
        }, `__abs__);

    __gt__: PyBoundMethod(self, fun(self, PyFloat(other)) {
        PyBool(self.@m > other.@m)
        }
        (self, PyInt(other)) {
        PyBool(self.@m > other.@m)
        }
        (self, PyNone(other)) {
        PyBool(true)
        }
        (self, PyString(other)) {
        PyBool(false)
        }
        (self, PyList(other)) {
        PyBool(false)
        }
        (self, PyBool(other)) {
            if (self.@m > 1)
                return PyBool(true)
            if (other.@m == true)
                return PyBool(self.@m > 1)
            else
                return PyBool(self.@m > 0)
        }, `__gt__);

    //Equality operators
    __eq__: PyBoundMethod(self, fun(self, PyFloat(other)) {
        PyBool(self.@m == other.@m)
        }
        (self, PyInt(other)) {
        PyBool(self.@m == other.@m)
        }
        (self, PyBool(other)) {
        if (self.@m == 1 and other.@m == true)
           return PyBool(true)
        if (self.@m == 0 and not other.@m)
           return PyBool(true)
        PyBool(false)
        }
        (self, _) {
        PyBool(false)
        }, `__eq__);

    __ne__: PyBoundMethod(self, fun(self, PyFloat(other)) {
        PyBool(self.@m != other.@m)
        }
        (self, PyInt(other)) {
        PyBool(self.@m != other.@m)
        }
        (self, _) {
        PyBool(true)
        }, `__ne__);

    
    mixin PyObjectBase;
    };

