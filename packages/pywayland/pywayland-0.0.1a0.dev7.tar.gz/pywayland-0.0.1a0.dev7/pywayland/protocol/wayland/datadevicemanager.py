# -*- coding: utf-8 -*-
# This file has been autogenerated by the pywayland scanner

# Copyright © 2008-2011 Kristian Høgsberg
# Copyright © 2010-2011 Intel Corporation
# Copyright © 2012-2013 Collabora, Ltd.
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice (including the
# next paragraph) shall be included in all copies or substantial
# portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from pywayland.interface import Interface
from .datadevice import DataDevice
from .datasource import DataSource
from .seat import Seat

import enum


class DataDeviceManager(Interface):
    """Data transfer interface

    The :class:`DataDeviceManager` is a singleton global object that provides
    access to inter-client data transfer mechanisms such as copy-and-paste and
    drag-and-drop.  These mechanisms are tied to a
    :class:`~pywayland.protocol.wayland.seat.Seat` and this interface lets a
    client get a :class:`~pywayland.protocol.wayland.datadevice.DataDevice`
    corresponding to a :class:`~pywayland.protocol.wayland.seat.Seat`.

    Depending on the version bound, the objects created from the bound
    :class:`DataDeviceManager` object will have different requirements for
    functioning properly. See :func:`DataSource.set_actions()
    <pywayland.protocol.wayland.datasource.DataSource.set_actions>`,
    :func:`DataOffer.accept()
    <pywayland.protocol.wayland.dataoffer.DataOffer.accept>` and
    :func:`DataOffer.finish()
    <pywayland.protocol.wayland.dataoffer.DataOffer.finish>` for details.
    """
    name = "wl_data_device_manager"
    version = 3

    dnd_action = enum.Enum("dnd_action", {
        "none": 0,
        "copy": 1,
        "move": 2,
        "ask": 4,
    })


@DataDeviceManager.request("n", [DataSource])
def create_data_source(self):
    """Create a new data source

    Create a new data source.

    :returns: :class:`~pywayland.protocol.wayland.datasource.DataSource`
    """
    id = self._marshal_constructor(0, DataSource)
    return id


@DataDeviceManager.request("no", [DataDevice, Seat])
def get_data_device(self, seat):
    """Create a new data device

    Create a new data device for a given seat.

    :param seat:
    :type seat: :class:`~pywayland.protocol.wayland.seat.Seat`
    :returns: :class:`~pywayland.protocol.wayland.datadevice.DataDevice`
    """
    id = self._marshal_constructor(1, DataDevice, seat)
    return id


DataDeviceManager._gen_c()
