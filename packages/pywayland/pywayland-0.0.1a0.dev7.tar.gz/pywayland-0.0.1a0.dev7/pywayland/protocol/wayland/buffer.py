# -*- coding: utf-8 -*-
# This file has been autogenerated by the pywayland scanner

# Copyright © 2008-2011 Kristian Høgsberg
# Copyright © 2010-2011 Intel Corporation
# Copyright © 2012-2013 Collabora, Ltd.
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice (including the
# next paragraph) shall be included in all copies or substantial
# portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from pywayland.interface import Interface


class Buffer(Interface):
    """Content for a :class:`~pywayland.protocol.wayland.surface.Surface`

    A buffer provides the content for a
    :class:`~pywayland.protocol.wayland.surface.Surface`. Buffers are created
    through factory interfaces such as
    :class:`~pywayland.protocol.wayland.drm.Drm`,
    :class:`~pywayland.protocol.wayland.shm.Shm` or similar. It has a width and
    a height and can be attached to a
    :class:`~pywayland.protocol.wayland.surface.Surface`, but the mechanism by
    which a client provides and updates the contents is defined by the buffer
    factory interface.
    """
    name = "wl_buffer"
    version = 1


@Buffer.request("", [])
def destroy(self):
    """Destroy a buffer

    Destroy a buffer. If and how you need to release the backing storage is
    defined by the buffer factory interface.

    For possible side-effects to a surface, see :func:`Surface.attach()
    <pywayland.protocol.wayland.surface.Surface.attach>`.
    """
    self._marshal(0)
    self._destroy()


@Buffer.event("", [])
def release(self):
    """Compositor releases buffer

    Sent when this :class:`Buffer` is no longer used by the compositor. The
    client is now free to re-use or destroy this buffer and its backing
    storage.

    If a client receives a release event before the frame callback requested in
    the same :func:`Surface.commit()
    <pywayland.protocol.wayland.surface.Surface.commit>` that attaches this
    :class:`Buffer` to a surface, then the client is immediately free to re-use
    the buffer and its backing storage, and does not need a second buffer for
    the next surface content update. Typically this is possible, when the
    compositor maintains a copy of the
    :class:`~pywayland.protocol.wayland.surface.Surface` contents, e.g. as a GL
    texture. This is an important optimization for GL(ES) compositors with
    :class:`~pywayland.protocol.wayland.shm.Shm` clients.
    """
    self._post_event(0)


Buffer._gen_c()
