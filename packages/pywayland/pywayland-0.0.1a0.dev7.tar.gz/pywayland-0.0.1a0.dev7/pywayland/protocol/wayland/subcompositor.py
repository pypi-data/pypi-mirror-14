# -*- coding: utf-8 -*-
# This file has been autogenerated by the pywayland scanner

# Copyright © 2008-2011 Kristian Høgsberg
# Copyright © 2010-2011 Intel Corporation
# Copyright © 2012-2013 Collabora, Ltd.
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice (including the
# next paragraph) shall be included in all copies or substantial
# portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from pywayland.interface import Interface
from .subsurface import Subsurface
from .surface import Surface

import enum


class Subcompositor(Interface):
    """Sub-surface compositing

    The global interface exposing sub-surface compositing capabilities. A
    :class:`~pywayland.protocol.wayland.surface.Surface`, that has sub-surfaces
    associated, is called the parent surface. Sub-surfaces can be arbitrarily
    nested and create a tree of sub-surfaces.

    The root surface in a tree of sub-surfaces is the main surface. The main
    surface cannot be a sub-surface, because sub-surfaces must always have a
    parent.

    A main surface with its sub-surfaces forms a (compound) window. For window
    management purposes, this set of
    :class:`~pywayland.protocol.wayland.surface.Surface` objects is to be
    considered as a single window, and it should also behave as such.

    The aim of sub-surfaces is to offload some of the compositing work within a
    window from clients to the compositor. A prime example is a video player
    with decorations and video in separate
    :class:`~pywayland.protocol.wayland.surface.Surface` objects. This should
    allow the compositor to pass YUV video buffer processing to dedicated
    overlay hardware when possible.
    """
    name = "wl_subcompositor"
    version = 1

    error = enum.Enum("error", {
        "bad_surface": 0,
    })


@Subcompositor.request("", [])
def destroy(self):
    """Unbind from the subcompositor interface

    Informs the server that the client will not be using this protocol object
    anymore. This does not affect any other objects,
    :class:`~pywayland.protocol.wayland.subsurface.Subsurface` objects
    included.
    """
    self._marshal(0)
    self._destroy()


@Subcompositor.request("noo", [Subsurface, Surface, Surface])
def get_subsurface(self, surface, parent):
    """Give a surface the role sub-surface

    Create a sub-surface interface for the given surface, and associate it with
    the given parent surface. This turns a plain
    :class:`~pywayland.protocol.wayland.surface.Surface` into a sub-surface.

    The to-be sub-surface must not already have another role, and it must not
    have an existing :class:`~pywayland.protocol.wayland.subsurface.Subsurface`
    object. Otherwise a protocol error is raised.

    :param surface: the surface to be turned into a sub-surface
    :type surface: :class:`~pywayland.protocol.wayland.surface.Surface`
    :param parent: the parent surface
    :type parent: :class:`~pywayland.protocol.wayland.surface.Surface`
    :returns: :class:`~pywayland.protocol.wayland.subsurface.Subsurface` -- the new subsurface object id
    """
    id = self._marshal_constructor(1, Subsurface, surface, parent)
    return id


Subcompositor._gen_c()
