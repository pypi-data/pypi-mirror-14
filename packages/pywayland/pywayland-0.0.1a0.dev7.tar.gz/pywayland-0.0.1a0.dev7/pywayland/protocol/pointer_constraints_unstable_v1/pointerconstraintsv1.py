# -*- coding: utf-8 -*-
# This file has been autogenerated by the pywayland scanner

# Copyright © 2014      Jonas Ådahl
# Copyright © 2015      Red Hat Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

from pywayland.interface import Interface
from ..wayland.pointer import Pointer as wl_Pointer
from ..wayland.region import Region as wl_Region
from ..wayland.surface import Surface as wl_Surface
from .confinedpointerv1 import ConfinedPointerV1
from .lockedpointerv1 import LockedPointerV1

import enum


class PointerConstraintsV1(Interface):
    """Constrain the movement of a pointer

    The global interface exposing pointer constraining functionality. It
    exposes two requests; lock_pointer for locking the pointer to its position,
    and confine_pointer for locking the pointer to a region.

    The lock_pointer and confine_pointer requests create the objects
    wp_locked_pointer and wp_confined_pointer respectively, and the client can
    use these objects to interact with the lock.

    For any surface, only one lock or confinement may be active across all
    :class:`~pywayland.protocol.wayland.pointer.Pointer` objects of the same
    seat. If a lock or confinement is requested when another lock or
    confinement is active or requested on the same surface and with any of the
    :class:`~pywayland.protocol.wayland.pointer.Pointer` objects of the same
    seat, an 'already_constrained' error will be raised.
    """
    name = "zwp_pointer_constraints_v1"
    version = 1

    error = enum.Enum("error", {
        "already_constrained": 1,
    })

    lifetime = enum.Enum("lifetime", {
        "oneshot": 1,
        "persistent": 2,
    })


@PointerConstraintsV1.request("", [])
def destroy(self):
    """Destroy the pointer constraints manager object

    Used by the client to notify the server that it will no longer use this
    pointer constraints object.
    """
    self._marshal(0)
    self._destroy()


@PointerConstraintsV1.request("noo?ou", [LockedPointerV1, wl_Surface, wl_Pointer, wl_Region, None])
def lock_pointer(self, surface, pointer, region, lifetime):
    """Lock pointer to a position

    The lock_pointer request lets the client request to disable movements of
    the virtual pointer (i.e. the cursor), effectively locking the pointer to a
    position. This request may not take effect immediately; in the future, when
    the compositor deems implementation-specific constraints are satisfied, the
    pointer lock will be activated and the compositor sends a locked event.

    The protocol provides no guarantee that the constraints are ever satisfied,
    and does not require the compositor to send an error if the constraints
    cannot ever be satisfied. It is thus possible to request a lock that will
    never activate.

    There may not be another pointer constraint of any kind requested or active
    on the surface for any of the
    :class:`~pywayland.protocol.wayland.pointer.Pointer` objects of the seat of
    the passed pointer when requesting a lock. If there is, an error will be
    raised. See general pointer lock documentation for more details.

    The intersection of the region passed with this request and the input
    region of the surface is used to determine where the pointer must be in
    order for the lock to activate. It is up to the compositor whether to warp
    the pointer or require some kind of user interaction for the lock to
    activate. If the region is null the surface input region is used.

    A surface may receive pointer focus without the lock being activated.

    The request creates a new object wp_locked_pointer which is used to
    interact with the lock as well as receive updates about its state. See the
    the description of wp_locked_pointer for further information.

    Note that while a pointer is locked, the
    :class:`~pywayland.protocol.wayland.pointer.Pointer` objects of the
    corresponding seat will not emit any :func:`Pointer.motion()
    <pywayland.protocol.wayland.pointer.Pointer.motion>` events, but relative
    motion events will still be emitted via wp_relative_pointer objects of the
    same seat. :func:`Pointer.axis()
    <pywayland.protocol.wayland.pointer.Pointer.axis>` and
    :func:`Pointer.button()
    <pywayland.protocol.wayland.pointer.Pointer.button>` events are unaffected.

    :param surface: surface to lock pointer to
    :type surface: :class:`~pywayland.protocol.wayland.surface.Surface`
    :param pointer: the pointer that should be locked
    :type pointer: :class:`~pywayland.protocol.wayland.pointer.Pointer`
    :param region: region of surface
    :type region: :class:`~pywayland.protocol.wayland.region.Region` or `None`
    :param lifetime: lock lifetime
    :type lifetime: `uint`
    :returns: :class:`~pywayland.protocol.pointer_constraints_unstable_v1.lockedpointerv1.LockedPointerV1`
    """
    id = self._marshal_constructor(1, LockedPointerV1, surface, pointer, region, lifetime)
    return id


@PointerConstraintsV1.request("noo?ou", [ConfinedPointerV1, wl_Surface, wl_Pointer, wl_Region, None])
def confine_pointer(self, surface, pointer, region, lifetime):
    """Confine pointer to a region

    The confine_pointer request lets the client request to confine the pointer
    cursor to a given region. This request may not take effect immediately; in
    the future, when the compositor deems implementation- specific constraints
    are satisfied, the pointer confinement will be activated and the compositor
    sends a confined event.

    The intersection of the region passed with this request and the input
    region of the surface is used to determine where the pointer must be in
    order for the confinement to activate. It is up to the compositor whether
    to warp the pointer or require some kind of user interaction for the
    confinement to activate. If the region is null the surface input region is
    used.

    The request will create a new object wp_confined_pointer which is used to
    interact with the confinement as well as receive updates about its state.
    See the the description of wp_confined_pointer for further information.

    :param surface: surface to lock pointer to
    :type surface: :class:`~pywayland.protocol.wayland.surface.Surface`
    :param pointer: the pointer that should be confined
    :type pointer: :class:`~pywayland.protocol.wayland.pointer.Pointer`
    :param region: region of surface
    :type region: :class:`~pywayland.protocol.wayland.region.Region` or `None`
    :param lifetime: confinement lifetime
    :type lifetime: `uint`
    :returns: :class:`~pywayland.protocol.pointer_constraints_unstable_v1.confinedpointerv1.ConfinedPointerV1`
    """
    id = self._marshal_constructor(2, ConfinedPointerV1, surface, pointer, region, lifetime)
    return id


PointerConstraintsV1._gen_c()
