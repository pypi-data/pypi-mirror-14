language: c
sudo: false
notifications:
  email:
    - tbekolay@gmail.com

env:
  global:
    - NUMPY="1.10"
    - SETUP_CMD="test --addopts 'nengo -n 2 -v --durations 20'"
    - EXTRA_CMD=""
    - CONDA_DEPS="matplotlib jupyter pygments pytest"
    - PIP_DEPS="pytest-xdist"

matrix:
  include:
    - env: >
        PYTHON="2.7"
        SETUP_CMD="test --addopts '--cov-config .coveragerc --cov nengo nengo -n 2 -v --durations 20'"
        EXTRA_CMD="coveralls"
        CONDA_DEPS="$CONDA_DEPS coverage"
        PIP_DEPS="$PIP_DEPS pytest-cov coveralls"
    - env: >
        PYTHON="2.7"
        SETUP_CMD=""
        EXTRA_CMD="flake8 -v nengo"
        CONDA_DEPS="flake8"
        PIP_DEPS=""
    - env: PYTHON="2.7" NUMPY="1.6"
    - env: PYTHON="2.7" NUMPY="1.7"
    - env: PYTHON="2.7" NUMPY="1.8"
    - env: PYTHON="2.7" NUMPY="1.9"
    - env: PYTHON="3.4"
    - env: PYTHON="3.5"

# Setup Miniconda
before_install:
  - wget http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda info -a
  - conda create -q -n test python=$PYTHON pip
  - source activate test

# Install packages with conda, then pip
install:
  - if [[ -n $NUMPY ]]; then export CONDA_DEPS="$CONDA_DEPS numpy=$NUMPY"; fi
  - if [[ -n $CONDA_DEPS ]]; then conda install $CONDA_DEPS; fi
  - if [[ -n $PIP_DEPS ]]; then eval pip install "$PIP_DEPS"; fi

# Run the tests
script:
  - mkdir -p "$HOME/.ipython/profile_default"
  - "echo 'c.HistoryAccessor.enabled = False\n' > $HOME/.ipython/profile_default/ipython_config.py"
  - if [[ -n $SETUP_CMD ]]; then
      python -c "import numpy; numpy.show_config()";
      python setup.py -q install;
      eval python setup.py "$SETUP_CMD";
    fi
  - if [[ -n $EXTRA_CMD ]]; then $EXTRA_CMD; fi
