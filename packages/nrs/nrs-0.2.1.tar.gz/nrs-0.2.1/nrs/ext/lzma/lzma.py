# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lzma', [dirname(__file__)])
        except ImportError:
            import _lzma
            return _lzma
        if fp is not None:
            try:
                _mod = imp.load_module('_lzma', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _lzma = swig_import_helper()
    del swig_import_helper
else:
    import _lzma
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class State(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, State, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, State, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next_in"] = _lzma.State_next_in_set
    __swig_getmethods__["next_in"] = _lzma.State_next_in_get
    if _newclass:
        next_in = _swig_property(_lzma.State_next_in_get, _lzma.State_next_in_set)
    __swig_setmethods__["avail_in"] = _lzma.State_avail_in_set
    __swig_getmethods__["avail_in"] = _lzma.State_avail_in_get
    if _newclass:
        avail_in = _swig_property(_lzma.State_avail_in_get, _lzma.State_avail_in_set)
    __swig_setmethods__["next_out"] = _lzma.State_next_out_set
    __swig_getmethods__["next_out"] = _lzma.State_next_out_get
    if _newclass:
        next_out = _swig_property(_lzma.State_next_out_get, _lzma.State_next_out_set)
    __swig_setmethods__["avail_out"] = _lzma.State_avail_out_set
    __swig_getmethods__["avail_out"] = _lzma.State_avail_out_get
    if _newclass:
        avail_out = _swig_property(_lzma.State_avail_out_get, _lzma.State_avail_out_set)

    def __init__(self):
        this = _lzma.new_State()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _lzma.delete_State
    __del__ = lambda self: None
State_swigregister = _lzma.State_swigregister
State_swigregister(State)


def LZMA_SetInBuffer(s, data):
    return _lzma.LZMA_SetInBuffer(s, data)
LZMA_SetInBuffer = _lzma.LZMA_SetInBuffer

def LZMA_SetOutBuffer(s, data):
    return _lzma.LZMA_SetOutBuffer(s, data)
LZMA_SetOutBuffer = _lzma.LZMA_SetOutBuffer

def LZMA_Init():
    return _lzma.LZMA_Init()
LZMA_Init = _lzma.LZMA_Init

def LZMA_Free(s):
    return _lzma.LZMA_Free(s)
LZMA_Free = _lzma.LZMA_Free

def LZMA_Decompress(s):
    return _lzma.LZMA_Decompress(s)
LZMA_Decompress = _lzma.LZMA_Decompress

_OUTBUFSIZE = 0x1000

class LzmaException(Exception):
  pass

def decompress(data):
  try:
    state = LZMA_Init()
    LZMA_SetInBuffer(state, data)

    outbuf = bytearray(_OUTBUFSIZE)
    out = bytearray()

    while True:
      LZMA_SetOutBuffer(state, outbuf)
      out1 = state.next_out

      err = LZMA_Decompress(state)
      processed = int(state.next_out) - int(out1)
      if err < 0:
        break

      if processed == 0:
        break

      out += outbuf[:processed]
  finally:
    LZMA_Free(state)

  return out

# This file is compatible with both classic and new-style classes.


