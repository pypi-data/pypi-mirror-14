#!/usr/bin/env python
# -*- coding: UTF-8 -*-
##############################################################################
#
# PDFgui            by DANSE Diffraction group
#                   Simon J. L. Billinge
#                   (c) 2006 trustees of the Michigan State University.
#                   All rights reserved.
#
# File coded by:    Chris Farrow
#
# See AUTHORS.txt for a list of people who contributed.
# See LICENSE.txt for license information.
#
##############################################################################

# generated by wxGlade 0.4.1 on Mon Mar 27 19:50:34 2006

import wx

from diffpy.pdfgui.gui.pdfpanel import PDFPanel
from diffpy.pdfgui.gui.tooltips import serverpanel as toolTips
from diffpy.pdfgui.gui.wxExtensions.listctrls import AutoWidthListCtrl
from diffpy.pdfgui.gui.fittree import incrementName
from diffpy.pdfgui.gui.simplecipher import cipher, decipher

class ServerPanel(wx.Panel, PDFPanel):
    def __init__(self, *args, **kwds):
        PDFPanel.__init__(self)
        # begin wxGlade: ServerPanel.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        self.accountSizer_staticbox = wx.StaticBox(self, -1, "Account")
        self.rsaSizer_staticbox = wx.StaticBox(self, -1, "RSA/DSA path")
        self.hostSizer_staticbox = wx.StaticBox(self, -1, "Host")
        self.serverList = AutoWidthListCtrl(self, -1, style=wx.LC_REPORT|wx.LC_EDIT_LABELS|wx.SUNKEN_BORDER)
        self.newButton = wx.Button(self, wx.ID_NEW, "New")
        self.deleteButton = wx.Button(self, wx.ID_DELETE, "Delete")
        self.static_line_2 = wx.StaticLine(self, -1, style=wx.LI_VERTICAL)
        self.hostLabel = wx.StaticText(self, -1, "Host")
        self.hostText = wx.TextCtrl(self, -1, "")
        self.portLabel = wx.StaticText(self, -1, "SSH port")
        self.portText = wx.TextCtrl(self, -1, "22")
        self.portCheck = wx.CheckBox(self, -1, "Use default port")
        self.authRadio = wx.RadioBox(self, -1, "Authentication type", choices=["Passwd", "RSA", "DSA"], majorDimension=1, style=wx.RA_SPECIFY_ROWS)
        self.userLabel = wx.StaticText(self, -1, "username")
        self.userText = wx.TextCtrl(self, -1, "")
        self.passwdLabel = wx.StaticText(self, -1, "password")
        self.passwdText = wx.TextCtrl(self, -1, "", style=wx.TE_PASSWORD)
        self.rsaCheck = wx.CheckBox(self, -1, "Use default path")
        self.pathText = wx.TextCtrl(self, -1, "~/.ssh/id_rsa")
        self.keyfileBtn = wx.Button(self, -1, "Select")
        self.passphraseLabel = wx.StaticText(self, -1, "RSA/DSA Passphrase")
        self.passphraseText = wx.TextCtrl(self, -1, "", style=wx.TE_PASSWORD)
        self.static_line_1 = wx.StaticLine(self, -1)
        self.okButton = wx.Button(self, wx.ID_OK, "OK")
        self.cancelButton = wx.Button(self, wx.ID_CANCEL, "Cancel")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.onItemSelected, self.serverList)
        self.Bind(wx.EVT_LIST_END_LABEL_EDIT, self.onItemEdited, self.serverList)
        self.Bind(wx.EVT_LIST_COL_CLICK, self.onColClick, self.serverList)
        self.Bind(wx.EVT_BUTTON, self.onNew, id=wx.ID_NEW)
        self.Bind(wx.EVT_BUTTON, self.onDelete, id=wx.ID_DELETE)
        self.Bind(wx.EVT_TEXT, self.onHost, self.hostText)
        self.Bind(wx.EVT_TEXT, self.onPort, self.portText)
        self.Bind(wx.EVT_CHECKBOX, self.onPortChecked, self.portCheck)
        self.Bind(wx.EVT_RADIOBOX, self.onAuthChoice, self.authRadio)
        self.Bind(wx.EVT_TEXT, self.onUser, self.userText)
        self.Bind(wx.EVT_TEXT, self.onPass, self.passwdText)
        self.Bind(wx.EVT_CHECKBOX, self.onRSAChecked, self.rsaCheck)
        self.Bind(wx.EVT_TEXT, self.onPath, self.pathText)
        self.Bind(wx.EVT_BUTTON, self.onSelect, self.keyfileBtn)
        self.Bind(wx.EVT_TEXT, self.onRSAPass, self.passphraseText)
        self.Bind(wx.EVT_BUTTON, self.onOK, id=wx.ID_OK)
        self.Bind(wx.EVT_BUTTON, self.onCancel, id=wx.ID_CANCEL)
        # end wxGlade
        self.__customProperties()

    def __set_properties(self):
        # begin wxGlade: ServerPanel.__set_properties
        self.portText.Enable(False)
        self.portCheck.SetValue(1)
        self.authRadio.SetSelection(0)
        self.rsaCheck.SetValue(1)
        self.pathText.Enable(False)
        self.keyfileBtn.Enable(False)
        self.passphraseText.Enable(False)
        # end wxGlade
        self.setToolTips(toolTips)

    def __do_layout(self):
        # begin wxGlade: ServerPanel.__do_layout
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        configSizer = wx.BoxSizer(wx.VERTICAL)
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        rsaSizer = wx.StaticBoxSizer(self.rsaSizer_staticbox, wx.VERTICAL)
        grid_sizer_1 = wx.GridSizer(2, 2, 0, 0)
        accountSizer = wx.StaticBoxSizer(self.accountSizer_staticbox, wx.VERTICAL)
        accountGridSizer = wx.GridSizer(2, 2, 0, 0)
        hostSizer = wx.StaticBoxSizer(self.hostSizer_staticbox, wx.VERTICAL)
        hostGridSizer = wx.GridSizer(2, 2, 0, 0)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_4.Add(self.serverList, 1, wx.EXPAND, 0)
        sizer_4.Add(self.newButton, 0, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 5)
        sizer_4.Add(self.deleteButton, 0, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 5)
        sizer_3.Add(sizer_4, 1, wx.EXPAND, 0)
        sizer_3.Add(self.static_line_2, 0, wx.EXPAND, 0)
        hostGridSizer.Add(self.hostLabel, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        hostGridSizer.Add(self.hostText, 0, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        hostGridSizer.Add(self.portLabel, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        hostGridSizer.Add(self.portText, 0, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        hostGridSizer.Add((1, 1), 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        hostGridSizer.Add(self.portCheck, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        hostSizer.Add(hostGridSizer, 0, wx.EXPAND, 0)
        configSizer.Add(hostSizer, 0, wx.LEFT|wx.BOTTOM|wx.EXPAND, 5)
        configSizer.Add(self.authRadio, 0, wx.LEFT|wx.BOTTOM|wx.EXPAND|wx.ADJUST_MINSIZE, 5)
        accountGridSizer.Add(self.userLabel, 1, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        accountGridSizer.Add(self.userText, 0, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        accountGridSizer.Add(self.passwdLabel, 1, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        accountGridSizer.Add(self.passwdText, 0, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        accountSizer.Add(accountGridSizer, 0, wx.TOP|wx.BOTTOM|wx.EXPAND, 0)
        configSizer.Add(accountSizer, 0, wx.LEFT|wx.BOTTOM|wx.EXPAND, 5)
        rsaSizer.Add(self.rsaCheck, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_1.Add(self.pathText, 0, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_1.Add(self.keyfileBtn, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_1.Add(self.passphraseLabel, 1, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_1.Add(self.passphraseText, 0, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        rsaSizer.Add(grid_sizer_1, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        configSizer.Add(rsaSizer, 0, wx.LEFT|wx.BOTTOM|wx.EXPAND, 5)
        configSizer.Add((1, 1), 1, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        configSizer.Add(self.static_line_1, 0, wx.EXPAND, 0)
        sizer_1.Add((1, 1), 1, wx.ADJUST_MINSIZE, 0)
        sizer_1.Add(self.okButton, 0, wx.ALL|wx.ADJUST_MINSIZE, 5)
        sizer_1.Add((10, 1), 0, wx.ADJUST_MINSIZE, 0)
        sizer_1.Add(self.cancelButton, 0, wx.ALL|wx.ADJUST_MINSIZE, 5)
        configSizer.Add(sizer_1, 0, wx.EXPAND, 0)
        sizer_3.Add(configSizer, 2, wx.EXPAND, 0)
        self.SetAutoLayout(True)
        self.SetSizer(sizer_3)
        sizer_3.Fit(self)
        sizer_3.SetSizeHints(self)
        # end wxGlade

    # USER CONFIGURATION CODE #################################################

    def __customProperties(self):
        """Set the custom properties of the panel."""
        import os.path
        self.servers = []     # A list of dictionaries that mirrors the
                              # serverList
        self.default_server = -1 # The index of the default server
        self.serverList.InsertColumn(0, "Servers")
        self.enablePanels(False)
        self.iddir = os.path.expanduser("~/.ssh")
        return

    # Utility functions
    def addServer(self, name):
        """Add a new server to the servers dictionary.

        Returns the index of the added server.
        """
        import getpass
        username = getpass.getuser()
        self.servers.append(  { 'name'              : name,
                                'host'              : 'localhost',
                                'port'              : '22',
                                'use_default_port'  : True,
                                # 0=password, 1=RSA, 2=DSA
                                'authentication'    : 0,
                                'username'          : username,
                                'password'          : '',
                                'use_default_path'  : True,
                                'path'              : self.iddir,
                                'passphrase'        : '',
                                }
                             )
        return len(self.servers)-1

    def enablePanels(self, on=True):
        """Enable or disable the panels on the right side."""
        self.hostText.Enable(on)
        self.portText.Enable(on)
        self.portCheck.Enable(on)
        self.authRadio.Enable(on)
        self.userText.Enable(on)
        self.passwdText.Enable(on)
        self.keyfileBtn.Enable(on)
        self.rsaCheck.Enable(on)
        self.pathText.Enable(on)
        self.passphraseText.Enable(on)
        return

    def fillList(self):
        """Fill the serverList with the items in self.servers.

        This clears ths list first and then leaves the default server selected,
        if it exists.
        """
        import sys
        self.serverList.DeleteAllItems()
        for item in self.servers:
            self.serverList.InsertStringItem(sys.maxint, item['name'])

        if self.default_server >= 0:
            self.setSelection(self.default_server)
        return

    def fillWidgets(self, index):
        """Fill the other widgets with their correct values when a new item is
        selected in the serverList.
        """
        self.enablePanels()
        self.hostText.SetValue(self.servers[index]['host'])
        self.portText.SetValue(self.servers[index]['port'])
        self.portCheck.SetValue(self.servers[index]['use_default_port'])
        self.authRadio.SetSelection(self.servers[index]['authentication'])
        self.userText.SetValue(self.servers[index]['username'])
        self.passwdText.SetValue(self.servers[index]['password'])
        self.rsaCheck.SetValue(self.servers[index]['use_default_path'])
        self.pathText.SetValue(self.servers[index]['path'])
        self.passphraseText.SetValue(self.servers[index]['passphrase'])

        # Disable widgets that must be disabled.
        if self.servers[index]['use_default_port'] != 0:
            self.portText.Enable(False)
        if self.servers[index]['use_default_path']:
            self.pathText.Enable(False)
            self.keyfileBtn.Enable(False)
            self.passphraseText.Enable(False)
        if self.servers[index]['authentication'] != 0:
            self.passwdText.Enable(False)
        return

    def readConfiguration(self):
        """Read the 'SERVERn' configuration information.

        The configuration information is placed in the servers list.  Each
        server has its own section with the name 'SERVERn' where 'n' is a
        non-negative integer. Each section have the same options; the options
        which appear in the servers dictionary defined in addServer above.
        """
        self.servers = []
        configservers = [item for item in self.cP.sections() \
                if 'SERVER' in item]
        for server in configservers:
            if server == 'DEFAULT_SERVER':
                self.default_server = self.cP.getint('DEFAULT_SERVER', 'server')

            else:
                index = self.addServer('tempname')
                for option in self.cP.options(server):
                    if option in ['use_default_port', 'use_default_path']:
                        self.servers[index][option] = self.cP.getboolean(server,
                                option)
                    elif option in ['password', 'passphrase']:
                        self.servers[index][option] = decipher(
                                self.cP.get(server, option))
                    elif option == 'authentication':
                        self.servers[index][option] = self.cP.getint(server,
                                option)
                    else:
                        self.servers[index][option] = self.cP.get(server,
                                option)

        return

    def updateConfiguration(self):
        """Update configuration about the servers information.

        This clobbers server information already in the configuration. Each
        server is given its own section titled 'SERVERn', where 'n' is the index
        of that server in the serverList. Each of these sections is given an
        option with the same name and value as its corresponding dictionary
        entry in self.servers. It also records the 'DEFAULT_SERVER', the value
        of the currently selected item in the tree, under the option 'server'.
        If this option is -1, localhost is assumed.
        """
        # Wipe out the current server information.
        configservers = [item for item in self.cP.sections() \
                if 'SERVER' in item]
        for item in configservers:
            self.cP.remove_section(item)

        # Set the default server
        self.cP.add_section('DEFAULT_SERVER')
        self.default_server = self.serverList.GetFirstSelected()
        self.cP.set('DEFAULT_SERVER', 'server', str(self.default_server))

        # Write the configuration for all the rest
        for i in range(len(self.servers)):
            section = 'SERVER%i' % i
            self.cP.add_section(section)
            for key in self.servers[i]:
                if key in ['password', 'passphrase']:
                    tempword = self.servers[i][key]
                    pword = tempword.encode('ascii')
                    self.cP.set(section, key, cipher(pword))
                else:
                    self.cP.set(section, key, str(self.servers[i][key]))

        return

    def setSelection(self, index):
        """This unselects all indexs in the ListCtrl and reselects only the one
        you want. If index = -1, all items are deselected.
        """
        listindex = self.serverList.GetFirstSelected()
        while listindex != -1:
            self.serverList.Select(listindex, on=False)
            listindex = self.serverList.GetNextSelected(listindex)
        if index > 0:
            self.serverList.Select(index)
            self.serverList.Focus(index)
        return

    # EVENT CODE #############################

    def onNew(self, event): # wxGlade: ServerPanel.<event_handler>
        """Create a new server item and give it the default configuration."""
        # Get a name for the item
        name = "New Server"
        others = [server['name'] for server in self.servers]
        name = incrementName(name, others)

        # Add a new server to the servers dictionary.
        self.addServer(name)

        # Add this item to the list of servers and to the list
        import sys
        item = self.serverList.InsertStringItem(sys.maxint, name)
        self.setSelection(item)
        self.serverList.EditLabel(item)

        assert(len(self.servers) == self.serverList.GetItemCount())
        return

    def onDelete(self, event): # wxGlade: ServerPanel.<event_handler>
        item = self.serverList.GetFirstSelected()
        if item < 0: return
        # Delete the item from the list
        self.serverList.DeleteItem(item)
        # Remove it from the servers dictionary
        del self.servers[item]
        self.enablePanels(False)
        assert(len(self.servers) == self.serverList.GetItemCount())
        return

    def onItemSelected(self, event): # wxGlade: ServerPanel.<event_handler>
        """When a server is selected from the list, fill the other widgets so
        that their values reflect the chosen server configuration.
        """
        index = event.GetIndex()
        self.fillWidgets(index)
        return

    def onItemEdited(self, event): # wxGlade: ServerPanel.<event_handler>
        """Change the name of an item if it does not conflict with another
        name.
        """
        index = event.GetIndex()
        newName = event.GetText()
        allnames = [ server['name'] for server in self.servers ]
        if newName in allnames:
            # Don't allow duplicate names.
            event.Veto()
        else:
            # Don't worry about deep copy, since there is no way to duplicate
            # items.
            self.servers[index]['name'] = newName
        return

    def onColClick(self, event): # wxGlade: ServerPanel.<event_handler>
        """On a column click delect any selected item."""
        self.setSelection(-1)
        self.enablePanels(False)
        return

    def onHost(self, event): # wxGlade: ServerPanel.<event_handler>
        """Set the 'host' of the server."""
        index = self.serverList.GetFirstSelected()
        value = event.GetString()
        self.servers[index]['host'] = value
        return

    def onPort(self, event): # wxGlade: ServerPanel.<event_handler>
        """Set the 'port' of the server."""
        index = self.serverList.GetFirstSelected()
        value = event.GetString()
        self.servers[index]['port'] = value
        return

    def onPortChecked(self, event): # wxGlade: ServerPanel.<event_handler>
        """Update the 'use_default_port' option."""
        index = self.serverList.GetFirstSelected()
        value = event.IsChecked()
        self.servers[index]['use_default_port'] = value
        if value:
            self.portText.Enable(False)
        else:
            self.portText.Enable(True)
        return

    def onAuthChoice(self, event): # wxGlade: ServerPanel.<event_handler>
        """Select 'authentication' type."""
        index = self.serverList.GetFirstSelected()
        value = event.GetInt()
        self.servers[index]['authentication'] = value
        if self.servers[index]['authentication'] != 0:
            self.passwdText.Enable(False)
        else:
            self.passwdText.Enable(True)
        return

    def onUser(self, event): # wxGlade: ServerPanel.<event_handler>
        """Set the 'username'"""
        index = self.serverList.GetFirstSelected()
        value = event.GetString()
        self.servers[index]['username'] = value
        return

    def onPass(self, event): # wxGlade: ServerPanel.<event_handler>
        """Set the 'password'"""
        index = self.serverList.GetFirstSelected()
        value = event.GetString()
        self.servers[index]['password'] = value
        return

    def onRSAChecked(self, event): # wxGlade: ServerPanel.<event_handler>
        """Set the 'use_default_path' option to use default path."""
        index = self.serverList.GetFirstSelected()
        value = event.IsChecked()
        self.servers[index]['use_default_path'] = value
        if self.servers[index]['use_default_path']:
            self.pathText.Enable(False)
            self.keyfileBtn.Enable(False)
            self.passphraseText.Enable(False)
        else:
            self.pathText.Enable(True)
            self.keyfileBtn.Enable(True)
            self.passphraseText.Enable(True)
        return

    def onPath(self, event): # wxGlade: ServerPanel.<event_handler>
        """Set the rsa/dsa path, 'path'"""
        index = self.serverList.GetFirstSelected()
        value = event.GetString()
        self.servers[index]['path'] = value
        return

    def onSelect(self, event): # wxGlade: ServerPanel.<event_handler>
        """Select the 'path' from a file dialog."""
        index = self.serverList.GetFirstSelected()
        matchstring = "All Files|*"
        d = wx.FileDialog(None, "Choose a file", self.iddir
                , "", matchstring, wx.OPEN)
        if d.ShowModal() == wx.ID_OK:
            path = d.GetPath()
            self.iddir = d.GetDirectory()
            self.servers[index]['path'] = path
            self.pathText.SetValue(path)
        d.Destroy()
        return


    def onRSAPass(self, event): # wxGlade: ServerPanel.<event_handler>
        """Set the rsa/dsa password, 'passphrase'"""
        index = self.serverList.GetFirstSelected()
        value = event.GetString()
        self.servers[index]['passphrase'] = value
        return

    def onCancel(self, event): # wxGlade: ServerPanel.<event_handler>
        """Cancel this addition. Go back to the last panel."""
        selections = self.treeCtrlMain.GetSelections()
        if selections:
            node = selections[0]
            entrytype = self.treeCtrlMain.GetNodeType(node)
        else:
            entrytype = None
        self.mainFrame.setMode("fitting")
        self.mainFrame.switchRightPanel(entrytype)
        return

    def onOK(self, event): # wxGlade: ServerPanel.<event_handler>
        """Verify the selection."""
        self.updateConfiguration()
        if self.default_server >= 0:
            self.mainFrame.control.setHost(self.servers[self.default_server])
        else:
            self.mainFrame.control.setHost(None)
        self.onCancel(event)
        return

    # Methods overloaded from PDFPanel
    def refresh(self):
        """Read in the configuration data."""
        self.readConfiguration()
        self.fillList()
        self.enablePanels(False)
        return

# end of class ServerPanel
