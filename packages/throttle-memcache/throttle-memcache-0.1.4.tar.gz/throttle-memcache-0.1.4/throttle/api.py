# -*- coding: utf-8 -*-
# This code is distributed under the two-clause BSD license.
# Copyright (c) 2013 RaphaÃ«l Barrois


"""External API for the throttle library.

Enables use of:

    pass
"""


from . import buckets


class Throttled(Exception):
    pass


class Throttler(object):
    def __init__(self, rate, capacity, storage, **kwargs):
        super(Throttler, self).__init__(**kwargs)
        self.rate = rate
        self.capacity = capacity
        self.storage = storage

    def get_bucket(self, key, rate=None, capacity=None, **kwargs):
        """Fetch a Bucket for the given key.

        rate and capacity might be overridden from the Throttler defaults.

        Args:
            rate (float): Units regenerated by second, or None to keep
                Throttler defaults
            capacity (int): Maximum units available, or None to keep Throttler
                defaults
        """
        return buckets.Bucket(
            key=key,
            rate=rate or self.rate,
            capacity=capacity or self.capacity,
            storage=self.storage,
            **kwargs)

    def consume(self, key, amount=1, rate=None, capacity=None, **kwargs):
        """Consume an amount for a given key.

        Non-default rate/capacity can be given to override Throttler defaults.

        Returns:
            bool: whether the units could be consumed
        """
        bucket = self.get_bucket(key, rate, capacity, **kwargs)
        return bucket.consume(amount)

    def throttle(self, key, amount=1, rate=None, capacity=None,
            exc_class=Throttled, **kwargs):
        """Consume an amount for a given key, or raise a Throttled exception."""

        if not self.consume(key, amount, rate, capacity, **kwargs):
            raise exc_class("Request of %d unit for %s exceeds capacity."
                    % (amount, key))


def consume(key, rate, capacity, storage, amount=1):
    thr = Throttler(rate, capacity, storage)
    return thr.consume(key, amount=amount)


def throttle(key, rate, capacity, storage, amount=1, exc_class=Throttled):
    thr = Throttler(rate, capacity, storage)
    return thr.throttle(key, amount=amount, exc_class=exc_class)
