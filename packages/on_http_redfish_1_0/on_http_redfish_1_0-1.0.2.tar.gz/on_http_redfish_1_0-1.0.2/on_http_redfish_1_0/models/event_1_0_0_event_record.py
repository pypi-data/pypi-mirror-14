# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Event100EventRecord(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Event100EventRecord - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'context': 'str',
            'event_id': 'str',
            'event_timestamp': 'datetime',
            'event_type': 'str',
            'member_id': 'str',
            'message': 'str',
            'message_args': 'list[str]',
            'message_id': 'str',
            'oem': 'ResourceOem',
            'origin_of_condition': 'Odata400IdRef',
            'severity': 'str'
        }

        self.attribute_map = {
            'context': 'Context',
            'event_id': 'EventId',
            'event_timestamp': 'EventTimestamp',
            'event_type': 'EventType',
            'member_id': 'MemberId',
            'message': 'Message',
            'message_args': 'MessageArgs',
            'message_id': 'MessageId',
            'oem': 'Oem',
            'origin_of_condition': 'OriginOfCondition',
            'severity': 'Severity'
        }

        self._context = None
        self._event_id = None
        self._event_timestamp = None
        self._event_type = None
        self._member_id = None
        self._message = None
        self._message_args = None
        self._message_id = None
        self._oem = None
        self._origin_of_condition = None
        self._severity = None

    @property
    def context(self):
        """
        Gets the context of this Event100EventRecord.
        A context can be supplied at subscription time.  This property is the context value supplied by the subscriber.

        :return: The context of this Event100EventRecord.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """
        Sets the context of this Event100EventRecord.
        A context can be supplied at subscription time.  This property is the context value supplied by the subscriber.

        :param context: The context of this Event100EventRecord.
        :type: str
        """
        self._context = context

    @property
    def event_id(self):
        """
        Gets the event_id of this Event100EventRecord.
        This is a unique instance identifier of an event.

        :return: The event_id of this Event100EventRecord.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """
        Sets the event_id of this Event100EventRecord.
        This is a unique instance identifier of an event.

        :param event_id: The event_id of this Event100EventRecord.
        :type: str
        """
        self._event_id = event_id

    @property
    def event_timestamp(self):
        """
        Gets the event_timestamp of this Event100EventRecord.
        This is time the event occurred.

        :return: The event_timestamp of this Event100EventRecord.
        :rtype: datetime
        """
        return self._event_timestamp

    @event_timestamp.setter
    def event_timestamp(self, event_timestamp):
        """
        Sets the event_timestamp of this Event100EventRecord.
        This is time the event occurred.

        :param event_timestamp: The event_timestamp of this Event100EventRecord.
        :type: datetime
        """
        self._event_timestamp = event_timestamp

    @property
    def event_type(self):
        """
        Gets the event_type of this Event100EventRecord.
        This indicates the type of event sent, according to the definitions in the EventService.

        :return: The event_type of this Event100EventRecord.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """
        Sets the event_type of this Event100EventRecord.
        This indicates the type of event sent, according to the definitions in the EventService.

        :param event_type: The event_type of this Event100EventRecord.
        :type: str
        """
        allowed_values = ["StatusChange", "ResourceUpdated", "ResourceAdded", "ResourceRemoved", "Alert"]
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._event_type = event_type

    @property
    def member_id(self):
        """
        Gets the member_id of this Event100EventRecord.
        This is the identifier for the member within the collection.

        :return: The member_id of this Event100EventRecord.
        :rtype: str
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id):
        """
        Sets the member_id of this Event100EventRecord.
        This is the identifier for the member within the collection.

        :param member_id: The member_id of this Event100EventRecord.
        :type: str
        """
        self._member_id = member_id

    @property
    def message(self):
        """
        Gets the message of this Event100EventRecord.
        This is the human readable message, if provided.

        :return: The message of this Event100EventRecord.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this Event100EventRecord.
        This is the human readable message, if provided.

        :param message: The message of this Event100EventRecord.
        :type: str
        """
        self._message = message

    @property
    def message_args(self):
        """
        Gets the message_args of this Event100EventRecord.
        This array of message arguments are substituted for the arguments in the message when looked up in the message registry.

        :return: The message_args of this Event100EventRecord.
        :rtype: list[str]
        """
        return self._message_args

    @message_args.setter
    def message_args(self, message_args):
        """
        Sets the message_args of this Event100EventRecord.
        This array of message arguments are substituted for the arguments in the message when looked up in the message registry.

        :param message_args: The message_args of this Event100EventRecord.
        :type: list[str]
        """
        self._message_args = message_args

    @property
    def message_id(self):
        """
        Gets the message_id of this Event100EventRecord.
        This is the key for this message which can be used to look up the message in a message registry.

        :return: The message_id of this Event100EventRecord.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """
        Sets the message_id of this Event100EventRecord.
        This is the key for this message which can be used to look up the message in a message registry.

        :param message_id: The message_id of this Event100EventRecord.
        :type: str
        """
        self._message_id = message_id

    @property
    def oem(self):
        """
        Gets the oem of this Event100EventRecord.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this Event100EventRecord.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this Event100EventRecord.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this Event100EventRecord.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def origin_of_condition(self):
        """
        Gets the origin_of_condition of this Event100EventRecord.
        This indicates the resource that originated the condition that caused the event to be generated.

        :return: The origin_of_condition of this Event100EventRecord.
        :rtype: Odata400IdRef
        """
        return self._origin_of_condition

    @origin_of_condition.setter
    def origin_of_condition(self, origin_of_condition):
        """
        Sets the origin_of_condition of this Event100EventRecord.
        This indicates the resource that originated the condition that caused the event to be generated.

        :param origin_of_condition: The origin_of_condition of this Event100EventRecord.
        :type: Odata400IdRef
        """
        self._origin_of_condition = origin_of_condition

    @property
    def severity(self):
        """
        Gets the severity of this Event100EventRecord.
        This is the severity of the event.

        :return: The severity of this Event100EventRecord.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """
        Sets the severity of this Event100EventRecord.
        This is the severity of the event.

        :param severity: The severity of this Event100EventRecord.
        :type: str
        """
        self._severity = severity

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

