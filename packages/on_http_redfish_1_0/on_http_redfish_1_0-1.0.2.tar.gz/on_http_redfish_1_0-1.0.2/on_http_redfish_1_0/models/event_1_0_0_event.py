# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Event100Event(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Event100Event - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'odata_context': 'str',
            'odata_id': 'str',
            'odata_type': 'str',
            'description': 'str',
            'events': 'list[Event100EventRecord]',
            'eventsodata_count': 'float',
            'eventsodata_navigation_link': 'Odata400IdRef',
            'id': 'str',
            'name': 'str',
            'oem': 'ResourceOem'
        }

        self.attribute_map = {
            'odata_context': '@odata.context',
            'odata_id': '@odata.id',
            'odata_type': '@odata.type',
            'description': 'Description',
            'events': 'Events',
            'eventsodata_count': 'Events@odata.count',
            'eventsodata_navigation_link': 'Events@odata.navigationLink',
            'id': 'Id',
            'name': 'Name',
            'oem': 'Oem'
        }

        self._odata_context = None
        self._odata_id = None
        self._odata_type = None
        self._description = None
        self._events = None
        self._eventsodata_count = None
        self._eventsodata_navigation_link = None
        self._id = None
        self._name = None
        self._oem = None

    @property
    def odata_context(self):
        """
        Gets the odata_context of this Event100Event.


        :return: The odata_context of this Event100Event.
        :rtype: str
        """
        return self._odata_context

    @odata_context.setter
    def odata_context(self, odata_context):
        """
        Sets the odata_context of this Event100Event.


        :param odata_context: The odata_context of this Event100Event.
        :type: str
        """
        self._odata_context = odata_context

    @property
    def odata_id(self):
        """
        Gets the odata_id of this Event100Event.


        :return: The odata_id of this Event100Event.
        :rtype: str
        """
        return self._odata_id

    @odata_id.setter
    def odata_id(self, odata_id):
        """
        Sets the odata_id of this Event100Event.


        :param odata_id: The odata_id of this Event100Event.
        :type: str
        """
        self._odata_id = odata_id

    @property
    def odata_type(self):
        """
        Gets the odata_type of this Event100Event.


        :return: The odata_type of this Event100Event.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """
        Sets the odata_type of this Event100Event.


        :param odata_type: The odata_type of this Event100Event.
        :type: str
        """
        self._odata_type = odata_type

    @property
    def description(self):
        """
        Gets the description of this Event100Event.
        Provides a description of this resource and is used for commonality  in the schema definitions.

        :return: The description of this Event100Event.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Event100Event.
        Provides a description of this resource and is used for commonality  in the schema definitions.

        :param description: The description of this Event100Event.
        :type: str
        """
        self._description = description

    @property
    def events(self):
        """
        Gets the events of this Event100Event.
        Each event in this array has a set of properties that describe the event.  Since this is an array, more than one event can be sent simultaneously.

        :return: The events of this Event100Event.
        :rtype: list[Event100EventRecord]
        """
        return self._events

    @events.setter
    def events(self, events):
        """
        Sets the events of this Event100Event.
        Each event in this array has a set of properties that describe the event.  Since this is an array, more than one event can be sent simultaneously.

        :param events: The events of this Event100Event.
        :type: list[Event100EventRecord]
        """
        self._events = events

    @property
    def eventsodata_count(self):
        """
        Gets the eventsodata_count of this Event100Event.


        :return: The eventsodata_count of this Event100Event.
        :rtype: float
        """
        return self._eventsodata_count

    @eventsodata_count.setter
    def eventsodata_count(self, eventsodata_count):
        """
        Sets the eventsodata_count of this Event100Event.


        :param eventsodata_count: The eventsodata_count of this Event100Event.
        :type: float
        """
        self._eventsodata_count = eventsodata_count

    @property
    def eventsodata_navigation_link(self):
        """
        Gets the eventsodata_navigation_link of this Event100Event.


        :return: The eventsodata_navigation_link of this Event100Event.
        :rtype: Odata400IdRef
        """
        return self._eventsodata_navigation_link

    @eventsodata_navigation_link.setter
    def eventsodata_navigation_link(self, eventsodata_navigation_link):
        """
        Sets the eventsodata_navigation_link of this Event100Event.


        :param eventsodata_navigation_link: The eventsodata_navigation_link of this Event100Event.
        :type: Odata400IdRef
        """
        self._eventsodata_navigation_link = eventsodata_navigation_link

    @property
    def id(self):
        """
        Gets the id of this Event100Event.
        Uniquely identifies the resource within the collection of like resources.

        :return: The id of this Event100Event.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Event100Event.
        Uniquely identifies the resource within the collection of like resources.

        :param id: The id of this Event100Event.
        :type: str
        """
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Event100Event.
        The name of the resource or array element.

        :return: The name of this Event100Event.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Event100Event.
        The name of the resource or array element.

        :param name: The name of this Event100Event.
        :type: str
        """
        self._name = name

    @property
    def oem(self):
        """
        Gets the oem of this Event100Event.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this Event100Event.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this Event100Event.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this Event100Event.
        :type: ResourceOem
        """
        self._oem = oem

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

