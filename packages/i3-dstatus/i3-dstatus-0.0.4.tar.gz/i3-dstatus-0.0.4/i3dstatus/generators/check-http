#!/usr/bin/env python3
import time
import dbus
import json
import atexit
from urllib.request import urlopen
from urllib.error import HTTPError
from threading import Thread
from threading import Lock

i3dstatus = dbus.Interface(dbus.SessionBus().get_object(
                           'com.dubstepdish.i3dstatus',
                           '/com/dubstepdish/i3dstatus'),
                           'com.dubstepdish.i3dstatus')

block_name = 'check-http'
#up_format = '<span color="green">%site is up (status: %status)</span>'
up_format = ''
down_format = '<span color="red">%site is down (status: %status, %reason)</span>'
interval = 600

sites = []

block_lock = Lock()

config = json.loads(i3dstatus.get_config(block_name))

if 'format-up' in config:
    up_format = config['format-up']

if 'format-down' in config:
    down_format = config['format-down']

if 'interval' in config:
    interval = config['interval']

if 'sites' in config:
    sites = config['sites']

def show_block(url, status, reason, is_up):
    global block_lock
    format_str = up_format if is_up else down_format
    full_text = format_str.replace('%site', url)
    full_text = full_text.replace('%status', str(status))
    full_text = full_text.replace('%reason', reason)

    print(full_text)

    block_lock.acquire()
    try:
        i3dstatus.show_block({
            "name": block_name,
            "instance": url,
            "full_text": full_text,
            "markup": "pango"
        })
    finally:
        block_lock.release()

class HttpChecker(Thread):
    def __init__(self, url):
        self.url = url
        Thread.__init__(self)

    def run(self):
        status = None
        reason = ''
        is_up = True
        try:
            resp = urlopen(self.url)
            status = resp.status
            reason = resp.reason
        except HTTPError as e:
            status = e.status
            reason = e.reason
            is_up = False

        show_block(self.url, status, reason, is_up)

def clear_blocks():
    for url in sites:
        block_lock.acquire()
        try:
            i3dstatus.show_block({
                "name": block_name,
                "instance": url,
                "full_text": "",
            })
        finally:
            block_lock.release()

atexit.register(clear_blocks)

while True:
    for url in sites:
        HttpChecker(url).start()

    time.sleep(interval)
