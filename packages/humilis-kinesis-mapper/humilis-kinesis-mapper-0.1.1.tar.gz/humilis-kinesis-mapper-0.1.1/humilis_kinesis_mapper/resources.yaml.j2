---
resources:
    {# The lambda function #}
    LambdaFunction:
      Type: "AWS::Lambda::Function"
      Properties:
        Code:
          S3Bucket: "{{lambda_function.s3bucket}}"
          S3Key: "{{lambda_function.s3key}}"
        Runtime: "python2.7"
        Description: "{{_layer.description}}"
        {# in seconds #}
        Timeout: 100
        Handler: "handler.lambda_handler"
        Role:
          "Fn::GetAtt":
              - LambdaExecutionRole
              - Arn
    {# The role associated to the Lambda function that processes raw events #}
    LambdaExecutionRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                  Service: 'lambda.amazonaws.com'
              Action: 'sts:AssumeRole'
        {# Keep all environment role under the same path #}
        Path: {{ "/{}/".format(_env.name) }}
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  {# Write access to Cloudwatch logs #}
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource: "arn:aws:logs:*:*:*"
                {% if output_delivery_stream or input_delivery_stream or error_delivery_stream %}
                - Effect: Allow
                  {# Write access to the Firehose delivery stream(s) #}
                  Action:
                    - "firehose:PutRecord"
                    - "firehose:PutRecordBatch"
                    - "firehose:ListDeliveryStreams"
                    - "firehose:DescribeDeliveryStream"
                  Resource:
                    {% if output_delivery_stream %}
                    - {{output_delivery_stream.arn}}
                    {% endif %}
                    {% if input_delivery_stream %}
                    - {{input_delivery_stream.arn}}
                    {% endif %}
                    {% if error_delivery_stream %}
                    - {{error_delivery_stream.arn}}
                    {% endif %}
                {% endif %}
                - Effect: Allow
                  {# Permission to list and describe I/O streams #}
                  Action:
                    - "kinesis:DescribeStream"
                    - "kinesis:ListStreams"
                  Resource: "*"
                - Effect: Allow
                  {# Permissions to read from the input stream #}
                  Action:
                    - "kinesis:GetRecords"
                    - "kinesis:GetShardIterator"
                  Resource: {{ input_stream.arn }}
                  {% if output_stream or error_stream %}
                - Effect: Allow
                  {# Permissions to write to output stream #}
                  Action:
                    - "kinesis:PutRecords"
                  Resource:
                    {% if output_stream %}
                    - {{output_stream.arn}}
                    {% endif %}
                    {% if error_stream %}
                    - {{error_stream.arn}}
                    {% endif %}
                  {% endif %}
                - Effect: Allow
                  {# Permissions to access the DynamoDB secrets table #}
                  Action:
                    - "dynamodb:GetItem"
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - "dynamodb:*"
                  Resource:
                    - "Fn::Join":
                      - ""
                      - ["arn:aws:dynamodb:", {"Ref": "AWS::Region"},":", {"Ref": "AWS::AccountId"}, ":", "table/", {"Ref": "StateTable"}]
    InputEventSourceMapping:
      Type: "AWS::Lambda::EventSourceMapping"
      Properties:
        BatchSize: {{ batch_size }}
        {# The ARN of the input Kinesis stream #}
        EventSourceArn: {{ input_stream.arn }}
        FunctionName:
          Ref: LambdaFunction
        StartingPosition:
          TRIM_HORIZON
    {# The DynamoDB table that keeps state information #}
    StateTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
        {# The state item id #}
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 50
          WriteCapacityUnits: 50
        {% if _env.stage %}
        TableName: {{_env.name}}-{{_layer.name}}-{{_env.stage}}-state
        {% else %}
        TableName: {{_env.name}}-{{_layer.name}}-state
        {% endif %}
