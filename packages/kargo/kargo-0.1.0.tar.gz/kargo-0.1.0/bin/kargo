#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#
# This file is part of Kargo.
#
#    Foobar is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    Foobar is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Foobar.  If not, see <http://www.gnu.org/licenses/>.

__version__ = '0.1.0'

import os
import argparse
import getpass
try:
    from ansible.utils.display import Display
except ImportError:
    raise ImportError('Cannot find Ansible: Please check your installation')
from kargo.common import clone_git_repo
from kargo.configure import Config
from kargo.inventory import CfgInventory
from kargo.deploy import RunPlaybook
from kargo.cloud import AWS  # GCE
# import kargo.info
display = Display()


def cluster_info(options):
    display.warning('info not configured yet')


def prepare(options):
    clone_git_repo(
        'kargo', options['kargo_path'], options['kargo_git_repo']
    )
    Cfg = CfgInventory(options, 'metal')
    Cfg.write_inventory(options['k8s_nodes'])


def aws(options):
    clone_git_repo(
        'kargo', options['kargo_path'], options['kargo_git_repo']
    )
    A = AWS(options)
    A.gen_ec2_playbook()
    A.create_instances()
    A.write_inventory()


def gce(options):
    clone_git_repo(
        '', os.path.join(options['kargo_path'], "roles"),
        options['ec2_provision_repo']
    )
    display.warning('gce not implemented yet, coming soon :)')


def deploy(options):
    Run = RunPlaybook(options)
    Run.ssh_prepare()
    Run.check_ping()
    Run.deploy_kubernetes()

if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog='kargo',
        description='%(prog)s Kubernetes cluster deployment tool'
    )
    parser.add_argument(
        '-p', '--path', dest='kargo_path',
        help='Where the Ansible playbooks are installed'
    )
    parser.add_argument('--config', dest='configfile', help="Config file")
    parser.add_argument(
        '--version', action='version',
        version='%(prog)s'+' %s' %  __version__
    )

    subparsers = parser.add_subparsers(help='commands')

    # cluster-info
    info_parser = subparsers.add_parser(
        'cluster-info', help='Display information on a running cluster'
    )
    info_parser.set_defaults(func=cluster_info)

    # prepare
    prepare_parser = subparsers.add_parser(
        'prepare', help='generate inventory and create vms on cloud providers'
    )
    prepare_parser.add_argument(
        '--nodes', dest='k8s_nodes', metavar='N', nargs='+',
        required=True, help='List of nodes'
    )
    prepare_parser.add_argument(
        '-p', '--path', dest='kargo_path',
        help='Where the Ansible playbooks are installed'
    )
    prepare_parser.set_defaults(func=prepare)

    # aws
    aws_parser = subparsers.add_parser(
        'aws', help='Create AWS instances and generate inventory'
    )
    aws_parser.add_argument(
        '--access-key', dest='aws_access_key', help='AWS access key'
    )
    aws_parser.add_argument(
        '--secret-key', dest='aws_secret_key', help='AWS secret key'
    )
    aws_parser.add_argument(
        '--type', dest='instance_type', help='AWS instance type'
    )
    aws_parser.add_argument(
        '--keypair', dest='key_name', help='AWS key pair name'
    )
    aws_parser.add_argument('--region', dest='region', help='AWS region')
    aws_parser.add_argument(
        '--security-group', dest='group', help='AWS security group'
    )
    aws_parser.add_argument('--vpc-id', dest='aws_vpc_id', help='EC2 VPC id')
    aws_parser.add_argument(
        '--vpc-subnet', dest='vpc_subnet_id', help='EC2 VPC regional subnet'
    )
    aws_parser.add_argument('--ami', dest='aws_ami', help='AWS AMI')
    aws_parser.add_argument(
        '--instances', dest='count', type=int,
        help='Number of nodes', required=True
    )
    aws_parser.set_defaults(func=aws)

    # gce
    gce_parser = subparsers.add_parser(
        'gce', help='Create GCE machines and generate inventory'
    )
    gce_parser.add_argument(
        '--sshkey', dest='gce_sshkey_path', help='GCE ssh key path'
    )
    gce_parser.add_argument('--zone', dest='gce_zone', help='GCE zone')
    gce_parser.add_argument(
        '--type', dest='gce_machine_type', help='GCE machine type'
    )
    gce_parser.add_argument('--image', dest='gce_image', help='GCE image')
    gce_parser.add_argument(
        '--instances', dest='cloud_instances_count', type=int,
        help='Number of nodes'
    )
    gce_parser.set_defaults(func=gce)

    # deploy
    deploy_parser = subparsers.add_parser(
        'deploy', help='Create GCE machines and generate inventory'
    )
    deploy_parser.add_argument(
        '-u', '--user', dest='ansible_user', default=getpass.getuser(),
        help='Ansible SSH user (remote user)'
    )
    deploy_parser.add_argument(
        '-n', '--network-plugin', default='flannel',
        choices=['flannel', 'weave', 'calico']
    )
    deploy_parser.add_argument(
        '--aws', default=False, action='store_true',
        help='Kubernetes deployment on AWS'
    )
    deploy_parser.add_argument(
        '--gce', default=False, action='store_true',
        help='Kubernetes deployment on GCE'
    )
    deploy_parser.add_argument(
        '--upgrade', default=False, action='store_true',
        help='Upgrade Kubernetes cluster'
    )
    deploy_parser.add_argument(
        '--coreos', default=False, action='store_true',
        help='bootstrap python on CoreOS'
    )
    deploy_parser.add_argument(
        '--non-interactive', default=True, dest='interactive',
        action='store_false', help='Don\'t prompt user for input'
    )
    deploy_parser.add_argument('--ansible_opts', help='Ansible options')
    deploy_parser.set_defaults(func=deploy)

    # Parse arguments
    args = parser.parse_args()
    arguments = dict(args._get_kwargs())
    if arguments['configfile'] is None:
        arguments['configfile'] = '/etc/kargo/kargo.yml'
    # Read configfile and update options dict
    configfile = arguments.get('configfile')
    C = Config(configfile)
    config = C.parse_configfile
    if 'kargo_path' not in config.keys() and arguments['kargo_path'] is None:
        config['kargo_path'] = os.path.join(os.path.expanduser("~"), 'kargo')
    for key, value in arguments.items():
        if value is not None:
            config[key] = value
    if 'logfile' not in config.keys():
        config['logfile'] = os.path.join(config['kargo_path'], 'kargo.log')
    # Run functions with all the options
    args.func(config)
