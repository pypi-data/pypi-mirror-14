<!DOCTYPE html>
<meta charset="utf-8">
<style>

text {
  font: 10px sans-serif;
}

</style>
<body>
<p>colorscheme: {{colorscheme}}</p>
<script type="text/javascript" src="d3.js"></script>
<script type="text/javascript" src="colorbrewer.js"></script>
<script>
    
var diameter = 500,
    format = d3.format(",d");

var bubble = d3.layout.pack()
    .sort(null)
    .size([diameter, diameter])
    .padding(1.5);

var svg = d3.select("body").append("svg")
    .attr("width", diameter)
    .attr("height", diameter)
    .attr("class", "bubble");
    
svg.append("rect")
    .attr('width','100%')
    .attr('height','100%')
    .attr('fill','{{bgcolor}}')
    
d3.json("hout.json", function(error, root) {
  if (error) throw error;
  if (error) throw error;

  var colorschemes = colorbrewer.{{colorscheme}}
  var nschemes = Object.keys(colorschemes).length
  var color_array = colorschemes[ nschemes-1 ]
  var color = d3.scale.ordinal()
                       .range(color_array)
  
  var node = svg.selectAll(".node")
      .data(bubble.nodes(classes(root))
      .filter(function(d) { return !d.children; }))
    .enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

  node.append("title")
      .text(function(d) { txt = d.className.replace(/_slash_/g,"/")
									    .replace(/_dot_/g,".")
										.replace(/_dash_/g,"-");
							return txt; });

  node.append("circle")
      .attr("r", function(d) { return d.r; })
      .style("fill", function(d) { return color(d.packageName); });

  node.append("text")
      .attr("dy", ".3em")
      .style("text-anchor", "middle")
      
{{#has_title}}
    svg.append("text")
    .attr('x',width/2)
    .attr('y',height/2)
    .attr('pointer-events', 'none')
    .attr('text-anchor','middle')
    .attr('text-decoration','bold')
    .attr('font-size','{{font_size}}')
    .attr('font-family','{{font_family}}')
    .attr('fill','{{title_color}}')
    .text("{{title}}")
{{/has_title}}
      
});

// Returns a flattened hierarchy containing all leaf nodes under the root.
function classes(root) {
  var classes = [];

  function recurse(name, node) {
    if (node.children) node.children.forEach(function(child) { recurse(node.name, child); });
    else classes.push({packageName: name, className: node.name, value: node.size});
  }

  recurse(null, root);
  return {children: classes};
}

d3.select(self.frameElement).style("height", diameter + "px");

</script>