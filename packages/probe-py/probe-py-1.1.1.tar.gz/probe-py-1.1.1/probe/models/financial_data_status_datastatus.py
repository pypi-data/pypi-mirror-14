# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class FinancialDataStatusDatastatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        FinancialDataStatusDatastatus - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'last_updated': 'date',
            'last_fin_year_end': 'date'
        }

        self.attribute_map = {
            'last_updated': 'last_updated',
            'last_fin_year_end': 'last_fin_year_end'
        }

        self._last_updated = None
        self._last_fin_year_end = None

    @property
    def last_updated(self):
        """
        Gets the last_updated of this FinancialDataStatusDatastatus.
        Date when the company was last probed

        :return: The last_updated of this FinancialDataStatusDatastatus.
        :rtype: date
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """
        Sets the last_updated of this FinancialDataStatusDatastatus.
        Date when the company was last probed

        :param last_updated: The last_updated of this FinancialDataStatusDatastatus.
        :type: date
        """
        self._last_updated = last_updated

    @property
    def last_fin_year_end(self):
        """
        Gets the last_fin_year_end of this FinancialDataStatusDatastatus.
        Date of the last balance sheet year-end available

        :return: The last_fin_year_end of this FinancialDataStatusDatastatus.
        :rtype: date
        """
        return self._last_fin_year_end

    @last_fin_year_end.setter
    def last_fin_year_end(self, last_fin_year_end):
        """
        Sets the last_fin_year_end of this FinancialDataStatusDatastatus.
        Date of the last balance sheet year-end available

        :param last_fin_year_end: The last_fin_year_end of this FinancialDataStatusDatastatus.
        :type: date
        """
        self._last_fin_year_end = last_fin_year_end

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

