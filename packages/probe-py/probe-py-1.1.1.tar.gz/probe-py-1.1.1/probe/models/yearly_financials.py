# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class YearlyFinancials(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        YearlyFinancials - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'year': 'date',
            'nature': 'str',
            'stated_on': 'date',
            'capital_wip': 'float',
            'cash_and_bank_balances': 'float',
            'investments': 'float',
            'inventories': 'float',
            'net_fixed_assets': 'float',
            'other_assets': 'float',
            'total_assets': 'float',
            'trade_receivables': 'float',
            'share_capital': 'float',
            'reserves_and_surplus': 'float',
            'others': 'float',
            'long_term_borrowings': 'float',
            'other_current_liabilities_and_provisions': 'float',
            'other_long_term_liabilities_and_provisions': 'float',
            'trade_payables': 'float',
            'short_term_borrowings': 'float',
            'total_equity': 'float',
            'total_equity_and_liabilities': 'float',
            'depreciation': 'float',
            'exceptional_item_before_tax': 'float',
            'income_tax': 'float',
            'interest': 'float',
            'net_income': 'float',
            'operating_cost': 'float',
            'operating_profit': 'float',
            'other_income': 'float',
            'profit_before_interest_and_tax': 'float',
            'profit_before_tax': 'float',
            'revenue': 'float'
        }

        self.attribute_map = {
            'year': 'year',
            'nature': 'nature',
            'stated_on': 'stated_on',
            'capital_wip': 'capital_wip',
            'cash_and_bank_balances': 'cash_and_bank_balances',
            'investments': 'investments',
            'inventories': 'inventories',
            'net_fixed_assets': 'net_fixed_assets',
            'other_assets': 'other_assets',
            'total_assets': 'total_assets',
            'trade_receivables': 'trade_receivables',
            'share_capital': 'share_capital',
            'reserves_and_surplus': 'reserves_and_surplus',
            'others': 'others',
            'long_term_borrowings': 'long_term_borrowings',
            'other_current_liabilities_and_provisions': 'other_current_liabilities_and_provisions',
            'other_long_term_liabilities_and_provisions': 'other_long_term_liabilities_and_provisions',
            'trade_payables': 'trade_payables',
            'short_term_borrowings': 'short_term_borrowings',
            'total_equity': 'total_equity',
            'total_equity_and_liabilities': 'total_equity_and_liabilities',
            'depreciation': 'depreciation',
            'exceptional_item_before_tax': 'exceptional_item_before_tax',
            'income_tax': 'income_tax',
            'interest': 'interest',
            'net_income': 'net_income',
            'operating_cost': 'operating_cost',
            'operating_profit': 'operating_profit',
            'other_income': 'other_income',
            'profit_before_interest_and_tax': 'profit_before_interest_and_tax',
            'profit_before_tax': 'profit_before_tax',
            'revenue': 'revenue'
        }

        self._year = None
        self._nature = None
        self._stated_on = None
        self._capital_wip = None
        self._cash_and_bank_balances = None
        self._investments = None
        self._inventories = None
        self._net_fixed_assets = None
        self._other_assets = None
        self._total_assets = None
        self._trade_receivables = None
        self._share_capital = None
        self._reserves_and_surplus = None
        self._others = None
        self._long_term_borrowings = None
        self._other_current_liabilities_and_provisions = None
        self._other_long_term_liabilities_and_provisions = None
        self._trade_payables = None
        self._short_term_borrowings = None
        self._total_equity = None
        self._total_equity_and_liabilities = None
        self._depreciation = None
        self._exceptional_item_before_tax = None
        self._income_tax = None
        self._interest = None
        self._net_income = None
        self._operating_cost = None
        self._operating_profit = None
        self._other_income = None
        self._profit_before_interest_and_tax = None
        self._profit_before_tax = None
        self._revenue = None

    @property
    def year(self):
        """
        Gets the year of this YearlyFinancials.
        Year-end of the balancesheet

        :return: The year of this YearlyFinancials.
        :rtype: date
        """
        return self._year

    @year.setter
    def year(self, year):
        """
        Sets the year of this YearlyFinancials.
        Year-end of the balancesheet

        :param year: The year of this YearlyFinancials.
        :type: date
        """
        self._year = year

    @property
    def nature(self):
        """
        Gets the nature of this YearlyFinancials.
        Nature of the balancesheet

        :return: The nature of this YearlyFinancials.
        :rtype: str
        """
        return self._nature

    @nature.setter
    def nature(self, nature):
        """
        Sets the nature of this YearlyFinancials.
        Nature of the balancesheet

        :param nature: The nature of this YearlyFinancials.
        :type: str
        """
        allowed_values = ["STANDALONE"]
        if nature not in allowed_values:
            raise ValueError(
                "Invalid value for `nature`, must be one of {0}"
                .format(allowed_values)
            )
        self._nature = nature

    @property
    def stated_on(self):
        """
        Gets the stated_on of this YearlyFinancials.
        Balancesheet stated on date

        :return: The stated_on of this YearlyFinancials.
        :rtype: date
        """
        return self._stated_on

    @stated_on.setter
    def stated_on(self, stated_on):
        """
        Sets the stated_on of this YearlyFinancials.
        Balancesheet stated on date

        :param stated_on: The stated_on of this YearlyFinancials.
        :type: date
        """
        self._stated_on = stated_on

    @property
    def capital_wip(self):
        """
        Gets the capital_wip of this YearlyFinancials.
        Capital work in progress

        :return: The capital_wip of this YearlyFinancials.
        :rtype: float
        """
        return self._capital_wip

    @capital_wip.setter
    def capital_wip(self, capital_wip):
        """
        Sets the capital_wip of this YearlyFinancials.
        Capital work in progress

        :param capital_wip: The capital_wip of this YearlyFinancials.
        :type: float
        """
        self._capital_wip = capital_wip

    @property
    def cash_and_bank_balances(self):
        """
        Gets the cash_and_bank_balances of this YearlyFinancials.


        :return: The cash_and_bank_balances of this YearlyFinancials.
        :rtype: float
        """
        return self._cash_and_bank_balances

    @cash_and_bank_balances.setter
    def cash_and_bank_balances(self, cash_and_bank_balances):
        """
        Sets the cash_and_bank_balances of this YearlyFinancials.


        :param cash_and_bank_balances: The cash_and_bank_balances of this YearlyFinancials.
        :type: float
        """
        self._cash_and_bank_balances = cash_and_bank_balances

    @property
    def investments(self):
        """
        Gets the investments of this YearlyFinancials.


        :return: The investments of this YearlyFinancials.
        :rtype: float
        """
        return self._investments

    @investments.setter
    def investments(self, investments):
        """
        Sets the investments of this YearlyFinancials.


        :param investments: The investments of this YearlyFinancials.
        :type: float
        """
        self._investments = investments

    @property
    def inventories(self):
        """
        Gets the inventories of this YearlyFinancials.


        :return: The inventories of this YearlyFinancials.
        :rtype: float
        """
        return self._inventories

    @inventories.setter
    def inventories(self, inventories):
        """
        Sets the inventories of this YearlyFinancials.


        :param inventories: The inventories of this YearlyFinancials.
        :type: float
        """
        self._inventories = inventories

    @property
    def net_fixed_assets(self):
        """
        Gets the net_fixed_assets of this YearlyFinancials.


        :return: The net_fixed_assets of this YearlyFinancials.
        :rtype: float
        """
        return self._net_fixed_assets

    @net_fixed_assets.setter
    def net_fixed_assets(self, net_fixed_assets):
        """
        Sets the net_fixed_assets of this YearlyFinancials.


        :param net_fixed_assets: The net_fixed_assets of this YearlyFinancials.
        :type: float
        """
        self._net_fixed_assets = net_fixed_assets

    @property
    def other_assets(self):
        """
        Gets the other_assets of this YearlyFinancials.


        :return: The other_assets of this YearlyFinancials.
        :rtype: float
        """
        return self._other_assets

    @other_assets.setter
    def other_assets(self, other_assets):
        """
        Sets the other_assets of this YearlyFinancials.


        :param other_assets: The other_assets of this YearlyFinancials.
        :type: float
        """
        self._other_assets = other_assets

    @property
    def total_assets(self):
        """
        Gets the total_assets of this YearlyFinancials.


        :return: The total_assets of this YearlyFinancials.
        :rtype: float
        """
        return self._total_assets

    @total_assets.setter
    def total_assets(self, total_assets):
        """
        Sets the total_assets of this YearlyFinancials.


        :param total_assets: The total_assets of this YearlyFinancials.
        :type: float
        """
        self._total_assets = total_assets

    @property
    def trade_receivables(self):
        """
        Gets the trade_receivables of this YearlyFinancials.


        :return: The trade_receivables of this YearlyFinancials.
        :rtype: float
        """
        return self._trade_receivables

    @trade_receivables.setter
    def trade_receivables(self, trade_receivables):
        """
        Sets the trade_receivables of this YearlyFinancials.


        :param trade_receivables: The trade_receivables of this YearlyFinancials.
        :type: float
        """
        self._trade_receivables = trade_receivables

    @property
    def share_capital(self):
        """
        Gets the share_capital of this YearlyFinancials.


        :return: The share_capital of this YearlyFinancials.
        :rtype: float
        """
        return self._share_capital

    @share_capital.setter
    def share_capital(self, share_capital):
        """
        Sets the share_capital of this YearlyFinancials.


        :param share_capital: The share_capital of this YearlyFinancials.
        :type: float
        """
        self._share_capital = share_capital

    @property
    def reserves_and_surplus(self):
        """
        Gets the reserves_and_surplus of this YearlyFinancials.


        :return: The reserves_and_surplus of this YearlyFinancials.
        :rtype: float
        """
        return self._reserves_and_surplus

    @reserves_and_surplus.setter
    def reserves_and_surplus(self, reserves_and_surplus):
        """
        Sets the reserves_and_surplus of this YearlyFinancials.


        :param reserves_and_surplus: The reserves_and_surplus of this YearlyFinancials.
        :type: float
        """
        self._reserves_and_surplus = reserves_and_surplus

    @property
    def others(self):
        """
        Gets the others of this YearlyFinancials.


        :return: The others of this YearlyFinancials.
        :rtype: float
        """
        return self._others

    @others.setter
    def others(self, others):
        """
        Sets the others of this YearlyFinancials.


        :param others: The others of this YearlyFinancials.
        :type: float
        """
        self._others = others

    @property
    def long_term_borrowings(self):
        """
        Gets the long_term_borrowings of this YearlyFinancials.


        :return: The long_term_borrowings of this YearlyFinancials.
        :rtype: float
        """
        return self._long_term_borrowings

    @long_term_borrowings.setter
    def long_term_borrowings(self, long_term_borrowings):
        """
        Sets the long_term_borrowings of this YearlyFinancials.


        :param long_term_borrowings: The long_term_borrowings of this YearlyFinancials.
        :type: float
        """
        self._long_term_borrowings = long_term_borrowings

    @property
    def other_current_liabilities_and_provisions(self):
        """
        Gets the other_current_liabilities_and_provisions of this YearlyFinancials.


        :return: The other_current_liabilities_and_provisions of this YearlyFinancials.
        :rtype: float
        """
        return self._other_current_liabilities_and_provisions

    @other_current_liabilities_and_provisions.setter
    def other_current_liabilities_and_provisions(self, other_current_liabilities_and_provisions):
        """
        Sets the other_current_liabilities_and_provisions of this YearlyFinancials.


        :param other_current_liabilities_and_provisions: The other_current_liabilities_and_provisions of this YearlyFinancials.
        :type: float
        """
        self._other_current_liabilities_and_provisions = other_current_liabilities_and_provisions

    @property
    def other_long_term_liabilities_and_provisions(self):
        """
        Gets the other_long_term_liabilities_and_provisions of this YearlyFinancials.


        :return: The other_long_term_liabilities_and_provisions of this YearlyFinancials.
        :rtype: float
        """
        return self._other_long_term_liabilities_and_provisions

    @other_long_term_liabilities_and_provisions.setter
    def other_long_term_liabilities_and_provisions(self, other_long_term_liabilities_and_provisions):
        """
        Sets the other_long_term_liabilities_and_provisions of this YearlyFinancials.


        :param other_long_term_liabilities_and_provisions: The other_long_term_liabilities_and_provisions of this YearlyFinancials.
        :type: float
        """
        self._other_long_term_liabilities_and_provisions = other_long_term_liabilities_and_provisions

    @property
    def trade_payables(self):
        """
        Gets the trade_payables of this YearlyFinancials.


        :return: The trade_payables of this YearlyFinancials.
        :rtype: float
        """
        return self._trade_payables

    @trade_payables.setter
    def trade_payables(self, trade_payables):
        """
        Sets the trade_payables of this YearlyFinancials.


        :param trade_payables: The trade_payables of this YearlyFinancials.
        :type: float
        """
        self._trade_payables = trade_payables

    @property
    def short_term_borrowings(self):
        """
        Gets the short_term_borrowings of this YearlyFinancials.


        :return: The short_term_borrowings of this YearlyFinancials.
        :rtype: float
        """
        return self._short_term_borrowings

    @short_term_borrowings.setter
    def short_term_borrowings(self, short_term_borrowings):
        """
        Sets the short_term_borrowings of this YearlyFinancials.


        :param short_term_borrowings: The short_term_borrowings of this YearlyFinancials.
        :type: float
        """
        self._short_term_borrowings = short_term_borrowings

    @property
    def total_equity(self):
        """
        Gets the total_equity of this YearlyFinancials.


        :return: The total_equity of this YearlyFinancials.
        :rtype: float
        """
        return self._total_equity

    @total_equity.setter
    def total_equity(self, total_equity):
        """
        Sets the total_equity of this YearlyFinancials.


        :param total_equity: The total_equity of this YearlyFinancials.
        :type: float
        """
        self._total_equity = total_equity

    @property
    def total_equity_and_liabilities(self):
        """
        Gets the total_equity_and_liabilities of this YearlyFinancials.


        :return: The total_equity_and_liabilities of this YearlyFinancials.
        :rtype: float
        """
        return self._total_equity_and_liabilities

    @total_equity_and_liabilities.setter
    def total_equity_and_liabilities(self, total_equity_and_liabilities):
        """
        Sets the total_equity_and_liabilities of this YearlyFinancials.


        :param total_equity_and_liabilities: The total_equity_and_liabilities of this YearlyFinancials.
        :type: float
        """
        self._total_equity_and_liabilities = total_equity_and_liabilities

    @property
    def depreciation(self):
        """
        Gets the depreciation of this YearlyFinancials.


        :return: The depreciation of this YearlyFinancials.
        :rtype: float
        """
        return self._depreciation

    @depreciation.setter
    def depreciation(self, depreciation):
        """
        Sets the depreciation of this YearlyFinancials.


        :param depreciation: The depreciation of this YearlyFinancials.
        :type: float
        """
        self._depreciation = depreciation

    @property
    def exceptional_item_before_tax(self):
        """
        Gets the exceptional_item_before_tax of this YearlyFinancials.


        :return: The exceptional_item_before_tax of this YearlyFinancials.
        :rtype: float
        """
        return self._exceptional_item_before_tax

    @exceptional_item_before_tax.setter
    def exceptional_item_before_tax(self, exceptional_item_before_tax):
        """
        Sets the exceptional_item_before_tax of this YearlyFinancials.


        :param exceptional_item_before_tax: The exceptional_item_before_tax of this YearlyFinancials.
        :type: float
        """
        self._exceptional_item_before_tax = exceptional_item_before_tax

    @property
    def income_tax(self):
        """
        Gets the income_tax of this YearlyFinancials.


        :return: The income_tax of this YearlyFinancials.
        :rtype: float
        """
        return self._income_tax

    @income_tax.setter
    def income_tax(self, income_tax):
        """
        Sets the income_tax of this YearlyFinancials.


        :param income_tax: The income_tax of this YearlyFinancials.
        :type: float
        """
        self._income_tax = income_tax

    @property
    def interest(self):
        """
        Gets the interest of this YearlyFinancials.


        :return: The interest of this YearlyFinancials.
        :rtype: float
        """
        return self._interest

    @interest.setter
    def interest(self, interest):
        """
        Sets the interest of this YearlyFinancials.


        :param interest: The interest of this YearlyFinancials.
        :type: float
        """
        self._interest = interest

    @property
    def net_income(self):
        """
        Gets the net_income of this YearlyFinancials.


        :return: The net_income of this YearlyFinancials.
        :rtype: float
        """
        return self._net_income

    @net_income.setter
    def net_income(self, net_income):
        """
        Sets the net_income of this YearlyFinancials.


        :param net_income: The net_income of this YearlyFinancials.
        :type: float
        """
        self._net_income = net_income

    @property
    def operating_cost(self):
        """
        Gets the operating_cost of this YearlyFinancials.


        :return: The operating_cost of this YearlyFinancials.
        :rtype: float
        """
        return self._operating_cost

    @operating_cost.setter
    def operating_cost(self, operating_cost):
        """
        Sets the operating_cost of this YearlyFinancials.


        :param operating_cost: The operating_cost of this YearlyFinancials.
        :type: float
        """
        self._operating_cost = operating_cost

    @property
    def operating_profit(self):
        """
        Gets the operating_profit of this YearlyFinancials.


        :return: The operating_profit of this YearlyFinancials.
        :rtype: float
        """
        return self._operating_profit

    @operating_profit.setter
    def operating_profit(self, operating_profit):
        """
        Sets the operating_profit of this YearlyFinancials.


        :param operating_profit: The operating_profit of this YearlyFinancials.
        :type: float
        """
        self._operating_profit = operating_profit

    @property
    def other_income(self):
        """
        Gets the other_income of this YearlyFinancials.


        :return: The other_income of this YearlyFinancials.
        :rtype: float
        """
        return self._other_income

    @other_income.setter
    def other_income(self, other_income):
        """
        Sets the other_income of this YearlyFinancials.


        :param other_income: The other_income of this YearlyFinancials.
        :type: float
        """
        self._other_income = other_income

    @property
    def profit_before_interest_and_tax(self):
        """
        Gets the profit_before_interest_and_tax of this YearlyFinancials.


        :return: The profit_before_interest_and_tax of this YearlyFinancials.
        :rtype: float
        """
        return self._profit_before_interest_and_tax

    @profit_before_interest_and_tax.setter
    def profit_before_interest_and_tax(self, profit_before_interest_and_tax):
        """
        Sets the profit_before_interest_and_tax of this YearlyFinancials.


        :param profit_before_interest_and_tax: The profit_before_interest_and_tax of this YearlyFinancials.
        :type: float
        """
        self._profit_before_interest_and_tax = profit_before_interest_and_tax

    @property
    def profit_before_tax(self):
        """
        Gets the profit_before_tax of this YearlyFinancials.


        :return: The profit_before_tax of this YearlyFinancials.
        :rtype: float
        """
        return self._profit_before_tax

    @profit_before_tax.setter
    def profit_before_tax(self, profit_before_tax):
        """
        Sets the profit_before_tax of this YearlyFinancials.


        :param profit_before_tax: The profit_before_tax of this YearlyFinancials.
        :type: float
        """
        self._profit_before_tax = profit_before_tax

    @property
    def revenue(self):
        """
        Gets the revenue of this YearlyFinancials.


        :return: The revenue of this YearlyFinancials.
        :rtype: float
        """
        return self._revenue

    @revenue.setter
    def revenue(self, revenue):
        """
        Sets the revenue of this YearlyFinancials.


        :param revenue: The revenue of this YearlyFinancials.
        :type: float
        """
        self._revenue = revenue

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

