# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class AuthorizedSignatory(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        AuthorizedSignatory - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'pan': 'str',
            'din': 'str',
            'designation': 'str',
            'date_of_birth': 'str',
            'age': 'str',
            'date_of_appointment': 'str',
            'date_of_appointment_for_current_designation': 'str',
            'date_of_cessation': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'pan': 'pan',
            'din': 'din',
            'designation': 'designation',
            'date_of_birth': 'date_of_birth',
            'age': 'age',
            'date_of_appointment': 'date_of_appointment',
            'date_of_appointment_for_current_designation': 'date_of_appointment_for_current_designation',
            'date_of_cessation': 'date_of_cessation'
        }

        self._name = None
        self._pan = None
        self._din = None
        self._designation = None
        self._date_of_birth = None
        self._age = None
        self._date_of_appointment = None
        self._date_of_appointment_for_current_designation = None
        self._date_of_cessation = None

    @property
    def name(self):
        """
        Gets the name of this AuthorizedSignatory.
        Name of the Authorized Signatory

        :return: The name of this AuthorizedSignatory.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AuthorizedSignatory.
        Name of the Authorized Signatory

        :param name: The name of this AuthorizedSignatory.
        :type: str
        """
        self._name = name

    @property
    def pan(self):
        """
        Gets the pan of this AuthorizedSignatory.
        PAN number of the Authorized Signatory

        :return: The pan of this AuthorizedSignatory.
        :rtype: str
        """
        return self._pan

    @pan.setter
    def pan(self, pan):
        """
        Sets the pan of this AuthorizedSignatory.
        PAN number of the Authorized Signatory

        :param pan: The pan of this AuthorizedSignatory.
        :type: str
        """
        self._pan = pan

    @property
    def din(self):
        """
        Gets the din of this AuthorizedSignatory.
        Director Identification Number (DIN) of the       Authorized Signatory

        :return: The din of this AuthorizedSignatory.
        :rtype: str
        """
        return self._din

    @din.setter
    def din(self, din):
        """
        Sets the din of this AuthorizedSignatory.
        Director Identification Number (DIN) of the       Authorized Signatory

        :param din: The din of this AuthorizedSignatory.
        :type: str
        """
        self._din = din

    @property
    def designation(self):
        """
        Gets the designation of this AuthorizedSignatory.
        Designation of the Autthorized Signatory

        :return: The designation of this AuthorizedSignatory.
        :rtype: str
        """
        return self._designation

    @designation.setter
    def designation(self, designation):
        """
        Sets the designation of this AuthorizedSignatory.
        Designation of the Autthorized Signatory

        :param designation: The designation of this AuthorizedSignatory.
        :type: str
        """
        self._designation = designation

    @property
    def date_of_birth(self):
        """
        Gets the date_of_birth of this AuthorizedSignatory.
        Date of Birth of the Authorized Signatory

        :return: The date_of_birth of this AuthorizedSignatory.
        :rtype: str
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """
        Sets the date_of_birth of this AuthorizedSignatory.
        Date of Birth of the Authorized Signatory

        :param date_of_birth: The date_of_birth of this AuthorizedSignatory.
        :type: str
        """
        self._date_of_birth = date_of_birth

    @property
    def age(self):
        """
        Gets the age of this AuthorizedSignatory.
        Age of the Authorized Signatory

        :return: The age of this AuthorizedSignatory.
        :rtype: str
        """
        return self._age

    @age.setter
    def age(self, age):
        """
        Sets the age of this AuthorizedSignatory.
        Age of the Authorized Signatory

        :param age: The age of this AuthorizedSignatory.
        :type: str
        """
        self._age = age

    @property
    def date_of_appointment(self):
        """
        Gets the date_of_appointment of this AuthorizedSignatory.


        :return: The date_of_appointment of this AuthorizedSignatory.
        :rtype: str
        """
        return self._date_of_appointment

    @date_of_appointment.setter
    def date_of_appointment(self, date_of_appointment):
        """
        Sets the date_of_appointment of this AuthorizedSignatory.


        :param date_of_appointment: The date_of_appointment of this AuthorizedSignatory.
        :type: str
        """
        self._date_of_appointment = date_of_appointment

    @property
    def date_of_appointment_for_current_designation(self):
        """
        Gets the date_of_appointment_for_current_designation of this AuthorizedSignatory.


        :return: The date_of_appointment_for_current_designation of this AuthorizedSignatory.
        :rtype: str
        """
        return self._date_of_appointment_for_current_designation

    @date_of_appointment_for_current_designation.setter
    def date_of_appointment_for_current_designation(self, date_of_appointment_for_current_designation):
        """
        Sets the date_of_appointment_for_current_designation of this AuthorizedSignatory.


        :param date_of_appointment_for_current_designation:
        The date_of_appointment_for_current_designation of this AuthorizedSignatory.
        :type: str
        """
        self._date_of_appointment_for_current_designation = date_of_appointment_for_current_designation

    @property
    def date_of_cessation(self):
        """
        Gets the date_of_cessation of this AuthorizedSignatory.


        :return: The date_of_cessation of this AuthorizedSignatory.
        :rtype: str
        """
        return self._date_of_cessation

    @date_of_cessation.setter
    def date_of_cessation(self, date_of_cessation):
        """
        Sets the date_of_cessation of this AuthorizedSignatory.


        :param date_of_cessation: The date_of_cessation of this AuthorizedSignatory.
        :type: str
        """
        self._date_of_cessation = date_of_cessation

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

