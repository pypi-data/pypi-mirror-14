- Global:
   workers: 2
   logging:
    level: info
    format: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    filename: False

# A simple TCP Server.
- TcpServer:
   port: 5151

# Parse the message using named regex patterns.
# The named groups will be put into corresponding fields in the data dictionary.
- RegexParser:
   field_extraction_patterns:
    - httpd_combined_access_log: '(?P<remote_ip>%{IP})\s+(?P<identd>\w+|-)\s+(?P<user>\w+|-)\s+\[(?P<datetime>\d+\/\w+\/\d+:\d+:\d+:\d+\s.\d+)\]\s+\"(?P<http_method>%{HTTPMETHOD}) (?P<uri>\S+) (?P<http_version>%{HTTPVERSION})\"\s+(?P<http_status>\d+)\s+(?P<bytes_send>\d+)\s+\"(?P<referer>[^"]*)\"\s+\"(?P<user_agent>[^"]*)\"'
   receivers:
    # Only messages that matched a regex will be send to this handler.
    - AddDateTime:
       filter: $(event_type) != 'Unknown'
    # Directly print out messages that did not match
    - StdOutSink:
       filter: $(event_type) == 'Unknown'

# Add a timestamp field.
- AddDateTime:
   format: '%Y-%m-%dT%H:%M:%S.%f'
   target_field: "timestamp"

# Add geo info based on the lookup_fields. The first field in <source_fields> that yields a result from geoip will be used.
- AddGeoInfo:
   geoip_dat_path: /usr/share/GeoIP/GeoLiteCity.dat
   source_fields: [x_forwarded_for, remote_ip]

- UserAgentParser:
   source_fields: user_agent

# Use this to store events in ES backend.
#- ElasticSearchSink:
#   nodes: ["localhost:9200"]
#   doc_id: $(timestamp)$(received_from)
#   store_interval_in_secs: 10

- StdOutSink:
   pretty_print: True