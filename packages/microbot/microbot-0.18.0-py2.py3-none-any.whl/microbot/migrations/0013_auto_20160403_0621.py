# -*- coding: utf-8 -*-
# Generated by Django 1.9.4 on 2016-04-03 11:21
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import microbot.models.bot


class Migration(migrations.Migration):

    dependencies = [
        ('microbot', '0012_auto_20160401_1550'),
    ]

    operations = [
        migrations.AlterField(
            model_name='bot',
            name='enabled',
            field=models.BooleanField(default=True, help_text='enable/disable bot wehbook.', verbose_name='Enable'),
        ),
        migrations.AlterField(
            model_name='bot',
            name='owner',
            field=models.ForeignKey(help_text='User who owns the bot.', on_delete=django.db.models.deletion.CASCADE, related_name='bots', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='bot',
            name='token',
            field=models.CharField(db_index=True, help_text='Set token provided by Telegram API.', max_length=100, validators=[microbot.models.bot.validate_token], verbose_name='Token'),
        ),
        migrations.AlterField(
            model_name='bot',
            name='user_api',
            field=models.OneToOneField(blank=True, help_text='Telegram API info. Automatically retrieved from Telegram.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bot', to='microbot.User', verbose_name='Bot User'),
        ),
        migrations.AlterField(
            model_name='chatstate',
            name='chat',
            field=models.OneToOneField(help_text='Chat identifier. Telegram API format.', on_delete=django.db.models.deletion.CASCADE, to='microbot.Chat', verbose_name='Chat'),
        ),
        migrations.AlterField(
            model_name='chatstate',
            name='state',
            field=models.ForeignKey(help_text='State related to the chat.', on_delete=django.db.models.deletion.CASCADE, related_name='chat', to='microbot.State', verbose_name='State'),
        ),
        migrations.AlterField(
            model_name='environmentvar',
            name='bot',
            field=models.ForeignKey(help_text='Bot which variable is attached.', on_delete=django.db.models.deletion.CASCADE, related_name='env_vars', to='microbot.Bot', verbose_name='Bot'),
        ),
        migrations.AlterField(
            model_name='environmentvar',
            name='key',
            field=models.CharField(help_text='Set the name of the variable', max_length=255, verbose_name='Key'),
        ),
        migrations.AlterField(
            model_name='environmentvar',
            name='value',
            field=models.CharField(help_text='Set the value of the variable', max_length=255, verbose_name='Value'),
        ),
        migrations.AlterField(
            model_name='handler',
            name='bot',
            field=models.ForeignKey(help_text='Bot which Handler is attached to.', on_delete=django.db.models.deletion.CASCADE, related_name='handlers', to='microbot.Bot', verbose_name='Bot'),
        ),
        migrations.AlterField(
            model_name='handler',
            name='enabled',
            field=models.BooleanField(default=True, help_text='enable/disable Handler.', verbose_name='Enable'),
        ),
        migrations.AlterField(
            model_name='handler',
            name='name',
            field=models.CharField(db_index=True, help_text='Set a name for the handler which helps you to remember it.', max_length=100, verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='handler',
            name='pattern',
            field=models.CharField(help_text='Regular expression the Handler will be triggered.', max_length=255, verbose_name='Pattern'),
        ),
        migrations.AlterField(
            model_name='handler',
            name='priority',
            field=models.IntegerField(default=0, help_text='Set priority execution. Higher value higher priority.', verbose_name='Priority'),
        ),
        migrations.AlterField(
            model_name='handler',
            name='request',
            field=models.OneToOneField(blank=True, help_text='Request the Handler processes.', null=True, on_delete=django.db.models.deletion.CASCADE, to='microbot.Request'),
        ),
        migrations.AlterField(
            model_name='handler',
            name='response',
            field=models.OneToOneField(help_text='Set how Handler responses.', on_delete=django.db.models.deletion.CASCADE, to='microbot.Response'),
        ),
        migrations.AlterField(
            model_name='handler',
            name='source_states',
            field=models.ManyToManyField(help_text='Bot states the Handler executes. Set none if any.', related_name='source_handlers', to='microbot.State', verbose_name='Source States'),
        ),
        migrations.AlterField(
            model_name='handler',
            name='target_state',
            field=models.ForeignKey(blank=True, help_text='Bot state it is set when Handler finishes.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='target_handlers', to='microbot.State', verbose_name='Target State'),
        ),
        migrations.AlterField(
            model_name='headerparam',
            name='key',
            field=models.CharField(help_text='Set the name of the parameter', max_length=255, verbose_name='Key'),
        ),
        migrations.AlterField(
            model_name='headerparam',
            name='request',
            field=models.ForeignKey(help_text='Request which this Url Parameter is attached to.', on_delete=django.db.models.deletion.CASCADE, related_name='header_parameters', to='microbot.Request', verbose_name='Request'),
        ),
        migrations.AlterField(
            model_name='headerparam',
            name='value_template',
            field=models.CharField(help_text='Set the value of the parameter. A jinja2 template.', max_length=255, verbose_name='Value template'),
        ),
        migrations.AlterField(
            model_name='hook',
            name='bot',
            field=models.ForeignKey(help_text='Bot which Hook is attached.', on_delete=django.db.models.deletion.CASCADE, related_name='hooks', to='microbot.Bot', verbose_name='Bot'),
        ),
        migrations.AlterField(
            model_name='hook',
            name='enabled',
            field=models.BooleanField(default=True, help_text=b'enable/disbale Hook.', verbose_name='Enable'),
        ),
        migrations.AlterField(
            model_name='hook',
            name='key',
            field=models.CharField(db_index=True, editable=False, help_text='Key generated to complete the Hoom url.', max_length=30, unique=True),
        ),
        migrations.AlterField(
            model_name='hook',
            name='name',
            field=models.CharField(db_index=True, help_text='Set a name for the hook which helps you to remember.', max_length=100, verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='hook',
            name='response',
            field=models.OneToOneField(help_text='Set how Hook responses.', on_delete=django.db.models.deletion.CASCADE, to='microbot.Response', verbose_name='Response'),
        ),
        migrations.AlterField(
            model_name='recipient',
            name='chat_id',
            field=models.BigIntegerField(db_index=True, help_text='Chat identifier provided by Telegram API.', verbose_name='Chat id'),
        ),
        migrations.AlterField(
            model_name='recipient',
            name='hook',
            field=models.ForeignKey(help_text='Hook which recipient is attached to.', on_delete=django.db.models.deletion.CASCADE, related_name='recipients', to='microbot.Hook', verbose_name='Recipient'),
        ),
        migrations.AlterField(
            model_name='recipient',
            name='name',
            field=models.CharField(db_index=True, help_text='Set name for recipient which helps you to remember it.', max_length=100, verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='request',
            name='data',
            field=models.TextField(blank=True, help_text='Set POST/PUT/PATCH data in json format', null=True, verbose_name='Data of the request'),
        ),
        migrations.AlterField(
            model_name='request',
            name='method',
            field=models.CharField(choices=[(b'Get', 'Get'), (b'Post', 'Post'), (b'Put', 'Put'), (b'Delete', 'Delete'), (b'Patch', 'Patch')], default=b'Get', help_text='Define Http method for the request', max_length=128, verbose_name='Method'),
        ),
        migrations.AlterField(
            model_name='request',
            name='url_template',
            field=models.CharField(help_text='Set the url to request. A jinja2 template.', max_length=255, verbose_name='Url template'),
        ),
        migrations.AlterField(
            model_name='response',
            name='keyboard_template',
            field=models.TextField(blank=True, help_text='Template to generate keyboard response. In jinja2.', null=True, verbose_name='Keyboard template'),
        ),
        migrations.AlterField(
            model_name='response',
            name='text_template',
            field=models.TextField(help_text='Template to generate text response. In jinja2.', verbose_name='Text template'),
        ),
        migrations.AlterField(
            model_name='state',
            name='bot',
            field=models.ForeignKey(help_text='Bot which state is attached to.', on_delete=django.db.models.deletion.CASCADE, related_name='states', to='microbot.Bot', verbose_name='Bot'),
        ),
        migrations.AlterField(
            model_name='state',
            name='name',
            field=models.CharField(db_index=True, help_text='Set name to state which helps you to remember it.', max_length=255, verbose_name='State name'),
        ),
        migrations.AlterField(
            model_name='urlparam',
            name='key',
            field=models.CharField(help_text='Set the name of the parameter', max_length=255, verbose_name='Key'),
        ),
        migrations.AlterField(
            model_name='urlparam',
            name='request',
            field=models.ForeignKey(help_text='Request which this Url Parameter is attached to.', on_delete=django.db.models.deletion.CASCADE, related_name='url_parameters', to='microbot.Request', verbose_name='Request'),
        ),
        migrations.AlterField(
            model_name='urlparam',
            name='value_template',
            field=models.CharField(help_text='Set the value of the parameter. A jinja2 template.', max_length=255, verbose_name='Value template'),
        ),
    ]
