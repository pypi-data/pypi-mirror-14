# =============================================
# Processors for reads procesing - Prinseq-lite
# =============================================
#
# Processors for NGS reads filtering/trimming
---

- name: filtering:prinseq-lite-20.4:single-end
  version: 1.0.9
  label: Filter single-end NGS reads (Prinseq-lite-20.4)
  type: data:reads:fastq:single:prinseq
  flow_collection: sample
  category: analyses
  persistence: CACHED
  description: >
    PRINSEQ is a tool that generates summary statistics of sequence and quality data and that is used to filter, reformat and trim next-generation sequence data.
  input:
    - name: reads
      label: Reads
      type: data:reads:fastq:single
      required: true
    - name: trimming
      label: Trimming options
      group:
      - name: left_trim
        label: Trim bases from 5'-end
        type: basic:integer
        default: 0
      - name: right_trim
        label: Trim bases from 3'-end
        type: basic:integer
        default: 0
      - name: trim_qual_left
        label: Threshold score from 5'-end trimming (Phred value)
        type: basic:integer
        default: 5
      - name: trim_qual_right
        label: Threshold score from 3'-end trimming (Phred value)
        type: basic:integer
        default: 5
    - name: filtering
      label: Filtering options
      group:
      - name: min_len
        label: Filter sequences shorter than
        type: basic:integer
        default: 30
      - name: max_len
        label: Filter sequences longer than
        type: basic:integer
        default: 100000
      - name: min_qual_mean
        label: Threshold mean sequence quality score
        type: basic:integer
        default: 10
      - name: min_qual_score
        label: Threshold single base quality score
        type: basic:integer
        default: 5
  output:
    - name: fastq
      label: Reads file
      type: basic:file
    - name: number
      label: Number of reads
      type: basic:integer
    - name: bases
      label: Number of bases
      type: basic:string
    - name: fastqc_url
      label: Quality control with FastQC
      type: basic:url:view
    - name: fastqc_archive
      label: Download FastQC archive
      type: basic:file
  static:
    - name: name
      label: Name
      type: basic:string
      default: 'Filtered reads ({{ reads.fastq.file|default:"?" }})'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ["Filtered NGS reads", "Prinseq-lite"]
      placeholder: new tag
    - name: description
      label: Description
      type: basic:text
      default: 'Description of {{ reads.fastq.file|default:"?" }}.'
  var:
    - name: notes
      label: Notes
      type: basic:text
  run:
    runtime: polyglot
    bash: |
      echo "Reads processing"
      NAME=`basename '{{ reads.fastq.file }}' .fastq.gz`
      re-progress 0.1

      gzip -cd {{ reads.fastq.file }} > "${NAME}.fastq"
      re-progress 0.2

      prinseq-lite.pl -fastq "${NAME}.fastq" -out_good "${NAME}_prinseq" -out_bad "${NAME}_bad" -trim_left "{{trimming.left_trim}}" -trim_right "{{trimming.right_trim}}" -trim_qual_left "{{trimming.trim_qual_left}}" -trim_qual_right "{{trimming.trim_qual_right}}" -max_len "{{filtering.max_len}}" -min_len "{{filtering.min_len}}" -min_qual_score "{{filtering.min_qual_score}}" -min_qual_mean "{{filtering.min_qual_mean}}" > /dev/null
      re-checkrc "Failed while processing with PRINSEQ."
      re-progress 0.6

      gzip -c -n "${NAME}_prinseq.fastq" > "${NAME}.fastq.gz"
      re-save-file fastq $NAME.fastq.gz
      re-progress 0.8

      echo "Postprocessing FastQC..."
      # http://www.bioinformatics.babraham.ac.uk/projects/fastqc/
      mkdir "fastqc" && fastqc "${NAME}.fastq.gz" --extract --outdir="fastqc" >&2
      re-checkrc "Failed while processing with FastQC."
      re-progress 0.9

      BASES=$(awk '/^Sequence length/ {print $3}' fastqc/*_fastqc/fastqc_data.txt)
      NUMBER=`sed -ne 's/^Total Sequences\s*\([0-9\.]\+\)\s*$/\1/pi' fastqc/*_fastqc/fastqc_data.txt | head -n 1`
      FASTQC_URL="{\"url\":\"fastqc/${NAME}_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${NAME}_fastqc\"]}"
      mv "fastqc/${NAME}_fastqc.zip" .
      re-progress 0.95

      #detect and if old Illumina encoding is found transform to new format
      fq_path="./fastqc/""$NAME""_fastqc/fastqc_data.txt"
      E="$(grep "Encoding" "$fq_path" |cut -f2 -)"
      if [ "$E" = "Illumina 1.3" ] || [ "$E" = "Illumina 1.5" ]; then
        sed -i -e '4~4y/@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghi/!"#$%&'\''()*+,-.\/0123456789:;<=>?@ABCDEFGHIJ/' "${NAME}.fastq"
        gzip -c "${NAME}.fastq" > "${NAME}.fastq.gz"
      fi

      re-save-file fastqc_archive ${NAME}_fastqc.zip
      re-save number $NUMBER
      re-save bases "\"$BASES\""
      re-save fastqc_url $FASTQC_URL


- name: filtering:prinseq-lite-20.4:paired-end
  version: 1.0.9
  label: Filter paired-end NGS reads (Prinseq-lite-20.4)
  type: data:reads:fastq:paired:prinseq
  category: analyses
  flow_collection: sample
  persistence: CACHED
  description: >
    PRINSEQ is a tool that generates summary statistics of sequence and quality data and that is used to filter, reformat and trim next-generation sequence data.
  input:
    - name: reads
      label: Reads
      type: data:reads:fastq:paired
      required: true
    - name: trimming
      label: Trimming options
      group:
      - name: left_trim
        label: Trim bases from 5'-end
        type: basic:integer
        default: 0
      - name: right_trim
        label: Trim bases from 3'-end
        type: basic:integer
        default: 0
      - name: trim_qual_left
        label: Threshold score from 5'-end trimming (Phred value)
        type: basic:integer
        default: 5
      - name: trim_qual_right
        label: Threshold score from 3'-end trimming (Phred value)
        type: basic:integer
        default: 5
    - name: filtering
      label: Filtering options
      group:
      - name: min_len
        label: Filter sequences shorter than
        type: basic:integer
        default: 30
      - name: max_len
        label: Filter sequences longer than
        type: basic:integer
        default: 100000
      - name: min_qual_mean
        label: Threshold mean sequence quality score
        type: basic:integer
        default: 10
      - name: min_qual_score
        label: Threshold single base quality score
        type: basic:integer
        default: 5
  output:
    - name: fastq
      label: Reads file (mate 1)
      type: basic:file
    - name: fastq2
      label: Reads file (mate 2)
      type: basic:file
    - name: number
      label: Number of reads
      type: basic:integer
    - name: bases
      label: Number of bases
      type: basic:string
    - name: fastqc_url
      label: Quality control with FastQC (Upstream)
      type: basic:url:view
    - name: fastqc_url2
      label: Quality control with FastQC (Downstream)
      type: basic:url:view
    - name: fastqc_archive
      label: Download FastQC archive (Upstream)
      type: basic:file
    - name: fastqc_archive2
      label: Download FastQC archive (Downstream)
      type: basic:file
  static:
    - name: name
      label: Name
      type: basic:string
      default: 'Filtered reads ({{ reads.fastq.file|default:"?" }})'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ["Filtered NGS reads", "Prinseq-lite"]
      placeholder: new tag
    - name: description
      label: Description
      type: basic:text
      default: 'Description of {{ reads.fastq.file|default:"?" }}.'
  var:
    - name: notes
      label: Notes
      type: basic:text
  run:
    runtime: polyglot
    bash: |
      echo "Reads processing"

      NAME1=`basename '{{ reads.fastq.file }}' .fastq.gz`
      NAME2=`basename '{{ reads.fastq2.file }}' .fastq.gz`
      gzip -cd {{ reads.fastq.file }} > "${NAME1}.fastq"
      gzip -cd {{ reads.fastq2.file }} > "${NAME2}.fastq"
      re-progress 0.2


      ## sort paired-end data
      paste - - - - < "${NAME1}.fastq" | sort -k1,1 -t " " | tr "\t" "\n" > "${NAME1}"_sorted_1.fastq
      paste - - - - < "${NAME2}.fastq" | sort -k1,1 -t " " | tr "\t" "\n" > "${NAME2}"_sorted_2.fastq
      re-progress 0.4

      prinseq-lite.pl -fastq "${NAME1}"_sorted_1.fastq -fastq2 "${NAME2}"_sorted_2.fastq -out_good "${NAME1}_prinseq" -out_bad "${NAME1}_bad" -trim_left "{{trimming.left_trim}}" -trim_right "{{trimming.right_trim}}" -trim_qual_left "{{trimming.trim_qual_left}}" -trim_qual_right "{{trimming.trim_qual_right}}" -max_len "{{filtering.max_len}}" -min_len "{{filtering.min_len}}" -min_qual_score "{{filtering.min_qual_score}}" -min_qual_mean "{{filtering.min_qual_mean}}" > /dev/null
      re-checkrc "Failed while processing with PRINSEQ."
      re-progress 0.7

      gzip -c -n "${NAME1}_prinseq_1.fastq" > "${NAME1}.fastq.gz"
      gzip -c -n "${NAME1}_prinseq_2.fastq" > "${NAME2}.fastq.gz"
      re-save-file fastq ${NAME1}.fastq.gz
      re-save-file fastq2 ${NAME2}.fastq.gz
      re-progress 0.8

      echo "Postprocessing FastQC..."
      # http://www.bioinformatics.babraham.ac.uk/projects/fastqc/
      mkdir "fastqc" && fastqc "${NAME1}.fastq.gz" "${NAME2}.fastq.gz" --extract --outdir="fastqc" >&2
      re-checkrc "Failed while processing with FastQC."
      re-progress 0.9

      FASTQC_URL="{\"name\":\"View\",\"url\":\"fastqc/${NAME1}_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${NAME1}_fastqc\"]}"
      FASTQC_URL2="{\"name\":\"View\",\"url\":\"fastqc/${NAME2}_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${NAME2}_fastqc\"]}"
      mv "fastqc/${NAME1}_fastqc.zip" .
      mv "fastqc/${NAME2}_fastqc.zip" .

      BASES=$(awk '/^Sequence length/ {print $3}' fastqc/*_fastqc/fastqc_data.txt | sed -n -e 'H;${x;s/\n/, /g;s/^,//;p;}')
      NUMBER=`sed -ne 's/^Total Sequences\s*\([0-9\.]\+\)\s*$/\1/pi' fastqc/*_fastqc/fastqc_data.txt | head -n 1`

      fq_path="./fastqc/""$NAME1""_fastqc/fastqc_data.txt"
      E="$(grep "Encoding" "$fq_path" |cut -f2 -)"
      if [ "$E" = "Illumina 1.3" ] || [ "$E" = "Illumina 1.5" ]; then
        sed -i -e '4~4y/@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghi/!"#$%&'\''()*+,-.\/0123456789:;<=>?@ABCDEFGHIJ/' "${NAME1}.fastq"
        gzip -c "${NAME1}.fastq" > "${NAME1}.fastq.gz"
        sed -i -e '4~4y/@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghi/!"#$%&'\''()*+,-.\/0123456789:;<=>?@ABCDEFGHIJ/' "${NAME2}.fastq"
        gzip -c "${NAME2}.fastq" > "${NAME2}.fastq.gz"
      fi

      re-save-file fastqc_archive ${NAME1}_fastqc.zip
      re-save-file fastqc_archive2 ${NAME2}_fastqc.zip
      re-save number $NUMBER
      re-save bases "\"$BASES\""
      re-save fastqc_url $FASTQC_URL
      re-save fastqc_url2 $FASTQC_URL2
