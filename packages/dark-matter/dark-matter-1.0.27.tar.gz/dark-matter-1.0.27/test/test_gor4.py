from unittest import TestCase

from dark.gor4 import GOR4


class TestGOR4(TestCase):
    """
    Tests for the L{dark.gor4.GOR4} class.
    """

    def testApoamicyanin(self):
        """
        Test the GOR IV secondary structure prediction a fragment of the
        APOAMICYANIN sequence from the GOR IV reference database.
        """
        gor4 = GOR4()
        seq = 'DKATIPSESPFAAAEVADGAIVVDIAKMKYETPELHVKVGDTVTWINREA'
        result = gor4.predict(seq)

        expected = 'CCCCCCCCCCHHHHHHHCCHHHHHHHHHHHCCCCEEEEECCEEEEEEEEC'
        self.assertEqual(expected, result['predictions'])

        # Below are the probabilities we get from running the command-line
        # version of the GOR IV code (with the printout function adjusted
        # to print 7 decimal places).
        expected = (
            (0.0000000, 0.0039858, 0.9960142),
            (0.0000000, 0.0278830, 0.9721170),
            (0.0000001, 0.0272379, 0.9727620),
            (0.0000012, 0.1169491, 0.8830497),
            (0.0001399, 0.0341633, 0.9656968),
            (0.0017102, 0.0208701, 0.9774197),
            (0.0105059, 0.0851670, 0.9043271),
            (0.0555277, 0.0633068, 0.8811655),
            (0.1095295, 0.0324757, 0.8579948),
            (0.4153768, 0.0191681, 0.5654551),
            (0.5536253, 0.1005364, 0.3458383),
            (0.6340716, 0.1182708, 0.2476575),
            (0.7778620, 0.0700642, 0.1520738),
            (0.8236157, 0.0761598, 0.1002245),
            (0.7757733, 0.0764664, 0.1477603),
            (0.7078716, 0.0882713, 0.2038570),
            (0.6208869, 0.0486473, 0.3304658),
            (0.3671274, 0.0182623, 0.6146103),
            (0.4309160, 0.0364063, 0.5326777),
            (0.5071787, 0.1901496, 0.3026716),
            (0.4161928, 0.4818794, 0.1019277),
            (0.4236001, 0.5074177, 0.0689823),
            (0.5267394, 0.4115629, 0.0616978),
            (0.6260716, 0.2516718, 0.1222566),
            (0.6345364, 0.2743220, 0.0911416),
            (0.6292611, 0.2126158, 0.1581231),
            (0.5834816, 0.0938588, 0.3226597),
            (0.5517939, 0.0403667, 0.4078394),
            (0.4721551, 0.0882974, 0.4395475),
            (0.4599132, 0.0910693, 0.4490175),
            (0.1938535, 0.0556542, 0.7504924),
            (0.0518396, 0.0844042, 0.8637562),
            (0.1642072, 0.0529393, 0.7828534),
            (0.2086895, 0.3441093, 0.4472012),
            (0.1385842, 0.6654806, 0.1959352),
            (0.0953126, 0.6765780, 0.2281094),
            (0.0322423, 0.9027448, 0.0650129),
            (0.0787300, 0.6267382, 0.2945318),
            (0.0786274, 0.5764974, 0.3448752),
            (0.0711691, 0.1778753, 0.7509556),
            (0.0765578, 0.1883003, 0.7351419),
            (0.1004260, 0.7001448, 0.1994292),
            (0.0736500, 0.8145193, 0.1118307),
            (0.0321693, 0.8462602, 0.1215706),
            (0.0968932, 0.6217796, 0.2813272),
            (0.0629602, 0.7199594, 0.2170804),
            (0.0186437, 0.5259689, 0.4553874),
            (0.0009734, 0.5355605, 0.4634661),
            (0.0000139, 0.8630118, 0.1369742),
            (0.0000002, 0.9903608, 0.0096390))

        for e, r in zip(expected, result['probabilities']):
            self.assertAlmostEqual(e[0], r[0])
            self.assertAlmostEqual(e[1], r[1])
            self.assertAlmostEqual(e[2], r[2])

    def testAldoseReductase(self):
        """
        Test a fragment of the ALDOSE REDUCTASE sequence from the GOR IV
        reference database.
        """
        gor4 = GOR4()
        seq = 'LDYLDLYLIHWPTGFKPGKEFFPLDESGNVVPSDTNILDTWAAMEELVDE'
        expected = 'CCCCCCEEECCCCCCCCCCCEECCCCCCCCCCCCCCHHHHHHHHHHHHCC'
        result = gor4.predict(seq)
        self.assertEqual(expected, result['predictions'])

        # Below are the probabilities we get from running the command-line
        # version of the GOR IV code (with the printout function adjusted
        # to print 7 decimal places).
        expected = (
            (0.0000043, 0.0255070, 0.9744887),
            (0.0000023, 0.0017093, 0.9982884),
            (0.0005209, 0.0183920, 0.9810871),
            (0.0023428, 0.0600081, 0.9376491),
            (0.0081088, 0.0699763, 0.9219149),
            (0.0280513, 0.3424225, 0.6295262),
            (0.0640334, 0.4848068, 0.4511598),
            (0.1170093, 0.6459708, 0.2370200),
            (0.2339378, 0.5249572, 0.2411050),
            (0.1472388, 0.2115624, 0.6411989),
            (0.0461279, 0.0811612, 0.8727108),
            (0.1471311, 0.1205434, 0.7323255),
            (0.0637051, 0.1788840, 0.7574109),
            (0.0139211, 0.1236808, 0.8623981),
            (0.0121505, 0.1037859, 0.8840637),
            (0.0143421, 0.0611511, 0.9245068),
            (0.0182562, 0.0139323, 0.9678115),
            (0.0238508, 0.0239167, 0.9522325),
            (0.0391188, 0.0795033, 0.8813779),
            (0.0866415, 0.3462264, 0.5671322),
            (0.0592289, 0.5820075, 0.3587636),
            (0.0332647, 0.4957859, 0.4709494),
            (0.0645986, 0.4006675, 0.5347340),
            (0.1023342, 0.3180420, 0.5796238),
            (0.1079715, 0.1209989, 0.7710296),
            (0.1125689, 0.0834957, 0.8039355),
            (0.0590881, 0.0701992, 0.8707127),
            (0.0260046, 0.1424669, 0.8315285),
            (0.0193053, 0.2336985, 0.7469962),
            (0.0197315, 0.5237203, 0.4565482),
            (0.0166081, 0.4280338, 0.5553581),
            (0.0470987, 0.3072793, 0.6456220),
            (0.0288928, 0.3269227, 0.6441845),
            (0.0391731, 0.2600479, 0.7007790),
            (0.0815078, 0.2544460, 0.6640462),
            (0.0798612, 0.2718124, 0.6483263),
            (0.1255703, 0.6587234, 0.2157063),
            (0.3799295, 0.3900219, 0.2300486),
            (0.5890985, 0.1541048, 0.2567967),
            (0.7008352, 0.0973429, 0.2018220),
            (0.8765801, 0.0457112, 0.0777086),
            (0.8380378, 0.0726350, 0.0893272),
            (0.7866953, 0.1047985, 0.1085062),
            (0.8792809, 0.0366042, 0.0841149),
            (0.6617954, 0.1941801, 0.1440245),
            (0.6903547, 0.1379512, 0.1716941),
            (0.1352626, 0.5572988, 0.3074386),
            (0.0018332, 0.7363077, 0.2618591),
            (0.0000260, 0.4261630, 0.5738111),
            (0.0000001, 0.9919040, 0.0080959))

        for e, r in zip(expected, result['probabilities']):
            self.assertAlmostEqual(e[0], r[0])
            self.assertAlmostEqual(e[1], r[1])
            self.assertAlmostEqual(e[2], r[2])
