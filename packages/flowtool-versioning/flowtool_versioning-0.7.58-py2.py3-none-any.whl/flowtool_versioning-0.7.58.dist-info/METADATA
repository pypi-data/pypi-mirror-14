Metadata-Version: 2.0
Name: flowtool-versioning
Version: 0.7.58
Summary: Semi-automatic versioning for git users.
Home-page: https://github.com/isnok/py-flowlib
Author: Konstantin Martini
Author-email: k@tuxcode.org
License: UNKNOWN
Keywords: git,flow,shell,local,remote,commandline
Platform: Debian/GNU Linux
Classifier: Development Status :: 3 - Alpha
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Topic :: System :: Software Distribution
Classifier: Topic :: System :: Systems Administration
Classifier: Topic :: Utilities
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: System Administrators
Classifier: Operating System :: POSIX
Classifier: Operating System :: Unix
Classifier: Environment :: Console
Requires-Dist: flowtool-base (>=0.7.56)

[![PyPI Python Versions](https://img.shields.io/pypi/pyversions/flowtool-versioning.svg)](https://pypi.python.org/pypi/flowtool-versioning)
[![PyPI Latest Version](https://img.shields.io/pypi/v/flowtool-versioning.svg)](https://pypi.python.org/pypi/flowtool-versioning)
[![PyPI Distribution Format](https://img.shields.io/pypi/format/flowtool-versioning.svg)](https://pypi.python.org/pypi/flowtool-versioning)

# flowtool-versioning

Automatic versions from git tags.

This addon lets you deploy a small versioning framework into your python
project, that integrates well with setuptools and probably also distutils.

The framework itself has no dependencies but python.
It is verified-to-work with python 2.7 and 3.4 releases.

To test it out, run one of these commands:
```
flowtool versioning-init
flowtool versioning-update
```
in a folder that contains a file named `setup.py`.
You will then be asked where the versionfile (that contains the version
information) should be placed, and wether you want to include some default
snippets into `setup.cfg` and `__init__.py` to configure and use the version
in your project. It will also create a file named `versioning.py` next to your
`setup.py` before giving you some information on how to wire things up in
`setup.py` from there.

Once you have it wired into your `setup.py` (same process as
[python-versioneer](https://github.com/warner/python-versioneer)) and created a
tag with your chosen prefix (`setup.cfg`, prefix can be empty also) to
bootstrap automatic versioning, you should be able to run:
```
./versioning.py     # outputs the current version
./setup.py version  # get more detailed current version info
./setup.py bump     # create a new tag, with a minorly bumped version
./setup.py sdist release  # release is upload and git push + tags
```

Request more documentation!


