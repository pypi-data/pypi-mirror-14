.TH curlbomb 1 2016\-03\-31
.SH SYNOPSIS
 \fBcurlbomb\fR [-h] [-k] [-n N] [-p PORT] [-c CMD] [-w] [-l] [-q] [-v]
         [--ssh SSH_FORWARD] [--ssl CERTIFICATE] [--survey] [--unwrapped]
         [--disable-postback] [--client-logging] [--mime-type MIME_TYPE]
         [--version]
         [FILE]


.SH DESCRIPTION

.br

.br
curlbomb is an HTTP server for serving one\-time\-use shell scripts
.br

.br
You know all those docs for cool dev tools that start out by telling
.br
you to install their software in one line, like this?
.br

.br
    bash <(curl \-s http://example.com/install.sh)
.br

.br
I call that a curl bomb... I don't know if anyone else does.
.br

.br
This script is an HTTP server that will serve that script to a client
.br
exactly once and then quit. Yea, you could just use "python \-m http.server", 
.br
really this is just a bit more than that.
.br

.br

.SH EXAMPLES

.br

.br
Serve a script stored in a file:
.br

.br
    curlbomb /path/to/script
.br
	
.br
This outputs a curl command to run the script on another computer:
.br

.br
    KNOCK='nDnXXp8jkZKtbush' bash <(curl \-LSs http://10.13.37.133:48690)
.br

.br
By default, the client must pass a KNOCK variable that is passed in
.br
the HTTP headers. This is for two reasons:
.br

.br
 * It adds a factor of authentication. Requests without the knock are
.br
   denied.
.br
 * It prevents mistakes as the knock parameter is randomly generated each
.br
   time curlbomb is run. 
.br

.br
You can disable the knock requirement with the \-k option. 
.br

.br
If you want the curl, without the bomb, ie. you just want to grab the
.br
script without redirecting it to bash, use \-\-survey. This is useful
.br
for testing the retrieval of scripts without running them. 
.br

.br
You can also pipe scripts directly into curlbomb:
.br

.br
    echo "pacman \-\-noconfirm \-S openssh && systemctl start sshd" | curlbomb
.br
	
.br
Or from shell scripts:
.br

.br
    cat <<EOF | curlbomb
.br
    #!/bin/bash
.br
    echo "I'm a script output from another script on another computer"
.br
	EOF
.br

.br
The shebang line (#!) is interpreted and automatically changes the
.br
interpreter the client runs:
.br

.br
    cat <<EOF | curlbomb
.br
	#!/usr/bin/env python3
.br
	import this
.br
	print("Hello, from Python!")
.br
	EOF
.br

.br
If your client doesn't have curl installed, you can switch to wget
.br
with \-w:
.br

.br
    echo "apt\-get install curl" | curlbomb \-w
.br

.br
By default, curlbomb serves from the IP address of the local
.br
machine. This usually means that clients on another network will be
.br
unable to retrieve anything from curlbomb, unless you have a port
.br
opened up through your firewall. As an alternative, curlbomb can be
.br
tunneled through SSH to another host that has the proper port
.br
open. For instance:
.br

.br
    echo "apt\-get install emacs\-nox" | curlbomb \-\-ssh user@example.com:8080
.br
	
.br
The above command connects to example.com over SSH (port 22 by
.br
default) and forwards the local curlbomb HTTP port to
.br
example.com:8080. This SSH tunnel is left open for as long as curlbomb
.br
remains running. Any user on example.com will be able to fetch the
.br
resource from localhost:8080. If you want anyone in the world to be
.br
able to fetch example.com:8080 you will need to modify the sshd_config
.br
of the server to allow GatewayPorts:
.br

.br
	# Put this in your /etc/ssh/sshd_config and restart your ssh service:
.br
    Gatewayports clientspecified
.br

.br
For extra security, you can enable SSL with \-\-ssl:
.br

.br
    echo "export PASSWORD=hunter2" | curlbomb \-c source \-\-ssl /path/to/cert.pem
.br

.br
In the above example we are passing a bit of secure information, a
.br
password. curlbomb normally prevents access with a knock paramter, and
.br
for most circumstances this is sufficient, as curlbombs can only be
.br
retrieved once (\-n 1). But the connection itself might be spied on
.br
through traffic analysis at your ISP or any other router your
.br
connection flows through. Using SSL makes sure this doesn't happen. To
.br
prevent having to store the SSL certificate in plain text on your
.br
local machine, the file may be optionally PGP encrypted in an
.br
ascii\-armored file. This will be automatically decrypted if you are
.br
running a gpg\-agent.
.br

.br

.SH OPTIONS

.br

.br
    usage: curlbomb.py [\-h] [\-k] [\-n N] [\-p PORT] [\-c CMD] [\-w] [\-l] [\-q] [\-v]
.br
                       [\-\-ssh SSH_FORWARD] [\-\-ssl CERTIFICATE] [\-\-survey]
.br
                       [\-\-unwrapped] [\-\-disable\-postback] [\-\-client\-logging]
.br
                       [\-\-mime\-type MIME_TYPE] [\-\-version]
.br
                       [FILE]
.br
    
.br
\fB\fC\-k, \-\-disable\-knock\fR
Don't require a X\-knock HTTP header from the client. Normally
.br
curlbombs are one\-time\-use and meant to be copy\-pasted from terminal
.br
to terminal. If you're embedding into a script, you may not know the
.br
knock parameter ahead of time and so this disables that. This is
.br
inherently less secure than the default.
.br

.br
\fB\fC\-n N, \-\-num\-gets N\fR
The maximum number of times the script may be fetched by clients,
.br
defaults to 1. Increasing this may be useful in certain circumstances,
.br
but please note that the same knock parameter is used for all requests
.br
so this is inherently less secure than the default.
.br

.br
\fB\fC\-p PORT\fR
The local TCP port number to use
.br

.br
\fB\fC\-c COMMAND\fR
Force the curlbomb shell command. By default, this is
.br
autodected from the first line of the script, called the shebang
.br
(#!). If none can be detected, and one is not provided, the fallback
.br
of "bash" is used. Note that curlbomb wraps scripts inside of bash,
.br
even with \-c specified, so the client command will still show it as
.br
running in bash. The wrapped script will use the interpreter
.br
specified. See \-\-unwrapped to change this behaviour.
.br

.br
\fB\fC\-w, \-\-wget\fR
Print wget syntax rather than curl syntax. Useful in the case
.br
where the client doesn't have curl installed.
.br

.br
\fB\fC\-l, \-\-log\-posts\fR
Log the client output from the curlbomb server. 
.br

.br
\fB\fC\-q, \-\-quiet\fR
Be more quiet. Don't print the client curlbomb command.
.br

.br
\fB\fC\-v, \-\-verbose\fR
Be more verbose. Turns off \-\-quiet, enables
.br
\-\-log\-posts, and enables INFO level logging within curlbomb.
.br

.br
\fB\fC\-\-ssh SSH_FORWARD\fR
Forwards the curlbomb server to a remote port of another
.br
computer through SSH. This is useful to serve curlbombs to clients on
.br
another network without opening up any ports to the machine running
.br
curlbomb. The syntax for SSH_FORWARD is [user@]host[:ssh_port][:http_port].
.br

.br
\fB\fC\-\-ssl CERTIFICATE\fR
Full server to client http encryption using
.br
SSL. Give the full path to your SSL certificate, optionally PGP
.br
(ascii\-armored) encrypted. The file should contain the entire
.br
certificate chain, including the CA certificate, if any.
.br

.br
\fB\fC\-\-survey\fR
Only print the curl (or wget) command. Don't redirect to a
.br
shell command. Useful for testing out script retrieval without running
.br
them. 
.br

.br
\fB\fC\-\-unwrapped\fR
output the full curlbomb command, including all the
.br
boilerplate that curlbomb normally wraps inside of a nested curlbomb.
.br

.br
This parameter is useful when you want to source variables into your
.br
current shell:
.br

.br
    echo "export PATH=/asdf/bin:$PATH" | curlbomb \-c source \-\-unwrapped \-\-disable\-postback
.br

.br
Without the \-\-unwrapped option, the client command will not run the
.br
'source' command directly, but instead a bash script with a 'source'
.br
inside it. This won't work for sourcing environment variables in your
.br
shell, so use \-\-unwrapped when you want to use
.br
source. \-\-disable\-postback prevents the command from being piped back
.br
to the server (as source doesn't have any output.)
.br

.br
\fB\fC\-\-disable\-postback\fR
Disables sending client output to the
.br
server. Note that \-\-log\-posts will have no effect with this enabled.
.br

.br
\fB\fC\-\-client\-logging\fR
Logs all client output locally on the client to a
.br
file called curlbomb.log
.br

.br
\fB\fC\-\-mime\-type MIME_TYPE\fR
The mime\-type header to send, by default "text/plain"
.br

.br
\fB\fC\-\-version\fR
Print the curlbomb version
.br

.br
\fB\fCFILE\fR
The script or other resource to serve via curlbomb. You can
.br
also not specify this and the resource will be read from stdin.
.br

.SH DISTRIBUTION
 The latest version of curlbomb may be downloaded from https://github.com/EnigmaCurry/curlbomb
.SH AUTHORS
 Ryan McGuire <ryan@enigmacurry.com>