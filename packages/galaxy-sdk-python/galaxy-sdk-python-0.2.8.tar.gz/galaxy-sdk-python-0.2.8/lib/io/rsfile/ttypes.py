#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Compression(object):
  """
  压缩算法类型
  """
  NONE = 0
  SNAPPY = 1

  _VALUES_TO_NAMES = {
    0: "NONE",
    1: "SNAPPY",
  }

  _NAMES_TO_VALUES = {
    "NONE": 0,
    "SNAPPY": 1,
  }

class Checksum(object):
  """
  数据完整性校验算法类型
  """
  NONE = 0
  CRC32 = 1

  _VALUES_TO_NAMES = {
    0: "NONE",
    1: "CRC32",
  }

  _NAMES_TO_VALUES = {
    "NONE": 0,
    "CRC32": 1,
  }


class RSFileHeader(object):
  """
  文件头

  Attributes:
   - magic: Magic常量，固定为"RSF"
   - version: 版本号
   - compression: 压缩算法类型
  可选，进行压缩的区域为文件中除文件头之外其余部分
   - checksum: 数据完整性校验算法类型
  可选，对每条记录对data部分进行校验
   - count: 记录数目，不含最后EOF记录，可选
   - metadata: 元信息，内容由使用者自己定义
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'magic', None, None, ), # 1
    (2, TType.I32, 'version', None, None, ), # 2
    (3, TType.I32, 'compression', None, None, ), # 3
    (4, TType.I32, 'checksum', None, None, ), # 4
    (5, TType.I64, 'count', None, -1, ), # 5
    (6, TType.STRING, 'metadata', None, None, ), # 6
  )

  def __init__(self, magic=None, version=None, compression=None, checksum=None, count=thrift_spec[5][4], metadata=None,):
    self.magic = magic
    self.version = version
    self.compression = compression
    self.checksum = checksum
    self.count = count
    self.metadata = metadata

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.magic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.compression = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.checksum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.count = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.metadata = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RSFileHeader')
    if self.magic is not None:
      oprot.writeFieldBegin('magic', TType.STRING, 1)
      oprot.writeString(self.magic)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I32, 2)
      oprot.writeI32(self.version)
      oprot.writeFieldEnd()
    if self.compression is not None:
      oprot.writeFieldBegin('compression', TType.I32, 3)
      oprot.writeI32(self.compression)
      oprot.writeFieldEnd()
    if self.checksum is not None:
      oprot.writeFieldBegin('checksum', TType.I32, 4)
      oprot.writeI32(self.checksum)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I64, 5)
      oprot.writeI64(self.count)
      oprot.writeFieldEnd()
    if self.metadata is not None:
      oprot.writeFieldBegin('metadata', TType.STRING, 6)
      oprot.writeString(self.metadata)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.magic)
    value = (value * 31) ^ hash(self.version)
    value = (value * 31) ^ hash(self.compression)
    value = (value * 31) ^ hash(self.checksum)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.metadata)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Record(object):
  """
  记录

  Attributes:
   - data: 记录数据部分，仅用于非EOF记录
   - checksum: 数据部分的校验值，可选
   - eof: EOF记录，用于标记文件结束
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'data', None, None, ), # 1
    (2, TType.I32, 'checksum', None, None, ), # 2
    (3, TType.BOOL, 'eof', None, False, ), # 3
  )

  def __init__(self, data=None, checksum=None, eof=thrift_spec[3][4],):
    self.data = data
    self.checksum = checksum
    self.eof = eof

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.data = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.checksum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.eof = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Record')
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.STRING, 1)
      oprot.writeString(self.data)
      oprot.writeFieldEnd()
    if self.checksum is not None:
      oprot.writeFieldBegin('checksum', TType.I32, 2)
      oprot.writeI32(self.checksum)
      oprot.writeFieldEnd()
    if self.eof is not None:
      oprot.writeFieldBegin('eof', TType.BOOL, 3)
      oprot.writeBool(self.eof)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.data)
    value = (value * 31) ^ hash(self.checksum)
    value = (value * 31) ^ hash(self.eof)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
