"""
Author: TC
Affiliation: IP
Aim: create a sample data set for quick testing
Type: module

"""
import sequana.snaketools as sm

"""fastq_sampling = {
    'name': 'fastq_sampling',
    'wildcards': ("fastq_sampling/{dataset}")
    }
"""

name = 'fastq_sampling'

try:
    config[name] = {'N':10000, 'skip':"True", 'wkdir': name}
except:
    config = {}
    config[name] = {'N':10000, 'skip':'True', 'wkdir': name}

try:
    configfile: "config.yaml"
except:
    pass


fastq_sampling_wc = ["fastq_sampling/{dataset}", sm.get_filenames("fastq_raw/*gz")]
fastq_sampling_input = expand(fastq_sampling_wc[0], dataset=fastq_sampling_wc[1])


if config['fastq_sampling']['skip']:
    out = temp("fastq_sampling/{dataset}")
    sm.message("skipping")
else:
    out = "fastq_sampling/{dataset}"
    sm.message("include fastq_sampling")


rule fastq_sampling_output:
    """This rule is used to make this pipeline independent"""
    input:
        fastq_sampling_input


sm.message("-------->>>>" + str(out))


rule fastq_sampling:
    """Select a sample from raw FastQ files"""
    input:  "fastq_raw/{dataset}"
    output: out
    params:
        N = config[name]['N']
    run:
        # make sure sym links do not exists
        if config['fastq_sampling']['skip']:
            shell("ln -sf $(pwd)/{input} {output}")
        else:
            shell("fastq_head {input} {params.N} {output}")


rule fastq_sampling_cleanup:
    """A cleanup rule"""
    params:
        wkdir = config[name]['wkdir'],
    run:
        import glob
        filenames = glob.glob(params['wkdir']+'/*')
        for filename in filenames:
            print('removing %s' % filename)
            os.remove(filename)

