from libc.stdint cimport *
from libc.string cimport *

from pyrobuf_list cimport *
from pyrobuf_util cimport *

import json

{%- for import in imports %}
from {{ import }}_proto cimport *
{%- endfor %}

{%- macro message_enum_fields_def(enum) %}
    {%- for field in enum.fields %}
    {{ field.name }} = _{{ field.name }}
    {%- endfor %}
{%- endmacro %}

{%- macro classdef(name, message) %}
cdef class {{ name }}:

    def __init__(self):
        self.reset()
        return

    def __str__(self):
        fields = [{%- for field in message.fields %}
                      {%- if field.type != 'message' %}
                          '{{field.name}}',
                          {%- endif %}
                      {%- endfor %}]
        components = ['{0}: {1}'.format(field, getattr(self, field)) for field in fields]
        messages = [{%- for field in message.fields %}
                        {%- if field.type == 'message' %}
                            '{{field.name}}',
                        {%- endif %}
                    {%- endfor %}]
        for message in messages:
            components.append('{0}: {{'{{'}}'.format(message))
            for line in str(getattr(self, message)).split('\n'):
                components.append('  {0}'.format(line))
            components.append('}')
        return '\n'.join(components)

    cpdef reset(self):
        # reset values and populate defaults
    {% for field in message.fields %}
        {%- if field.type != 'message' and field.modifier != 'repeated' %}
        self._{{ field.name }}_isDefault = True
        {%- endif -%}
        {%- if field.modifier == 'repeated' %}
            {%- if field.type == 'message' %}
        self._{{ field.name }} = TypedList({% if field.is_nested %}{{ name }}{% endif %}{{ field.message_name }})
            {%- elif field.type == 'string' %}
        self._{{ field.name }} = TypedList(str)
            {%- else %}
        self._{{ field.name }} = {{ field.list_type }}()
            {%- endif %}
        {%- elif field.type == 'message' %}
        self._{{ field.name }} = {% if field.is_nested %}{{ name }}{% endif %}{{ field.message_name }}()
        {%- elif field.default != None %}
            {%- if field.type == 'string' %}
        self._{{ field.name }} = "{{ field.default }}"
            {%- elif field.type == 'enum' %}
        self._{{ field.name }} = _{{ field.enum_default }}
            {%- else %}
        self._{{ field.name }} = {{ field.default }}
            {%- endif %}
        {%- elif field.type == 'string' %}
        self._{{ field.name }} = ""
        {%- elif field.type == 'enum' and field.enum_def != None %}
        self._{{ field.name }} = _{{ field.enum_def.fields[0].name }}
        {%- else %}
        self._{{ field.name }} = 0
        {%- endif %}
        {%- if field.modifier == 'required' and field.default == None %}
        self.__{{ field.name }}_set = 0
        {%- endif %}
    {%- endfor %}
        return

    {% for field in message.fields|sort(attribute='index') %}
    property {{ field.name }}:
        def __get__(self):
            return self._{{ field.name }}

        def __set__(self, value):
            {%- if field.type != 'message' and field.modifier != 'repeated' %}
            self._{{ field.name }}_isDefault = False
            {%-endif -%}
        {%- if field.modifier == 'repeated' %}
            {%- if field.type == 'message' %}
            self._{{ field.name }} = TypedList({% if field.is_nested %}{{ name }}{% endif %}{{ field.message_name }})
            {%- elif field.type == 'string' %}
            self._{{ field.name }} = TypedList(str)
            {%- else %}
            self._{{ field.name }} = {{ field.list_type }}()
            {%- endif %}
            for val in value:
            {%- if field.type == 'enum' and field.enum_def != None %}
                {%- for enum_field in field.enum_def.fields %}
                    {%- if loop.index == 1 %}
                if value == {{ enum_field.value }}:
                    {%- else %}
                elif value == {{ enum_field.value }}:
                    {%- endif %}
                    self._{{ field.name }}.append(_{{ enum_field.name }})
                {% endfor %}
                else:
                    raise Exception("not a valid value for enum {% if field.is_nested %}{{ name }}{% endif %}{{ field.enum_name }}")
            {%- elif field.type == 'string' %}
                if type(value) == unicode:
                    self._{{ field.name }}.append(str(val))
                else:
                    self._{{ field.name }}.append(val)
            {%- else %}
                self._{{ field.name }}.append(val)
            {%- endif %}
        {%- else %}
            {%- if field.type == 'enum' and field.enum_def != None %}
                {%- for enum_field in field.enum_def.fields %}
                    {%- if loop.index == 1 %}
            if value == {{ enum_field.value }}:
                    {%- else %}
            elif value == {{ enum_field.value }}:
                    {%- endif %}
                self._{{ field.name }} = _{{ enum_field.name }}
                {% endfor %}
            else:
                raise Exception("not a valid value for enum {% if field.is_nested %}{{ name }}{% endif %}{{ field.enum_name }}")
            {%- elif field.type == 'string' %}
            if type(value) == unicode:
                self._{{ field.name }} = str(value)
            else:
                self._{{ field.name }} = value
            {%- else %}
            self._{{ field.name }} = value
            {%- endif %}
        {%- endif %}
        {%- if field.modifier == 'required' and field.default == None %}
            self.__{{ field.name }}_set = 1
        {%- endif %}
    {% endfor %}

    cdef int _protobuf_deserialize(self, const unsigned char *memory, int size):
        cdef int current_offset = 0
        cdef int key
        cdef int field_idx
        cdef int wire_type

    {%- for field in message.fields|sort(attribute='index') %}
        {%- if field.modifier == 'repeated' %}
        cdef int {{ field.name }}_marker
            {%- if field.type == 'message' %}
        cdef int {{ field.name }}_elt_size
        cdef {% if field.is_nested %}{{ name }}{% endif %}{{ field.message_name }} {{ field.name }}_elt
            {%- elif field.type == 'string' %}
        cdef int {{ field.name }}_elt_size
        cdef str {{ field.name }}_elt
            {%- elif field.type == 'enum' %}
        cdef int32_t {{ field.name }}_elt
            {%- else  %}
        cdef {{ field.c_type }} {{ field.name }}_elt
            {%- endif %}
        {%- elif field.type == 'message' %}
        cdef int {{ field.name }}_size
        {%- elif field.type == 'string' %}
        cdef int {{ field.name }}_size
        {%- endif %}
    {%- endfor %}

    {%- if message.fields|count > 0 %}
        while current_offset < size:
            key = get_varint64(memory, &current_offset)
            field_idx = (key >> 3)
            wire_type = (key & 0x7)

    {%- for field in message.fields|sort(attribute='index') %}
            # {{ field.name }}
        {%- if loop.index == 1 %}
            if field_idx == {{ field.index }}:
        {%- else %}
            elif field_idx == {{ field.index }}:
        {%- endif %}

        {%- if field.modifier != 'repeated' and field.type != 'message'%}
                self._{{field.name}}_isDefault = False
        {% endif -%}

        {%- if field.modifier == 'repeated' %}
            {%- if field.packed|default(false) == true %}
                {{ field.name }}_marker = get_varint64(memory, &current_offset)
                {{ field.name }}_marker += current_offset
            {%- else %}
                {{ field.name }}_marker = 1 + current_offset
            {%- endif %}

                while current_offset < {{ field.name }}_marker:
            {%- if field.type == 'message' %}
                    {{ field.name }}_elt = {% if field.is_nested %}{{ name }}{% endif %}{{ field.message_name }}()
                    {{ field.name }}_elt_size = get_varint64(memory, &current_offset)
                    current_offset += {{ field.name }}_elt._protobuf_deserialize(memory[current_offset:current_offset + {{ field.name }}_elt_size], {{ field.name }}_elt_size)
            {%- elif field.type == 'string' %}
                    {{ field.name }}_elt_size = get_varint64(memory, &current_offset)
                    {{ field.name }}_elt = str(memory[current_offset:current_offset + {{ field.name }}_elt_size])
                    current_offset += {{ field.name }}_elt_size
            {%- elif field.fixed_width == true %}
                    {{ field.name }}_elt = (<{{ field.c_type }} *>&memory[current_offset])[0]
                    current_offset += sizeof({{ field.c_type }})
            {%- elif field.var_width == true %}
                    {{ field.name }}_elt = {{ field.getter }}(memory, &current_offset)
            {%- endif %}
                    self._{{ field.name }}.append({{ field.name }}_elt)

        {%- elif field.type == 'message' %}
                {{ field.name }}_size = get_varint64(memory, &current_offset)
                current_offset += self._{{ field.name }}._protobuf_deserialize(memory[current_offset:current_offset + {{ field.name }}_size], {{ field.name }}_size)

        {%- elif field.type == 'string' %}
                {{ field.name }}_size = get_varint64(memory, &current_offset)
                self._{{ field.name }} = str(memory[current_offset:current_offset + {{ field.name }}_size])
                current_offset += {{ field.name }}_size

        {%- elif field.type == 'enum' %}
                self.{{ field.name }} = {{ field.getter }}(memory, &current_offset)

        {%- elif field.fixed_width == true %}
                self._{{ field.name }} = (<{{ field.c_type }} *>&memory[current_offset])[0]
                current_offset += sizeof({{ field.c_type }})

        {%- elif field.var_width == true %}
                self._{{ field.name }} = {{ field.getter }}(memory, &current_offset)

        {%- endif %}

        {%- if field.modifier == 'required' and field.default == None %}
                self.__{{ field.name }}_set = 1
        {%- endif %}

    {%- endfor %}
            else:
                continue
    {%- endif %}

        return current_offset

    def ParseFromString(self, data, size=None, reset=True):
        """
        Populate the message class from a string of protobuf encoded binary data.

        Params:
            data (str): a string of binary data
            size (int): optional - the length of the data string
            reset (bool): optional - whether to reset to default values before serializing

        Returns:
            int: the number of bytes processed during serialization
        """
        if size == None:
            size = len(data)

        if reset:
            self.reset()

        buf = self._protobuf_deserialize(data, size)

        if buf != size:
            raise DecodeError("Truncated message")

    {%- for field in message.fields|sort(attribute='index') %}
        {%- if field.modifier == 'required' and field.default == None %}
        if self.__{{ field.name }}_set == 0:
            raise Exception("required field '{{ field.name }}' not parsed and does not have default")
        {%- endif %}
    {%- endfor %}

        return buf

    @classmethod
    def FromString(cls, s):
        message = cls()
        message.ParseFromString(s)
        return message

    cdef void _protobuf_serialize(self, bytearray buf):
        cdef int key
        cdef int field_idx
        cdef int wire_type

    {%- for field in message.fields|sort(attribute='index') %}
        # {{ field.name }}
        {%- if field.modifier == 'repeated' %}
            {%- if field.type == 'message' %}
        cdef bytearray {{ field.name }}_elt_buf
            {%- elif field.type in ('string', 'bytes') %}
        cdef str {{ field.name }}_elt
            {%- elif field.type == 'message' %}
        cdef {% if field.is_nested %}{{ name }}{% endif %}{{ field.message_name }} {{ field.name }}_elt
            {%- elif field.type == 'enum' %}
        cdef {% if field.is_nested %}{{ name }}{% endif %}{{ field.enum_name }} {{ field.name }}_elt
            {%- else %}
        cdef {{ field.c_type }} {{ field.name }}_elt
            {%- endif %}

            {%- if field.packed == true and field.var_width == true %}
        cdef bytearray {{ field.name }}_buf = bytearray()
            {%- endif %}

        if len(self._{{ field.name }}) > 0:

        {%- elif field.type == 'message' %}
        cdef bytearray {{ field.name }}_buf = bytearray()
        self._{{ field.name }}._protobuf_serialize({{ field.name }}_buf)
        if len({{ field.name }}_buf) > 0:

        {# !messages and !repeated fields can all have default values #}
        {%- elif field.modifier != 'repeated'%}
        if not self._{{ field.name }}_isDefault:

        {%- elif field.modifier == 'required' and field.default == None %}
        if self.__{{ field.name }}_set != 0:

        {%- elif field.type == 'string' %}
        if self._{{ field.name }} != "":
        {%- else %}
        if self._{{ field.name }} != 0:
        {%- endif %}

            field_idx = {{ field.index }}
        {%- if field.modifier == 'repeated' and field.packed == true %}
            wire_type = 2
        {%- elif field.type in ('message', 'string') %}
            wire_type = 2
        {%- elif field.type in ('fixed64', 'sfixed64', 'double') %}
            wire_type = 1
        {%- elif field.type in ('fixed32', 'sfixed32', 'float') %}
            wire_type = 5
        {%- else %}
            wire_type = 0
        {%- endif %}
            key = (field_idx << 3) | wire_type

        {%- if field.modifier == 'repeated' %}
            {%- if field.packed == true %}
            set_varint64(key, buf)
                {%- if field.fixed_width == true %}
            set_varint64(len(self._{{ field.name }}) * sizeof({{ field.name }}_elt), buf)
            for {{ field.name }}_elt in self._{{ field.name }}:
                buf += (<unsigned char *>&{{ field.name }}_elt)[:sizeof({{ field.name }}_elt)]

                {%- elif field.var_width == true %}
            for {{ field.name }}_elt in self._{{ field.name }}:
                {{ field.setter }}({{ field.name }}_elt, {{ field.name }}_buf)

            set_varint64(len({{ field.name }}_buf), buf)
            buf += {{ field.name }}_buf
                {%- endif %}

            {%- else %}
            for {{ field.name }}_elt in self._{{ field.name }}:
                set_varint64(key, buf)
                {%- if field.type == 'string' %}
                set_varint64(len({{ field.name }}_elt), buf)
                buf += {{ field.name }}_elt
                {%- elif field.type == 'message' %}
                {{ field.name }}_elt_buf = {{ field.name }}_elt.SerializeToString()
                set_varint64(len({{ field.name }}_elt_buf), buf)
                buf += {{ field.name }}_elt_buf
                {%- elif field.fixed_width == true %}
                buf += (<unsigned char *>&{{ field.name }}_elt)[:sizeof({{ field.name }}_elt)]
                {%- elif field.var_width == true %}
                {{ field.setter }}({{ field.name }}_elt, buf)
                {%- endif %}
            {%- endif %}

        {%- elif field.type == 'message' %}
            set_varint64(key, buf)
            set_varint64(len({{ field.name }}_buf), buf)
            buf += {{ field.name }}_buf

        {%- elif field.type == 'string' %}
            set_varint64(key, buf)
            set_varint64(len(self._{{ field.name }}), buf)
            buf += self._{{ field.name }}

        {%- elif field.fixed_width == true %}
            set_varint64(key, buf)
            buf += (<unsigned char *>&self._{{ field.name }})[:sizeof({{ field.c_type }})]

        {%- elif field.var_width == true %}
            set_varint64(key, buf)
            {{ field.setter }}(self._{{ field.name }}, buf)

        {%- endif %}
    {%- endfor %}

    def SerializeToString(self):
        """
        Serialize the message class into a bytearray of protobuf encoded binary data.

        Returns:
            bytearray: a bytearray of binary data
        """
    {%- for field in message.fields|sort(attribute='index') %}
        {%- if field.modifier == 'required' and field.default == None %}
        if self.__{{ field.name }}_set == 0:
            raise Exception("required field '{{ field.name }}' not initialized and does not have default")
        {%- endif %}
    {%- endfor %}

        buf = bytearray()
        self._protobuf_serialize(buf)
        return buf

    def ParseFromJson(self, data, size=None, reset=True):
        """
        Populate the message class from a json string.

        Params:
            data (str): a json string
            size (int): optional - the length of the data string
            reset (bool): optional - whether to reset to default values before serializing
        """
        if size == None:
            size = len(data)
        d = json.loads(data[:size])
        self.ParseFromDict(d, reset)

    def SerializeToJson(self, **kwargs):
        """
        Serialize the message class into a json string.

        Returns:
            str: a json formatted string
        """
        d = self.SerializeToDict()
        return json.dumps(d, **kwargs)

    def ParseFromDict(self, d, reset=True):
        """
        Populate the message class from a Python dictionary.

        Params:
            d (dict): a Python dictionary representing the message
            reset (bool): optional - whether to reset to default values before serializing
        """
        if reset:
            self.reset()

        assert type(d) == dict

    {%- for field in message.fields|sort(attribute='index') %}
        try:
        {%- if field.modifier == 'repeated' and field.type == 'message' %}
            for {{ field.name }}_json in d["{{ field.name }}"]:
                {{ field.name }}_elt = {% if field.is_nested %}{{ name }}{% endif %}{{ field.message_name }}()
                {{ field.name }}_elt.ParseFromDict({{ field.name }}_json)
                self.{{ field.name }}.append({{ field.name }}_elt)
        {%- elif field.type == 'message' %}
            self.{{ field.name }}.ParseFromDict(d["{{ field.name }}"])
        {%- else %}
            self.{{ field.name }} = d["{{ field.name }}"]
        {%- endif %}
        except KeyError:
            pass
    {%- endfor %}

    {%- for field in message.fields|sort(attribute='index') %}
        {%- if field.modifier == 'required' and field.default == None %}
        if self.__{{ field.name }}_set == False:
            raise Exception("required field '{{ field.name }}' not parsed and does not have default")
        {%- endif %}
    {%- endfor %}

        return

    def SerializeToDict(self):
        """
        Translate the message into a Python dictionary.

        Returns:
            dict: a Python dictionary representing the message
        """
        out = {}

    {%- for field in message.fields|sort(attribute='index') %}
        {%- if field.modifier == 'required' and field.default == None %}
        if self.__{{ field.name }}_set == False:
            raise Exception("required field '{{ field.name }}' not initialized and does not have default")
        {%- endif %}
    {%- endfor %}

    {%- for field in message.fields|sort(attribute='index') %}
        {%- if field.modifier == 'repeated' and field.type == 'message' %}
        if len(self.{{ field.name }}) > 0:
            out["{{ field.name }}"] = [{{ field.name }}_elt.SerializeToDict() for {{ field.name }}_elt in self.{{ field.name }}]
        {%- elif field.modifier == 'repeated' %}
        if len(self.{{ field.name }}) > 0:
            out["{{ field.name }}"] = [x for x in self.{{ field.name }}]
        {%- elif field.type == 'message' %}
        {{ field.name }}_dict = self.{{ field.name }}.SerializeToDict()
        if {{ field.name }}_dict != {}:
            out["{{ field.name }}"] = {{ field.name }}_dict
        {%- elif field.modifier == 'required' %}
        if self.__{{ field.name }}_set != 0:
            out["{{ field.name }}"] = self.{{ field.name }}
        {%- elif field.default != None %}
            {%- if field.type == 'string' %}
        if self.{{ field.name }} != "{{ field.default }}":
            out["{{ field.name }}"] = self.{{ field.name }}
            {%- else %}
        if self.{{ field.name }} != {{ field.default }}:
            out["{{ field.name }}"] = self.{{ field.name }}
            {%- endif %}
        {%- else %}
            {%- if field.type == 'string' %}
        if self.{{ field.name }} != "":
            out["{{ field.name }}"] = self.{{ field.name }}
            {%- else %}
        if self.{{ field.name }} != 0:
            out["{{ field.name }}"] = self.{{ field.name }}
            {%- endif %}
        {%- endif %}
    {%- endfor %}

        return out

    {% for message_enum_name, message_enum in message.enums.items() %}
        {{ message_enum_fields_def(message_enum) }}
    {% endfor %}


    {% for message_name, message_message in message.messages.items() %}
{{ classdef(name + message_name, message_message) }}
    {% endfor %}
{% endmacro %}

class DecodeError(Exception):
    pass

{%- for message in messages %}
{{ classdef(message.name, message) }}
{%- endfor %}

{%- macro enum_fields_def(enum) %}
{%- for field in enum.fields %}
{{ field.name }} = _{{ field.name }}
{%- endfor %}
{%- endmacro %}

{%- for enum in enums %}
{{ enum_fields_def(enum) }}
{%- endfor %}
