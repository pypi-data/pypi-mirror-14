# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-03-06 20:05
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import picklefield.fields
import wagtail.wagtailcore.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CodeIoAnswerKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.CharField(choices=[('python', 'Python 3.x'), ('python2', 'Python 2.7'), ('c_ansi', 'ANSI C (gcc)'), ('pytuga', 'PytuguÃªs')], max_length=10, verbose_name='Programming language')),
                ('source_code', models.TextField(default='', help_text='Source code for the correct answer in the given programming language', verbose_name='Answer source code')),
                ('placeholder', models.TextField(blank=True, help_text='This optional field controls which code should be placed in the source code editor when a question is opened. This is useful to put boilerplate or even a full program that the student should modify. It is possible to configure a global per-language boilerplate and leave this field blank.', verbose_name='Placeholder code')),
                ('response_template_extra', models.TextField(blank=True, help_text='Additional test cases specific for this language.', verbose_name='Extra reponses')),
                ('response_computed_template', models.TextField(blank=True)),
                ('grader_function', picklefield.fields.PickledObjectField(editable=False)),
            ],
            options={
                'verbose_name_plural': 'Answer keys',
                'verbose_name': 'Answer key',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('short_description', models.CharField(max_length=140)),
                ('long_description', wagtail.wagtailcore.fields.RichTextField()),
                ('author_name', models.CharField(blank=True, max_length=100, verbose_name='Author')),
                ('comment', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('question_type', models.IntegerField(null=True)),
            ],
            options={
                'permissions': (('download_question', 'Can download question files'),),
            },
        ),
        migrations.CreateModel(
            name='BooleanQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_questions.Question')),
                ('answer_key', models.BooleanField()),
            ],
            bases=('cs_questions.question',),
        ),
        migrations.CreateModel(
            name='CodeIoQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_questions.Question')),
                ('response_computed_template', models.TextField(blank=True)),
                ('response_template', models.TextField(blank=True, help_text='Template used to grade I/O responses. See http://??? fora complete reference on the template format.', verbose_name='Response template')),
                ('timeout', models.FloatField(default=1.0, help_text='Timeout in seconds', verbose_name='Timeout')),
                ('grader', picklefield.fields.PickledObjectField(editable=False, null=True)),
            ],
            options={
                'verbose_name_plural': 'I/O coding questions',
                'verbose_name': 'I/O coding question',
            },
            bases=('cs_questions.question',),
        ),
        migrations.CreateModel(
            name='FreeAnswerQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_questions.Question')),
            ],
            bases=('cs_questions.question',),
        ),
        migrations.CreateModel(
            name='NumericQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_questions.Question')),
                ('answer_start', models.FloatField()),
                ('answer_end', models.FloatField(blank=True, null=True)),
                ('is_exact', models.BooleanField(default=True)),
            ],
            bases=('cs_questions.question',),
        ),
        migrations.CreateModel(
            name='StringMatchQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_questions.Question')),
                ('template', models.TextField()),
                ('is_regex', models.BooleanField(default=True)),
            ],
            bases=('cs_questions.question',),
        ),
        migrations.AddField(
            model_name='codeioanswerkey',
            name='prototype',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answer_keys', to='cs_questions.CodeIoQuestion'),
        ),
    ]
