Metadata-Version: 1.1
Name: flatten_json
Version: 0.1
Summary: Flatten JSON objects
Home-page: https://github.com/amirziai/flatten
Author: Amir Ziai
Author-email: arziai@gmail.com
License: MIT License

Copyright (c) 2016 Amir Ziai

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
Download-URL: ...
Description: # flatten
        Flattens JSON objects in Python. ```flatten_json``` destroys the hierarchy in your object which can be useful if you want to force your objects into a table.
        
        ### Installation
        ```
        pip install flatten_json
        ```
        
        ### Usage
        Let's say you have the following object:
        ```python
        dic = {
            "a": 1,
            "b": 2,
            "c": [{"d": [2, 3, 4], "e": [{"f": 1, "g": 2}]}]
        }
        ```
        which you want to flatten. Just apply ```flatten_json```:
        ```python
        from flatten_json import flatten_json
        flatten_json(dic)
        ```
        
        Results:
        ```python
        {'a': '1',
         'b': '2',
         'c_0_d_0': '2',
         'c_0_d_1': '3',
         'c_0_d_2': '4',
         'c_0_e_0_f': '1',
         'c_0_e_0_g': '2'}
        ```
        
        ### Usage with Pandas
        For the following object:
        ```javascript
        dic = [
            {"a": 1, "b": 2, "c": {"d": 3, "e": 4}},
            {"a": 0.5, "c": {"d": 3.2}},
            {"a": 0.8, "b": 1.8},
        ]
        ```
        We can apply ```flatten_json``` to each element in the array and then use pandas to capture the output as a dataframe.
        ```python
        dic_flattened = [flatten_json(d) for d in dic]
        ```
        which creates an array of flattened objects:
        ```python
        [{'a': '1', 'b': '2', 'c_d': '3', 'c_e': '4'},
         {'a': '0.5', 'c_d': '3.2'},
         {'a': '0.8', 'b': '1.8'}]
        ```
        Finally you can use ```pd.DataFrame``` to capture the flattened array:
        ```python
        import pandas as pd
        df = pd.DataFrame(dic_flattened)
        ```
        The final result as a Pandas dataframe:
        ```
        	a	b	c_d	c_e
        0	1	2	3	4
        1	0.5	NaN	3.2	NaN
        2	0.8	1.8	NaN	NaN
        ```
Keywords: json,flatten,pandas
Platform: UNKNOWN
