# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pygamma', [dirname(__file__)])
        except ImportError:
            import _pygamma
            return _pygamma
        if fp is not None:
            try:
                _mod = imp.load_module('_pygamma', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pygamma = swig_import_helper()
    del swig_import_helper
else:
    import _pygamma
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pygamma.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _pygamma.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pygamma.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pygamma.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pygamma.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pygamma.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pygamma.SwigPyIterator_copy(self)

    def next(self):
        return _pygamma.SwigPyIterator_next(self)

    def __next__(self):
        return _pygamma.SwigPyIterator___next__(self)

    def previous(self):
        return _pygamma.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pygamma.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pygamma.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pygamma.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pygamma.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pygamma.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pygamma.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pygamma.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pygamma.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ParameterSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterSet, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pygamma.new_ParameterSet()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_ParameterSet
    __del__ = lambda self: None
ParameterSet_swigregister = _pygamma.ParameterSet_swigregister
ParameterSet_swigregister(ParameterSet)
cvar = _pygamma.cvar
GamSParInit = cvar.GamSParInit
GamIntVecInit = cvar.GamIntVecInit

class SinglePar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SinglePar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SinglePar, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_SinglePar(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_SinglePar
    __del__ = lambda self: None

    def __assign__(self, par):
        return _pygamma.SinglePar___assign__(self, par)

    def SPerror(self, eidx, noret=0):
        return _pygamma.SinglePar_SPerror(self, eidx, noret)

    def SPfatality(self, eidx):
        return _pygamma.SinglePar_SPfatality(self, eidx)

    def setCoord(self, input):
        return _pygamma.SinglePar_setCoord(self, input)

    def data(self, *args):
        return _pygamma.SinglePar_data(self, *args)

    def type(self, *args):
        return _pygamma.SinglePar_type(self, *args)

    def name(self, *args):
        return _pygamma.SinglePar_name(self, *args)

    def state(self, *args):
        return _pygamma.SinglePar_state(self, *args)

    def GetNS(self, name, state):
        return _pygamma.SinglePar_GetNS(self, name, state)

    def parse(self, *args):
        return _pygamma.SinglePar_parse(self, *args)

    def printStrings(self):
        return _pygamma.SinglePar_printStrings(self)

    def __eq__(self, par):
        return _pygamma.SinglePar___eq__(self, par)

    def __ne__(self, par):
        return _pygamma.SinglePar___ne__(self, par)

    def __lt__(self, par):
        return _pygamma.SinglePar___lt__(self, par)

    def __gt__(self, par):
        return _pygamma.SinglePar___gt__(self, par)
SinglePar_swigregister = _pygamma.SinglePar_swigregister
SinglePar_swigregister(SinglePar)

class Isotope(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Isotope, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Isotope, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_Isotope(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_Isotope
    __del__ = lambda self: None

    def qn(self):
        return _pygamma.Isotope_qn(self)

    def HS(self):
        return _pygamma.Isotope_HS(self)

    def momentum(self):
        return _pygamma.Isotope_momentum(self)

    def symbol(self):
        return _pygamma.Isotope_symbol(self)

    def name(self):
        return _pygamma.Isotope_name(self)

    def element(self):
        return _pygamma.Isotope_element(self)

    def number(self):
        return _pygamma.Isotope_number(self)

    def mass(self):
        return _pygamma.Isotope_mass(self)

    def weight(self):
        return _pygamma.Isotope_weight(self)

    def gamma(self):
        return _pygamma.Isotope_gamma(self)

    def receptivity(self):
        return _pygamma.Isotope_receptivity(self)

    def relative_frequency(self):
        return _pygamma.Isotope_relative_frequency(self)

    def electron(self):
        return _pygamma.Isotope_electron(self)

    def read(self, *args):
        return _pygamma.Isotope_read(self, *args)

    def printStrings(self, hdr=True):
        return _pygamma.Isotope_printStrings(self, hdr)

    def seek(self, ID):
        return _pygamma.Isotope_seek(self, ID)

    def exists(self, symbol):
        return _pygamma.Isotope_exists(self, symbol)
    __swig_getmethods__["known"] = lambda x: _pygamma.Isotope_known
    if _newclass:
        known = staticmethod(_pygamma.Isotope_known)
    __swig_getmethods__["size"] = lambda x: _pygamma.Isotope_size
    if _newclass:
        size = staticmethod(_pygamma.Isotope_size)
    __swig_getmethods__["PrintListStrings"] = lambda x: _pygamma.Isotope_PrintListStrings
    if _newclass:
        PrintListStrings = staticmethod(_pygamma.Isotope_PrintListStrings)
    __swig_getmethods__["AddIsotope"] = lambda x: _pygamma.Isotope_AddIsotope
    if _newclass:
        AddIsotope = staticmethod(_pygamma.Isotope_AddIsotope)

    def __eq__(self, I):
        return _pygamma.Isotope___eq__(self, I)

    def __ne__(self, I):
        return _pygamma.Isotope___ne__(self, I)

    def __lt__(self, I):
        return _pygamma.Isotope___lt__(self, I)

    def __gt__(self, I):
        return _pygamma.Isotope___gt__(self, I)

    def nepair(self, S):
        return _pygamma.Isotope_nepair(self, S)

    def enpair(self, S):
        return _pygamma.Isotope_enpair(self, S)

    def eepair(self, S):
        return _pygamma.Isotope_eepair(self, S)

    def nnpair(self, S):
        return _pygamma.Isotope_nnpair(self, S)
Isotope_swigregister = _pygamma.Isotope_swigregister
Isotope_swigregister(Isotope)

def Isotope_known(symbol):
    return _pygamma.Isotope_known(symbol)
Isotope_known = _pygamma.Isotope_known

def Isotope_size():
    return _pygamma.Isotope_size()
Isotope_size = _pygamma.Isotope_size

def Isotope_PrintListStrings():
    return _pygamma.Isotope_PrintListStrings()
Isotope_PrintListStrings = _pygamma.Isotope_PrintListStrings

def Isotope_AddIsotope(ID, warn=2):
    return _pygamma.Isotope_AddIsotope(ID, warn)
Isotope_AddIsotope = _pygamma.Isotope_AddIsotope


_pygamma.PI_swigconstant(_pygamma)
PI = _pygamma.PI

_pygamma.PI2_swigconstant(_pygamma)
PI2 = _pygamma.PI2

def query_parameter(*args):
    return _pygamma.query_parameter(*args)
query_parameter = _pygamma.query_parameter

def ask_set(*args):
    return _pygamma.ask_set(*args)
ask_set = _pygamma.ask_set

def GAMMAerror(*args):
    return _pygamma.GAMMAerror(*args)
GAMMAerror = _pygamma.GAMMAerror

def GAMMAfatal():
    return _pygamma.GAMMAfatal()
GAMMAfatal = _pygamma.GAMMAfatal
class IsotopeData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsotopeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IsotopeData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_IsotopeData(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __assign__(self, ID1):
        return _pygamma.IsotopeData___assign__(self, ID1)
    __swig_destroy__ = _pygamma.delete_IsotopeData
    __del__ = lambda self: None

    def qn(self):
        return _pygamma.IsotopeData_qn(self)

    def HS(self):
        return _pygamma.IsotopeData_HS(self)

    def momentum(self):
        return _pygamma.IsotopeData_momentum(self)

    def symbol(self):
        return _pygamma.IsotopeData_symbol(self)

    def name(self):
        return _pygamma.IsotopeData_name(self)

    def element(self):
        return _pygamma.IsotopeData_element(self)

    def number(self):
        return _pygamma.IsotopeData_number(self)

    def mass(self):
        return _pygamma.IsotopeData_mass(self)

    def weight(self):
        return _pygamma.IsotopeData_weight(self)

    def recept(self):
        return _pygamma.IsotopeData_recept(self)

    def electron(self):
        return _pygamma.IsotopeData_electron(self)

    def rel_freq(self):
        return _pygamma.IsotopeData_rel_freq(self)

    def printStrings(self, hdr=True):
        return _pygamma.IsotopeData_printStrings(self, hdr)
IsotopeData_swigregister = _pygamma.IsotopeData_swigregister
IsotopeData_swigregister(IsotopeData)
PIx2 = cvar.PIx2
DEG2RAD = cvar.DEG2RAD
RAD2DEG = cvar.RAD2DEG
HZ2RAD = cvar.HZ2RAD
RAD2HZ = cvar.RAD2HZ
HZ2GAUSS = cvar.HZ2GAUSS
GAUSS2HZ = cvar.GAUSS2HZ
GHZ2GAUSS = cvar.GHZ2GAUSS
GAUSS2GHZ = cvar.GAUSS2GHZ
MU_E = cvar.MU_E
BOHRMAG = cvar.BOHRMAG
GFREE = cvar.GFREE
GAMMAe = cvar.GAMMAe
GAMMA1H = cvar.GAMMA1H
DEFISO = cvar.DEFISO
PLANCK = cvar.PLANCK
HBAR = cvar.HBAR


def cutWhite(Sinp):
    return _pygamma.cutWhite(Sinp)
cutWhite = _pygamma.cutWhite

def cutString(Sinp, xwhite=True):
    return _pygamma.cutString(Sinp, xwhite)
cutString = _pygamma.cutString

def cutParBlks(Sinp):
    return _pygamma.cutParBlks(Sinp)
cutParBlks = _pygamma.cutParBlks

def cutBlksXBlks(Sinp, X, xwhite=True):
    return _pygamma.cutBlksXBlks(Sinp, X, xwhite)
cutBlksXBlks = _pygamma.cutBlksXBlks

def cutDouble(Sinp, xwhite=True):
    return _pygamma.cutDouble(Sinp, xwhite)
cutDouble = _pygamma.cutDouble

def cutInt(Sinp, xwhite=True):
    return _pygamma.cutInt(Sinp, xwhite)
cutInt = _pygamma.cutInt

def Gitoa(i):
    return _pygamma.Gitoa(i)
Gitoa = _pygamma.Gitoa

def Gdec2(li):
    return _pygamma.Gdec2(li)
Gdec2 = _pygamma.Gdec2

def Gdec(*args):
    return _pygamma.Gdec(*args)
Gdec = _pygamma.Gdec

def Gform(*args):
    return _pygamma.Gform(*args)
Gform = _pygamma.Gform

def CenterString(str, width=80):
    return _pygamma.CenterString(str, width)
CenterString = _pygamma.CenterString

def enable_blockdiag():
    return _pygamma.enable_blockdiag()
enable_blockdiag = _pygamma.enable_blockdiag

def disable_blockdiag():
    return _pygamma.disable_blockdiag()
disable_blockdiag = _pygamma.disable_blockdiag
class matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, matrix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_matrix(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_matrix
    __del__ = lambda self: None

    def __call__(self, i, j):
        return _pygamma.matrix___call__(self, i, j)

    def elem(self, i, j):
        return _pygamma.matrix_elem(self, i, j)

    def get(self, i, j):
        return _pygamma.matrix_get(self, i, j)

    def getRe(self, i, j):
        return _pygamma.matrix_getRe(self, i, j)

    def getIm(self, i, j):
        return _pygamma.matrix_getIm(self, i, j)

    def put(self, z, i, j):
        return _pygamma.matrix_put(self, z, i, j)

    def put_h(self, z, i, j):
        return _pygamma.matrix_put_h(self, z, i, j)

    def get_block(self, row, col, nrows, ncols):
        return _pygamma.matrix_get_block(self, row, col, nrows, ncols)

    def put_block(self, row, col, mx):
        return _pygamma.matrix_put_block(self, row, col, mx)

    def stored_hermitian(self):
        return _pygamma.matrix_stored_hermitian(self)

    def check_hermitian(self, *args):
        return _pygamma.matrix_check_hermitian(self, *args)

    def set_hermitian(self, *args):
        return _pygamma.matrix_set_hermitian(self, *args)

    def test_hermitian(self, *args):
        return _pygamma.matrix_test_hermitian(self, *args)

    def stored_type(self):
        return _pygamma.matrix_stored_type(self)

    def test_type(self, *args):
        return _pygamma.matrix_test_type(self, *args)

    def set_type(self, t):
        return _pygamma.matrix_set_type(self, t)

    def check_type(self, *args):
        return _pygamma.matrix_check_type(self, *args)

    def mxtype(self):
        return _pygamma.matrix_mxtype(self)

    def cols(self):
        return _pygamma.matrix_cols(self)

    def rows(self):
        return _pygamma.matrix_rows(self)

    def refs(self):
        return _pygamma.matrix_refs(self)

    def pts(self):
        return _pygamma.matrix_pts(self)

    def is_symmetric(self, *args):
        return _pygamma.matrix_is_symmetric(self, *args)

    def is_hermitian(self, *args):
        return _pygamma.matrix_is_hermitian(self, *args)

    def is_unitary(self, *args):
        return _pygamma.matrix_is_unitary(self, *args)

    def is_real(self, *args):
        return _pygamma.matrix_is_real(self, *args)

    def is_imaginary(self, *args):
        return _pygamma.matrix_is_imaginary(self, *args)

    def is_complex(self, *args):
        return _pygamma.matrix_is_complex(self, *args)

    def is_zero(self, *args):
        return _pygamma.matrix_is_zero(self, *args)

    def is_diagonal(self, *args):
        return _pygamma.matrix_is_diagonal(self, *args)

    def is_square(self):
        return _pygamma.matrix_is_square(self)

    def __add__(self, mx):
        return _pygamma.matrix___add__(self, mx)

    def __sub__(self, mx):
        return _pygamma.matrix___sub__(self, mx)

    def __mul__(self, *args):
        return _pygamma.matrix___mul__(self, *args)

    def __div__(self, *args):
        return _pygamma.matrix___div__(self, *args)

    def __iadd__(self, mx1):
        return _pygamma.matrix___iadd__(self, mx1)

    def __isub__(self, mx1):
        return _pygamma.matrix___isub__(self, mx1)

    def __imul__(self, *args):
        return _pygamma.matrix___imul__(self, *args)

    def __idiv__(self, *args):
        return _pygamma.matrix___idiv__(self, *args)

    def __neg__(self):
        return _pygamma.matrix___neg__(self)

    def Re(self):
        return _pygamma.matrix_Re(self)

    def Im(self):
        return _pygamma.matrix_Im(self)

    def conj(self):
        return _pygamma.matrix_conj(self)

    def transpose(self):
        return _pygamma.matrix_transpose(self)

    def adjoint(self):
        return _pygamma.matrix_adjoint(self)

    def exp(self):
        return _pygamma.matrix_exp(self)

    def swaprows(self, i, j):
        return _pygamma.matrix_swaprows(self, i, j)

    def swapcols(self, i, j):
        return _pygamma.matrix_swapcols(self, i, j)

    def permute(self, i, j):
        return _pygamma.matrix_permute(self, i, j)

    def maxRe(self):
        return _pygamma.matrix_maxRe(self)

    def maxIm(self):
        return _pygamma.matrix_maxIm(self)

    def maxZ(self):
        return _pygamma.matrix_maxZ(self)

    def minRe(self):
        return _pygamma.matrix_minRe(self)

    def minIm(self):
        return _pygamma.matrix_minIm(self)

    def minZ(self):
        return _pygamma.matrix_minZ(self)

    def trace(self, *args):
        return _pygamma.matrix_trace(self, *args)

    def det(self):
        return _pygamma.matrix_det(self)

    def FFT(self):
        return _pygamma.matrix_FFT(self)

    def IFFT(self):
        return _pygamma.matrix_IFFT(self)
    __swig_getmethods__["Header"] = lambda x: _pygamma.matrix_Header
    if _newclass:
        Header = staticmethod(_pygamma.matrix_Header)
    __swig_getmethods__["PrintRI"] = lambda x: _pygamma.matrix_PrintRI
    if _newclass:
        PrintRI = staticmethod(_pygamma.matrix_PrintRI)
    __swig_getmethods__["PrintAll"] = lambda x: _pygamma.matrix_PrintAll
    if _newclass:
        PrintAll = staticmethod(_pygamma.matrix_PrintAll)
    __swig_getmethods__["PictDim"] = lambda x: _pygamma.matrix_PictDim
    if _newclass:
        PictDim = staticmethod(_pygamma.matrix_PictDim)
    __swig_getmethods__["PrintVal"] = lambda x: _pygamma.matrix_PrintVal
    if _newclass:
        PrintVal = staticmethod(_pygamma.matrix_PrintVal)
    __swig_getmethods__["PrintCols"] = lambda x: _pygamma.matrix_PrintCols
    if _newclass:
        PrintCols = staticmethod(_pygamma.matrix_PrintCols)
    __swig_getmethods__["PrintRows"] = lambda x: _pygamma.matrix_PrintRows
    if _newclass:
        PrintRows = staticmethod(_pygamma.matrix_PrintRows)

    def ask(self, *args):
        return _pygamma.matrix_ask(self, *args)

    def resize(self, i, j):
        return _pygamma.matrix_resize(self, i, j)

    def diagonal_form(self):
        return _pygamma.matrix_diagonal_form(self)

    def same_reference_as(self, mx):
        return _pygamma.matrix_same_reference_as(self, mx)

    def status(self, full=0):
        return _pygamma.matrix_status(self, full)

    def BlockDiag(self, BD, U):
        return _pygamma.matrix_BlockDiag(self, BD, U)

    def SymTriDiag(self, HTD, U):
        return _pygamma.matrix_SymTriDiag(self, HTD, U)

    def HermTriDiag(self, STD, U):
        return _pygamma.matrix_HermTriDiag(self, STD, U)

    def SymDiag(self, SD, U):
        return _pygamma.matrix_SymDiag(self, SD, U)

    def Diagonalize(self, D, U):
        return _pygamma.matrix_Diagonalize(self, D, U)

    def TestEigenSystem(self, pf=1):
        return _pygamma.matrix_TestEigenSystem(self, pf)

    def TestTransform(self, T, S, pf=1):
        return _pygamma.matrix_TestTransform(self, T, S, pf)

    def ColumnNorms(self):
        return _pygamma.matrix_ColumnNorms(self)

    def TestIdentity(self, TotalDev):
        return _pygamma.matrix_TestIdentity(self, TotalDev)

    def TestUnitary(self, ostr):
        return _pygamma.matrix_TestUnitary(self, ostr)

    def TestUTransform(self, T, U):
        return _pygamma.matrix_TestUTransform(self, T, U)

    def __eq__(self, mx):
        return _pygamma.matrix___eq__(self, mx)

    def __ne__(self, mx):
        return _pygamma.matrix___ne__(self, mx)

    def __lt__(self, mx):
        return _pygamma.matrix___lt__(self, mx)

    def __gt__(self, mx):
        return _pygamma.matrix___gt__(self, mx)
matrix_swigregister = _pygamma.matrix_swigregister
matrix_swigregister(matrix)

def matrix_Header(hf):
    return _pygamma.matrix_Header(hf)
matrix_Header = _pygamma.matrix_Header

def matrix_PrintRI(pi):
    return _pygamma.matrix_PrintRI(pi)
matrix_PrintRI = _pygamma.matrix_PrintRI

def matrix_PrintAll(pa):
    return _pygamma.matrix_PrintAll(pa)
matrix_PrintAll = _pygamma.matrix_PrintAll

def matrix_PictDim(pd):
    return _pygamma.matrix_PictDim(pd)
matrix_PictDim = _pygamma.matrix_PictDim

def matrix_PrintVal(pv):
    return _pygamma.matrix_PrintVal(pv)
matrix_PrintVal = _pygamma.matrix_PrintVal

def matrix_PrintCols(cl):
    return _pygamma.matrix_PrintCols(cl)
matrix_PrintCols = _pygamma.matrix_PrintCols

def matrix_PrintRows(rl):
    return _pygamma.matrix_PrintRows(rl)
matrix_PrintRows = _pygamma.matrix_PrintRows

class row_vector(matrix):
    __swig_setmethods__ = {}
    for _s in [matrix]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, row_vector, name, value)
    __swig_getmethods__ = {}
    for _s in [matrix]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, row_vector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_row_vector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_row_vector
    __del__ = lambda self: None

    def __call__(self, i):
        return _pygamma.row_vector___call__(self, i)

    def get(self, i):
        return _pygamma.row_vector_get(self, i)

    def getRe(self, i):
        return _pygamma.row_vector_getRe(self, i)

    def getIm(self, i):
        return _pygamma.row_vector_getIm(self, i)

    def put(self, z, i):
        return _pygamma.row_vector_put(self, z, i)

    def elements(self):
        return _pygamma.row_vector_elements(self)

    def size(self):
        return _pygamma.row_vector_size(self)

    def __add__(self, rvec):
        return _pygamma.row_vector___add__(self, rvec)

    def __sub__(self, rvec):
        return _pygamma.row_vector___sub__(self, rvec)

    def __mul__(self, *args):
        return _pygamma.row_vector___mul__(self, *args)

    def __iadd__(self, rvec1):
        return _pygamma.row_vector___iadd__(self, rvec1)

    def __isub__(self, rvec1):
        return _pygamma.row_vector___isub__(self, rvec1)

    def __imul__(self, *args):
        return _pygamma.row_vector___imul__(self, *args)

    def __idiv__(self, *args):
        return _pygamma.row_vector___idiv__(self, *args)

    def differential(self):
        return _pygamma.row_vector_differential(self)

    def norm(self):
        return _pygamma.row_vector_norm(self)

    def maxRe(self):
        return _pygamma.row_vector_maxRe(self)

    def maxIm(self):
        return _pygamma.row_vector_maxIm(self)

    def maxZ(self):
        return _pygamma.row_vector_maxZ(self)

    def minRe(self):
        return _pygamma.row_vector_minRe(self)

    def minIm(self):
        return _pygamma.row_vector_minIm(self)

    def minZ(self):
        return _pygamma.row_vector_minZ(self)

    def max(self, type=0):
        return _pygamma.row_vector_max(self, type)

    def min(self, type=0):
        return _pygamma.row_vector_min(self, type)

    def flip(self):
        return _pygamma.row_vector_flip(self)

    def sum(self, *args):
        return _pygamma.row_vector_sum(self, *args)

    def zero(self):
        return _pygamma.row_vector_zero(self)

    def sort(self, type=0):
        return _pygamma.row_vector_sort(self, type)

    def product(self, *args):
        return _pygamma.row_vector_product(self, *args)

    def scalar_product(self, *args):
        return _pygamma.row_vector_scalar_product(self, *args)

    def hdrString(self):
        return _pygamma.row_vector_hdrString(self)
    SMIS = _pygamma.row_vector_SMIS
    SIEMENS = _pygamma.row_vector_SIEMENS
    SIEMENS_NOHDR = _pygamma.row_vector_SIEMENS_NOHDR
    PLAIN_ASCII = _pygamma.row_vector_PLAIN_ASCII
    ASCII_MT_DEG = _pygamma.row_vector_ASCII_MT_DEG
    SVS = _pygamma.row_vector_SVS
    __swig_getmethods__["read_pulse"] = lambda x: _pygamma.row_vector_read_pulse
    if _newclass:
        read_pulse = staticmethod(_pygamma.row_vector_read_pulse)

    def ask(self):
        return _pygamma.row_vector_ask(self)
row_vector_swigregister = _pygamma.row_vector_swigregister
row_vector_swigregister(row_vector)

def row_vector_read_pulse(filename, PulseFmt):
    return _pygamma.row_vector_read_pulse(filename, PulseFmt)
row_vector_read_pulse = _pygamma.row_vector_read_pulse

class col_vector(matrix):
    __swig_setmethods__ = {}
    for _s in [matrix]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, col_vector, name, value)
    __swig_getmethods__ = {}
    for _s in [matrix]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, col_vector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_col_vector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_col_vector
    __del__ = lambda self: None

    def __call__(self, i):
        return _pygamma.col_vector___call__(self, i)

    def get(self, i):
        return _pygamma.col_vector_get(self, i)

    def getRe(self, i):
        return _pygamma.col_vector_getRe(self, i)

    def getIm(self, i):
        return _pygamma.col_vector_getIm(self, i)

    def put(self, z, i):
        return _pygamma.col_vector_put(self, z, i)

    def elements(self):
        return _pygamma.col_vector_elements(self)

    def size(self):
        return _pygamma.col_vector_size(self)

    def __add__(self, cvec):
        return _pygamma.col_vector___add__(self, cvec)

    def __sub__(self, cvec):
        return _pygamma.col_vector___sub__(self, cvec)

    def __mul__(self, *args):
        return _pygamma.col_vector___mul__(self, *args)

    def __iadd__(self, cvec1):
        return _pygamma.col_vector___iadd__(self, cvec1)

    def __isub__(self, cvec1):
        return _pygamma.col_vector___isub__(self, cvec1)

    def __imul__(self, *args):
        return _pygamma.col_vector___imul__(self, *args)

    def __idiv__(self, *args):
        return _pygamma.col_vector___idiv__(self, *args)

    def adjoint(self):
        return _pygamma.col_vector_adjoint(self)

    def transpose(self):
        return _pygamma.col_vector_transpose(self)

    def trace(self):
        return _pygamma.col_vector_trace(self)

    def differential(self):
        return _pygamma.col_vector_differential(self)

    def norm(self):
        return _pygamma.col_vector_norm(self)

    def maxRe(self):
        return _pygamma.col_vector_maxRe(self)

    def maxIm(self):
        return _pygamma.col_vector_maxIm(self)

    def maxZ(self):
        return _pygamma.col_vector_maxZ(self)

    def minRe(self):
        return _pygamma.col_vector_minRe(self)

    def minIm(self):
        return _pygamma.col_vector_minIm(self)

    def minZ(self):
        return _pygamma.col_vector_minZ(self)

    def max(self, type=0):
        return _pygamma.col_vector_max(self, type)

    def min(self, type=0):
        return _pygamma.col_vector_min(self, type)

    def flip(self):
        return _pygamma.col_vector_flip(self)

    def sum(self, *args):
        return _pygamma.col_vector_sum(self, *args)

    def zero(self):
        return _pygamma.col_vector_zero(self)

    def sort(self, type=0):
        return _pygamma.col_vector_sort(self, type)

    def product(self, *args):
        return _pygamma.col_vector_product(self, *args)

    def scalar_product(self, *args):
        return _pygamma.col_vector_scalar_product(self, *args)

    def hdrString(self):
        return _pygamma.col_vector_hdrString(self)

    def ask(self):
        return _pygamma.col_vector_ask(self)
col_vector_swigregister = _pygamma.col_vector_swigregister
col_vector_swigregister(col_vector)

class complex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, complex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, complex, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_complex(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def Relem(self):
        return _pygamma.complex_Relem(self)

    def Ielem(self):
        return _pygamma.complex_Ielem(self)

    def Rec(self):
        return _pygamma.complex_Rec(self)

    def Imc(self):
        return _pygamma.complex_Imc(self)

    def real(self):
        return _pygamma.complex_real(self)

    def imag(self):
        return _pygamma.complex_imag(self)

    def __add__(self, *args):
        return _pygamma.complex___add__(self, *args)

    def __iadd__(self, *args):
        return _pygamma.complex___iadd__(self, *args)

    def __sub__(self, *args):
        return _pygamma.complex___sub__(self, *args)

    def __isub__(self, *args):
        return _pygamma.complex___isub__(self, *args)

    def __mul__(self, *args):
        return _pygamma.complex___mul__(self, *args)

    def __imul__(self, *args):
        return _pygamma.complex___imul__(self, *args)

    def __div__(self, *args):
        return _pygamma.complex___div__(self, *args)

    def __idiv__(self, *args):
        return _pygamma.complex___idiv__(self, *args)

    def conj(self):
        return _pygamma.complex_conj(self)

    def conj_times(self, z):
        return _pygamma.complex_conj_times(self, z)

    def Zexp(self):
        return _pygamma.complex_Zexp(self)

    def Zsin(self):
        return _pygamma.complex_Zsin(self)

    def Zcos(self):
        return _pygamma.complex_Zcos(self)

    def Ztan(self):
        return _pygamma.complex_Ztan(self)

    def Zasin(self):
        return _pygamma.complex_Zasin(self)

    def Zacos(self):
        return _pygamma.complex_Zacos(self)

    def Zatan(self):
        return _pygamma.complex_Zatan(self)

    def Zsinh(self):
        return _pygamma.complex_Zsinh(self)

    def Zcosh(self):
        return _pygamma.complex_Zcosh(self)

    def Ztanh(self):
        return _pygamma.complex_Ztanh(self)

    def Zasinh(self):
        return _pygamma.complex_Zasinh(self)

    def Zacosh(self):
        return _pygamma.complex_Zacosh(self)

    def Zatanh(self):
        return _pygamma.complex_Zatanh(self)
    __swig_getmethods__["Reiphi"] = lambda x: _pygamma.complex_Reiphi
    if _newclass:
        Reiphi = staticmethod(_pygamma.complex_Reiphi)
    __swig_getmethods__["delim"] = lambda x: _pygamma.complex_delim
    if _newclass:
        delim = staticmethod(_pygamma.complex_delim)
    __swig_getmethods__["scinot"] = lambda x: _pygamma.complex_scinot
    if _newclass:
        scinot = staticmethod(_pygamma.complex_scinot)
    __swig_getmethods__["digits"] = lambda x: _pygamma.complex_digits
    if _newclass:
        digits = staticmethod(_pygamma.complex_digits)
    __swig_getmethods__["dadp"] = lambda x: _pygamma.complex_dadp
    if _newclass:
        dadp = staticmethod(_pygamma.complex_dadp)
    __swig_getmethods__["dlength"] = lambda x: _pygamma.complex_dlength
    if _newclass:
        dlength = staticmethod(_pygamma.complex_dlength)
    __swig_getmethods__["dformat"] = lambda x: _pygamma.complex_dformat
    if _newclass:
        dformat = staticmethod(_pygamma.complex_dformat)
    __swig_getmethods__["zlength"] = lambda x: _pygamma.complex_zlength
    if _newclass:
        zlength = staticmethod(_pygamma.complex_zlength)
    __swig_getmethods__["normphase"] = lambda x: _pygamma.complex_normphase
    if _newclass:
        normphase = staticmethod(_pygamma.complex_normphase)
    __swig_getmethods__["complex_getf"] = lambda x: _pygamma.complex_complex_getf
    if _newclass:
        complex_getf = staticmethod(_pygamma.complex_complex_getf)

    def printString(self):
        return _pygamma.complex_printString(self)

    def write(self, fn):
        return _pygamma.complex_write(self, fn)

    def read(self, fn):
        return _pygamma.complex_read(self, fn)

    def __eq__(self, z):
        return _pygamma.complex___eq__(self, z)

    def __ne__(self, z):
        return _pygamma.complex___ne__(self, z)

    def __lt__(self, z):
        return _pygamma.complex___lt__(self, z)

    def __gt__(self, z):
        return _pygamma.complex___gt__(self, z)
    __swig_destroy__ = _pygamma.delete_complex
    __del__ = lambda self: None
complex_swigregister = _pygamma.complex_swigregister
complex_swigregister(complex)

def Swap(z1, z2):
    return _pygamma.Swap(z1, z2)
Swap = _pygamma.Swap

def complex_Reiphi(TF):
    return _pygamma.complex_Reiphi(TF)
complex_Reiphi = _pygamma.complex_Reiphi

def complex_delim(TF):
    return _pygamma.complex_delim(TF)
complex_delim = _pygamma.complex_delim

def complex_scinot(TF):
    return _pygamma.complex_scinot(TF)
complex_scinot = _pygamma.complex_scinot

def complex_digits(digs):
    return _pygamma.complex_digits(digs)
complex_digits = _pygamma.complex_digits

def complex_dadp(adp):
    return _pygamma.complex_dadp(adp)
complex_dadp = _pygamma.complex_dadp

def complex_dlength():
    return _pygamma.complex_dlength()
complex_dlength = _pygamma.complex_dlength

def complex_dformat():
    return _pygamma.complex_dformat()
complex_dformat = _pygamma.complex_dformat

def complex_zlength():
    return _pygamma.complex_zlength()
complex_zlength = _pygamma.complex_zlength

def complex_normphase():
    return _pygamma.complex_normphase()
complex_normphase = _pygamma.complex_normphase

def complex_complex_getf(phase, math, science, digits, digs_aft_dpoint):
    return _pygamma.complex_complex_getf(phase, math, science, digits, digs_aft_dpoint)
complex_complex_getf = _pygamma.complex_complex_getf


def DoubleMag(x):
    return _pygamma.DoubleMag(x)
DoubleMag = _pygamma.DoubleMag

def SecUnits(mag, sf):
    return _pygamma.SecUnits(mag, sf)
SecUnits = _pygamma.SecUnits

def HzUnits(mag, sf):
    return _pygamma.HzUnits(mag, sf)
HzUnits = _pygamma.HzUnits

def Mo_vector(*args):
    return _pygamma.Mo_vector(*args)
Mo_vector = _pygamma.Mo_vector

def analyze(tinc, ntimes, do_ss, qn, T1, gamB1, w):
    return _pygamma.analyze(tinc, ntimes, do_ss, qn, T1, gamB1, w)
analyze = _pygamma.analyze

def TrajTiming(argc, argv, tinc, N, qn, T1, gamB1, w):
    return _pygamma.TrajTiming(argc, argv, tinc, N, qn, T1, gamB1, w)
TrajTiming = _pygamma.TrajTiming
class BlochSys(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlochSys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlochSys, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_BlochSys(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_BlochSys
    __del__ = lambda self: None

    def __assign__(self, sys):
        return _pygamma.BlochSys___assign__(self, sys)

    def NIso(self):
        return _pygamma.BlochSys_NIso(self)

    def IsoMaxLength(self):
        return _pygamma.BlochSys_IsoMaxLength(self)

    def NSpins(self):
        return _pygamma.BlochSys_NSpins(self)

    def R1(self, i):
        return _pygamma.BlochSys_R1(self, i)

    def T1(self, i):
        return _pygamma.BlochSys_T1(self, i)

    def R2(self, i):
        return _pygamma.BlochSys_R2(self, i)

    def T2(self, i):
        return _pygamma.BlochSys_T2(self, i)

    def LW(self, i):
        return _pygamma.BlochSys_LW(self, i)

    def MaxExchange(self):
        return _pygamma.BlochSys_MaxExchange(self)

    def Norms(self, *args):
        return _pygamma.BlochSys_Norms(self, *args)

    def Norm(self, *args):
        return _pygamma.BlochSys_Norm(self, *args)

    def H(self, *args):
        return _pygamma.BlochSys_H(self, *args)

    def B(self, *args):
        return _pygamma.BlochSys_B(self, *args)

    def R(self):
        return _pygamma.BlochSys_R(self)

    def K(self):
        return _pygamma.BlochSys_K(self)

    def Meq(self):
        return _pygamma.BlochSys_Meq(self)

    def Mo(self):
        return _pygamma.BlochSys_Mo(self)

    def Mx(self):
        return _pygamma.BlochSys_Mx(self)

    def My(self):
        return _pygamma.BlochSys_My(self)

    def Mz(self):
        return _pygamma.BlochSys_Mz(self)

    def Mss(self, *args):
        return _pygamma.BlochSys_Mss(self, *args)

    def DetectMu(self, *args):
        return _pygamma.BlochSys_DetectMu(self, *args)

    def DetectMx(self, *args):
        return _pygamma.BlochSys_DetectMx(self, *args)

    def DetectMy(self, *args):
        return _pygamma.BlochSys_DetectMy(self, *args)

    def DetectMz(self, *args):
        return _pygamma.BlochSys_DetectMz(self, *args)

    def size(self):
        return _pygamma.BlochSys_size(self)

    def read(self, *args):
        return _pygamma.BlochSys_read(self, *args)

    def ask_read(self, *args):
        return _pygamma.BlochSys_ask_read(self, *args)
BlochSys_swigregister = _pygamma.BlochSys_swigregister
BlochSys_swigregister(BlochSys)
complex0 = cvar.complex0
complex1 = cvar.complex1
complexi = cvar.complexi

class MagVec(col_vector):
    __swig_setmethods__ = {}
    for _s in [col_vector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MagVec, name, value)
    __swig_getmethods__ = {}
    for _s in [col_vector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MagVec, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_MagVec(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __add__(self, M1):
        return _pygamma.MagVec___add__(self, M1)

    def __iadd__(self, M1):
        return _pygamma.MagVec___iadd__(self, M1)

    def __sub__(self, M1):
        return _pygamma.MagVec___sub__(self, M1)

    def __isub__(self, M1):
        return _pygamma.MagVec___isub__(self, M1)

    def NComps(self):
        return _pygamma.MagVec_NComps(self)

    def x(self, cmp=0):
        return _pygamma.MagVec_x(self, cmp)

    def y(self, cmp=0):
        return _pygamma.MagVec_y(self, cmp)

    def z(self, cmp=0):
        return _pygamma.MagVec_z(self, cmp)

    def norm(self, cmp=0):
        return _pygamma.MagVec_norm(self, cmp)

    def theta(self, cmp=0):
        return _pygamma.MagVec_theta(self, cmp)

    def phi(self, cmp=0):
        return _pygamma.MagVec_phi(self, cmp)

    def Norms(self, *args):
        return _pygamma.MagVec_Norms(self, *args)

    def Norm(self, *args):
        return _pygamma.MagVec_Norm(self, *args)

    def PSetAdd(self, pset, pfx=-1):
        return _pygamma.MagVec_PSetAdd(self, pset, pfx)

    def write(self, *args):
        return _pygamma.MagVec_write(self, *args)

    def read(self, *args):
        return _pygamma.MagVec_read(self, *args)

    def ask_read(self, *args):
        return _pygamma.MagVec_ask_read(self, *args)

    def printStrings(self):
        return _pygamma.MagVec_printStrings(self)

    def Mx(self, *args):
        return _pygamma.MagVec_Mx(self, *args)

    def My(self, *args):
        return _pygamma.MagVec_My(self, *args)

    def Mz(self, *args):
        return _pygamma.MagVec_Mz(self, *args)

    def MxVec(self, *args):
        return _pygamma.MagVec_MxVec(self, *args)

    def MyVec(self, *args):
        return _pygamma.MagVec_MyVec(self, *args)

    def MzVec(self, *args):
        return _pygamma.MagVec_MzVec(self, *args)
    __swig_destroy__ = _pygamma.delete_MagVec
    __del__ = lambda self: None
MagVec_swigregister = _pygamma.MagVec_swigregister
MagVec_swigregister(MagVec)

class BlochAcq(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlochAcq, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlochAcq, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_BlochAcq(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_BlochAcq
    __del__ = lambda self: None

    def __assign__(self, ACQ1):
        return _pygamma.BlochAcq___assign__(self, ACQ1)

    def T(self, *args):
        return _pygamma.BlochAcq_T(self, *args)

    def F(self, *args):
        return _pygamma.BlochAcq_F(self, *args)

    def table(self, *args):
        return _pygamma.BlochAcq_table(self, *args)

    def full_size(self):
        return _pygamma.BlochAcq_full_size(self)
BlochAcq_swigregister = _pygamma.BlochAcq_swigregister
BlochAcq_swigregister(BlochAcq)


def T_D(*args):
    return _pygamma.T_D(*args)
T_D = _pygamma.T_D

def T_CSA(sys, spin):
    return _pygamma.T_CSA(sys, spin)
T_CSA = _pygamma.T_CSA

def T_CS2(*args):
    return _pygamma.T_CS2(*args)
T_CS2 = _pygamma.T_CS2

def T_CS(*args):
    return _pygamma.T_CS(*args)
T_CS = _pygamma.T_CS

def T_RF(*args):
    return _pygamma.T_RF(*args)
T_RF = _pygamma.T_RF

def T_Q(*args):
    return _pygamma.T_Q(*args)
T_Q = _pygamma.T_Q

def T1(*args):
    return _pygamma.T1(*args)
T1 = _pygamma.T1

def T10(*args):
    return _pygamma.T10(*args)
T10 = _pygamma.T10

def T11(*args):
    return _pygamma.T11(*args)
T11 = _pygamma.T11

def T22wh(sys, spin1, spin2):
    return _pygamma.T22wh(sys, spin1, spin2)
T22wh = _pygamma.T22wh

def T22SSirr(*args):
    return _pygamma.T22SSirr(*args)
T22SSirr = _pygamma.T22SSirr

def T2(*args):
    return _pygamma.T2(*args)
T2 = _pygamma.T2

def T20(*args):
    return _pygamma.T20(*args)
T20 = _pygamma.T20

def T21(*args):
    return _pygamma.T21(*args)
T21 = _pygamma.T21

def T22(*args):
    return _pygamma.T22(*args)
T22 = _pygamma.T22

def T2SS(*args):
    return _pygamma.T2SS(*args)
T2SS = _pygamma.T2SS

def T20SS(*args):
    return _pygamma.T20SS(*args)
T20SS = _pygamma.T20SS

def T21SS(*args):
    return _pygamma.T21SS(*args)
T21SS = _pygamma.T21SS

def T22SS(*args):
    return _pygamma.T22SS(*args)
T22SS = _pygamma.T22SS

def T_prod(*args):
    return _pygamma.T_prod(*args)
T_prod = _pygamma.T_prod

def Clebsch_Gordan(a, b, alpha, beta, c, gamma):
    return _pygamma.Clebsch_Gordan(a, b, alpha, beta, c, gamma)
Clebsch_Gordan = _pygamma.Clebsch_Gordan

def Wigner_3j(a, b, c, alpha, beta, gamma):
    return _pygamma.Wigner_3j(a, b, c, alpha, beta, gamma)
Wigner_3j = _pygamma.Wigner_3j
class spin_T(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, spin_T, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, spin_T, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_spin_T(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_spin_T
    __del__ = lambda self: None

    def __assign__(self, SphT):
        return _pygamma.spin_T___assign__(self, SphT)

    def component(self, l, m):
        return _pygamma.spin_T_component(self, l, m)

    def rotate(self, *args):
        return _pygamma.spin_T_rotate(self, *args)

    def Rank(self):
        return _pygamma.spin_T_Rank(self)
spin_T_swigregister = _pygamma.spin_T_swigregister
spin_T_swigregister(spin_T)


def Rmx(alpha, beta, gamma):
    return _pygamma.Rmx(alpha, beta, gamma)
Rmx = _pygamma.Rmx
class coord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coord, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_coord(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_coord
    __del__ = lambda self: None

    def __assign__(self, pt):
        return _pygamma.coord___assign__(self, pt)

    def get(self, i):
        return _pygamma.coord_get(self, i)

    def x(self, *args):
        return _pygamma.coord_x(self, *args)

    def y(self, *args):
        return _pygamma.coord_y(self, *args)

    def z(self, *args):
        return _pygamma.coord_z(self, *args)

    def xyz(self, *args):
        return _pygamma.coord_xyz(self, *args)

    def norm(self):
        return _pygamma.coord_norm(self)

    def Rad(self, *args):
        return _pygamma.coord_Rad(self, *args)

    def theta(self, *args):
        return _pygamma.coord_theta(self, *args)

    def phi(self, *args):
        return _pygamma.coord_phi(self, *args)

    def invert(self):
        return _pygamma.coord_invert(self)
    __swig_getmethods__["Rz"] = lambda x: _pygamma.coord_Rz
    if _newclass:
        Rz = staticmethod(_pygamma.coord_Rz)
    __swig_getmethods__["Rx"] = lambda x: _pygamma.coord_Rx
    if _newclass:
        Rx = staticmethod(_pygamma.coord_Rx)
    __swig_getmethods__["Ry"] = lambda x: _pygamma.coord_Ry
    if _newclass:
        Ry = staticmethod(_pygamma.coord_Ry)

    def xrotate(self, theta, rad=0):
        return _pygamma.coord_xrotate(self, theta, rad)

    def yrotate(self, theta, rad=0):
        return _pygamma.coord_yrotate(self, theta, rad)

    def zrotate(self, phi, rad=0):
        return _pygamma.coord_zrotate(self, phi, rad)

    def Ralpha(self, alpha, rad):
        return _pygamma.coord_Ralpha(self, alpha, rad)

    def Rbeta(self, beta, rad):
        return _pygamma.coord_Rbeta(self, beta, rad)

    def Rgamma(self, gamma, rad):
        return _pygamma.coord_Rgamma(self, gamma, rad)

    def REuler(self, alpha, beta, gamma, rad):
        return _pygamma.coord_REuler(self, alpha, beta, gamma, rad)

    def rotate(self, *args):
        return _pygamma.coord_rotate(self, *args)

    def trans_x(self, delx):
        return _pygamma.coord_trans_x(self, delx)

    def trans_x_ip(self, delx):
        return _pygamma.coord_trans_x_ip(self, delx)

    def trans_y(self, dely):
        return _pygamma.coord_trans_y(self, dely)

    def trans_y_ip(self, dely):
        return _pygamma.coord_trans_y_ip(self, dely)

    def trans_z(self, delz):
        return _pygamma.coord_trans_z(self, delz)

    def trans_z_ip(self, delz):
        return _pygamma.coord_trans_z_ip(self, delz)

    def translate(self, *args):
        return _pygamma.coord_translate(self, *args)

    def translate_ip(self, *args):
        return _pygamma.coord_translate_ip(self, *args)

    def __add__(self, arg2):
        return _pygamma.coord___add__(self, arg2)

    def __sub__(self, arg2):
        return _pygamma.coord___sub__(self, arg2)

    def __iadd__(self, arg2):
        return _pygamma.coord___iadd__(self, arg2)

    def __isub__(self, arg2):
        return _pygamma.coord___isub__(self, arg2)

    def __mul__(self, r):
        return _pygamma.coord___mul__(self, r)

    def __imul__(self, r):
        return _pygamma.coord___imul__(self, r)

    def __div__(self, r):
        return _pygamma.coord___div__(self, r)

    def __idiv__(self, r):
        return _pygamma.coord___idiv__(self, r)

    def __eq__(self, pt):
        return _pygamma.coord___eq__(self, pt)

    def __ne__(self, pt):
        return _pygamma.coord___ne__(self, pt)

    def __gt__(self, pt):
        return _pygamma.coord___gt__(self, pt)

    def __lt__(self, pt):
        return _pygamma.coord___lt__(self, pt)

    def param(self, *args):
        return _pygamma.coord_param(self, *args)

    def read(self, *args):
        return _pygamma.coord_read(self, *args)
    __swig_getmethods__["length"] = lambda x: _pygamma.coord_length
    if _newclass:
        length = staticmethod(_pygamma.coord_length)

    def Cart2Sph(self, rad=1):
        return _pygamma.coord_Cart2Sph(self, rad)

    def Sph2Cart(self, rad=1):
        return _pygamma.coord_Sph2Cart(self, rad)

    def Cart2Cyl(self, rad=1):
        return _pygamma.coord_Cart2Cyl(self, rad)

    def Cyl2Cart(self, rad=1):
        return _pygamma.coord_Cyl2Cart(self, rad)

    def Sph2Cyl(self, rad=1):
        return _pygamma.coord_Sph2Cyl(self, rad)

    def Cyl2Sph(self, rad=1):
        return _pygamma.coord_Cyl2Sph(self, rad)
    __swig_getmethods__["getDefCoord"] = lambda x: _pygamma.coord_getDefCoord
    if _newclass:
        getDefCoord = staticmethod(_pygamma.coord_getDefCoord)
    __swig_getmethods__["setDefCoord"] = lambda x: _pygamma.coord_setDefCoord
    if _newclass:
        setDefCoord = staticmethod(_pygamma.coord_setDefCoord)
    __swig_getmethods__["SetCutoff"] = lambda x: _pygamma.coord_SetCutoff
    if _newclass:
        SetCutoff = staticmethod(_pygamma.coord_SetCutoff)
coord_swigregister = _pygamma.coord_swigregister
coord_swigregister(coord)

def coord_Rz(phi, rad=0):
    return _pygamma.coord_Rz(phi, rad)
coord_Rz = _pygamma.coord_Rz

def coord_Rx(theta, rad=0):
    return _pygamma.coord_Rx(theta, rad)
coord_Rx = _pygamma.coord_Rx

def coord_Ry(theta, rad=0):
    return _pygamma.coord_Ry(theta, rad)
coord_Ry = _pygamma.coord_Ry

def coord_length():
    return _pygamma.coord_length()
coord_length = _pygamma.coord_length

def coord_getDefCoord():
    return _pygamma.coord_getDefCoord()
coord_getDefCoord = _pygamma.coord_getDefCoord

def coord_setDefCoord(dpt):
    return _pygamma.coord_setDefCoord(dpt)
coord_setDefCoord = _pygamma.coord_setDefCoord

def coord_SetCutoff(co=-1):
    return _pygamma.coord_SetCutoff(co)
coord_SetCutoff = _pygamma.coord_SetCutoff

class coord_vec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coord_vec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coord_vec, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_coord_vec(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_coord_vec
    __del__ = lambda self: None

    def __assign__(self, cvec1):
        return _pygamma.coord_vec___assign__(self, cvec1)

    def xrotate(self, theta, rad=0):
        return _pygamma.coord_vec_xrotate(self, theta, rad)

    def yrotate(self, theta, rad=0):
        return _pygamma.coord_vec_yrotate(self, theta, rad)

    def zrotate(self, phi, rad=0):
        return _pygamma.coord_vec_zrotate(self, phi, rad)

    def rotate(self, *args):
        return _pygamma.coord_vec_rotate(self, *args)

    def rotate_ip(self, *args):
        return _pygamma.coord_vec_rotate_ip(self, *args)

    def translate(self, *args):
        return _pygamma.coord_vec_translate(self, *args)

    def translate_ip(self, *args):
        return _pygamma.coord_vec_translate_ip(self, *args)

    def trans_x(self, delx):
        return _pygamma.coord_vec_trans_x(self, delx)

    def trans_y(self, dely):
        return _pygamma.coord_vec_trans_y(self, dely)

    def trans_z(self, delz):
        return _pygamma.coord_vec_trans_z(self, delz)

    def trans_x_ip(self, delx):
        return _pygamma.coord_vec_trans_x_ip(self, delx)

    def trans_y_ip(self, dely):
        return _pygamma.coord_vec_trans_y_ip(self, dely)

    def trans_z_ip(self, delz):
        return _pygamma.coord_vec_trans_z_ip(self, delz)

    def project(self, projx, projy):
        return _pygamma.coord_vec_project(self, projx, projy)

    def __mul__(self, r):
        return _pygamma.coord_vec___mul__(self, r)

    def __imul__(self, r):
        return _pygamma.coord_vec___imul__(self, r)

    def __div__(self, r):
        return _pygamma.coord_vec___div__(self, r)

    def __idiv__(self, r):
        return _pygamma.coord_vec___idiv__(self, r)

    def __add__(self, cv):
        return _pygamma.coord_vec___add__(self, cv)

    def __iadd__(self, cv):
        return _pygamma.coord_vec___iadd__(self, cv)

    def __sub__(self, cv):
        return _pygamma.coord_vec___sub__(self, cv)

    def __isub__(self, cv):
        return _pygamma.coord_vec___isub__(self, cv)

    def size(self):
        return _pygamma.coord_vec_size(self)

    def max_x(self):
        return _pygamma.coord_vec_max_x(self)

    def max_y(self):
        return _pygamma.coord_vec_max_y(self)

    def max_z(self):
        return _pygamma.coord_vec_max_z(self)

    def maxima(self, *args):
        return _pygamma.coord_vec_maxima(self, *args)

    def max_R(self, *args):
        return _pygamma.coord_vec_max_R(self, *args)

    def vectors(self):
        return _pygamma.coord_vec_vectors(self)

    def vectors_f(self):
        return _pygamma.coord_vec_vectors_f(self)

    def distance(self, pt1, pt2, Angs=0):
        return _pygamma.coord_vec_distance(self, pt1, pt2, Angs)

    def distances(self, Angs=0):
        return _pygamma.coord_vec_distances(self, Angs)

    def thetas(self, deg=0):
        return _pygamma.coord_vec_thetas(self, deg)

    def phis(self, deg=0):
        return _pygamma.coord_vec_phis(self, deg)

    def __call__(self, index):
        return _pygamma.coord_vec___call__(self, index)

    def put(self, *args):
        return _pygamma.coord_vec_put(self, *args)

    def get(self, index):
        return _pygamma.coord_vec_get(self, index)

    def x(self, index):
        return _pygamma.coord_vec_x(self, index)

    def y(self, index):
        return _pygamma.coord_vec_y(self, index)

    def z(self, index):
        return _pygamma.coord_vec_z(self, index)

    def get_block(self, index, npts):
        return _pygamma.coord_vec_get_block(self, index, npts)

    def put_block(self, index, cv):
        return _pygamma.coord_vec_put_block(self, index, cv)

    def PSetAdd(self, pset, idx=-1):
        return _pygamma.coord_vec_PSetAdd(self, pset, idx)

    def is_zero(self):
        return _pygamma.coord_vec_is_zero(self)

    def ask_read(self, argc, argv, argn, idx=-1, warn=2):
        return _pygamma.coord_vec_ask_read(self, argc, argv, argn, idx, warn)

    def read(self, *args):
        return _pygamma.coord_vec_read(self, *args)

    def Cart2Sph(self, rad=1):
        return _pygamma.coord_vec_Cart2Sph(self, rad)

    def Sph2Cart(self, rad=1):
        return _pygamma.coord_vec_Sph2Cart(self, rad)

    def Cart2Cyl(self, rad=1):
        return _pygamma.coord_vec_Cart2Cyl(self, rad)

    def Cyl2Cart(self, rad=1):
        return _pygamma.coord_vec_Cyl2Cart(self, rad)

    def Sph2Cyl(self, rad=1):
        return _pygamma.coord_vec_Sph2Cyl(self, rad)

    def Cyl2Sph(self, rad=1):
        return _pygamma.coord_vec_Cyl2Sph(self, rad)
coord_vec_swigregister = _pygamma.coord_vec_swigregister
coord_vec_swigregister(coord_vec)
UnitX = cvar.UnitX
UnitY = cvar.UnitY
UnitZ = cvar.UnitZ
coord0 = cvar.coord0


def Exponential(*args):
    return _pygamma.Exponential(*args)
Exponential = _pygamma.Exponential

def DExponential(*args):
    return _pygamma.DExponential(*args)
DExponential = _pygamma.DExponential

def Exponen_cut(*args):
    return _pygamma.Exponen_cut(*args)
Exponen_cut = _pygamma.Exponen_cut
class ExchProcM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExchProcM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExchProcM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["KRate"] = _pygamma.ExchProcM_KRate_set
    __swig_getmethods__["KRate"] = _pygamma.ExchProcM_KRate_get
    if _newclass:
        KRate = _swig_property(_pygamma.ExchProcM_KRate_get, _pygamma.ExchProcM_KRate_set)
    __swig_setmethods__["Spins"] = _pygamma.ExchProcM_Spins_set
    __swig_getmethods__["Spins"] = _pygamma.ExchProcM_Spins_get
    if _newclass:
        Spins = _swig_property(_pygamma.ExchProcM_Spins_get, _pygamma.ExchProcM_Spins_set)

    def XPerror(self, *args):
        return _pygamma.ExchProcM_XPerror(self, *args)

    def XPfatal(self, *args):
        return _pygamma.ExchProcM_XPfatal(self, *args)

    def getExch(self, pset, idx, exch, warn=True):
        return _pygamma.ExchProcM_getExch(self, pset, idx, exch, warn)

    def parseExch(self, Exval, sps, warn=True):
        return _pygamma.ExchProcM_parseExch(self, Exval, sps, warn)

    def getComps(self, pset, idx, sps, warn=True):
        return _pygamma.ExchProcM_getComps(self, pset, idx, sps, warn)

    def getRate(self, pset, idx, rate, warn=True):
        return _pygamma.ExchProcM_getRate(self, pset, idx, rate, warn)

    def getXP(self, pset, rate, sps, idx, warn=True):
        return _pygamma.ExchProcM_getXP(self, pset, rate, sps, idx, warn)

    def setXP(self, pset, idx, warn=True):
        return _pygamma.ExchProcM_setXP(self, pset, idx, warn)

    def CCheck(self, comp, warn=True):
        return _pygamma.ExchProcM_CCheck(self, comp, warn)

    def FCheck(self, warn=True):
        return _pygamma.ExchProcM_FCheck(self, warn)

    def __init__(self, *args):
        this = _pygamma.new_ExchProcM(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __assign__(self, pr):
        return _pygamma.ExchProcM___assign__(self, pr)
    __swig_destroy__ = _pygamma.delete_ExchProcM
    __del__ = lambda self: None

    def Kex(self, *args):
        return _pygamma.ExchProcM_Kex(self, *args)

    def NComps(self):
        return _pygamma.ExchProcM_NComps(self)

    def NSpins(self):
        return _pygamma.ExchProcM_NSpins(self)

    def Comp(self, comp):
        return _pygamma.ExchProcM_Comp(self, comp)

    def mixes(self, i, j):
        return _pygamma.ExchProcM_mixes(self, i, j)

    def involves(self, i):
        return _pygamma.ExchProcM_involves(self, i)

    def read(self, *args):
        return _pygamma.ExchProcM_read(self, *args)

    def ExchStr(self):
        return _pygamma.ExchProcM_ExchStr(self)
ExchProcM_swigregister = _pygamma.ExchProcM_swigregister
ExchProcM_swigregister(ExchProcM)


def Lorentz_cut(*args):
    return _pygamma.Lorentz_cut(*args)
Lorentz_cut = _pygamma.Lorentz_cut

def Lorentz_int(*args):
    return _pygamma.Lorentz_int(*args)
Lorentz_int = _pygamma.Lorentz_int

def ask_Lorentzian(argc, argv, qn, N, wst, wfi, W, R, fact, pplw):
    return _pygamma.ask_Lorentzian(argc, argv, qn, N, wst, wfi, W, R, fact, pplw)
ask_Lorentzian = _pygamma.ask_Lorentzian

def read_Lorentzian(filein, N, wst, wfi, W, R, fact, pplw, idx=-1):
    return _pygamma.read_Lorentzian(filein, N, wst, wfi, W, R, fact, pplw, idx)
read_Lorentzian = _pygamma.read_Lorentzian

def DLorentzian(*args):
    return _pygamma.DLorentzian(*args)
DLorentzian = _pygamma.DLorentzian

def A1(*args):
    return _pygamma.A1(*args)
A1 = _pygamma.A1

def A11(x, y, z, m):
    return _pygamma.A11(x, y, z, m)
A11 = _pygamma.A11

def SphA1(*args):
    return _pygamma.SphA1(*args)
SphA1 = _pygamma.SphA1

def A2(*args):
    return _pygamma.A2(*args)
A2 = _pygamma.A2

def A20(*args):
    return _pygamma.A20(*args)
A20 = _pygamma.A20

def A21(*args):
    return _pygamma.A21(*args)
A21 = _pygamma.A21

def A22(*args):
    return _pygamma.A22(*args)
A22 = _pygamma.A22

def T_comp(*args):
    return _pygamma.T_comp(*args)
T_comp = _pygamma.T_comp

def T_mult(*args):
    return _pygamma.T_mult(*args)
T_mult = _pygamma.T_mult

def T_rot(*args):
    return _pygamma.T_rot(*args)
T_rot = _pygamma.T_rot
class space_T(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, space_T, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, space_T, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_space_T(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_space_T
    __del__ = lambda self: None

    def __assign__(self, SphT):
        return _pygamma.space_T___assign__(self, SphT)

    def PASys(self):
        return _pygamma.space_T_PASys(self)

    def PASys_EA(self):
        return _pygamma.space_T_PASys_EA(self)

    def iso(self, *args):
        return _pygamma.space_T_iso(self, *args)

    def delz(self, *args):
        return _pygamma.space_T_delz(self, *args)

    def eta(self, *args):
        return _pygamma.space_T_eta(self, *args)

    def alpha(self):
        return _pygamma.space_T_alpha(self)

    def beta(self):
        return _pygamma.space_T_beta(self)

    def gamma(self):
        return _pygamma.space_T_gamma(self)

    def exists(self, *args):
        return _pygamma.space_T_exists(self, *args)

    def Rank(self):
        return _pygamma.space_T_Rank(self)

    def component(self, L, M):
        return _pygamma.space_T_component(self, L, M)

    def Ccomponent(self, r, c=0):
        return _pygamma.space_T_Ccomponent(self, r, c)

    def rotate(self, *args):
        return _pygamma.space_T_rotate(self, *args)

    def param(self, *args):
        return _pygamma.space_T_param(self, *args)

    def write(self, filename):
        return _pygamma.space_T_write(self, filename)

    def read(self, filename):
        return _pygamma.space_T_read(self, filename)
space_T_swigregister = _pygamma.space_T_swigregister
space_T_swigregister(space_T)


def Y_error(*args):
    return _pygamma.Y_error(*args)
Y_error = _pygamma.Y_error

def Y_fatality(error):
    return _pygamma.Y_fatality(error)
Y_fatality = _pygamma.Y_fatality

def Y00rad():
    return _pygamma.Y00rad()
Y00rad = _pygamma.Y00rad

def Y10rad(theta):
    return _pygamma.Y10rad(theta)
Y10rad = _pygamma.Y10rad

def Y11rad(theta, phi):
    return _pygamma.Y11rad(theta, phi)
Y11rad = _pygamma.Y11rad

def Y1m1rad(theta, phi):
    return _pygamma.Y1m1rad(theta, phi)
Y1m1rad = _pygamma.Y1m1rad

def Y20rad(theta):
    return _pygamma.Y20rad(theta)
Y20rad = _pygamma.Y20rad

def Y21rad(theta, phi):
    return _pygamma.Y21rad(theta, phi)
Y21rad = _pygamma.Y21rad

def Y2m1rad(theta, phi):
    return _pygamma.Y2m1rad(theta, phi)
Y2m1rad = _pygamma.Y2m1rad

def Y22rad(theta, phi):
    return _pygamma.Y22rad(theta, phi)
Y22rad = _pygamma.Y22rad

def Y2m2rad(theta, phi):
    return _pygamma.Y2m2rad(theta, phi)
Y2m2rad = _pygamma.Y2m2rad

def Y30rad(theta):
    return _pygamma.Y30rad(theta)
Y30rad = _pygamma.Y30rad

def Y31rad(theta, phi):
    return _pygamma.Y31rad(theta, phi)
Y31rad = _pygamma.Y31rad

def Y3m1rad(theta, phi):
    return _pygamma.Y3m1rad(theta, phi)
Y3m1rad = _pygamma.Y3m1rad

def Y32rad(theta, phi):
    return _pygamma.Y32rad(theta, phi)
Y32rad = _pygamma.Y32rad

def Y3m2rad(theta, phi):
    return _pygamma.Y3m2rad(theta, phi)
Y3m2rad = _pygamma.Y3m2rad

def Y33rad(theta, phi):
    return _pygamma.Y33rad(theta, phi)
Y33rad = _pygamma.Y33rad

def Y3m3rad(theta, phi):
    return _pygamma.Y3m3rad(theta, phi)
Y3m3rad = _pygamma.Y3m3rad

def Ylmrad(l, m, theta, phi):
    return _pygamma.Ylmrad(l, m, theta, phi)
Ylmrad = _pygamma.Ylmrad

def Y00():
    return _pygamma.Y00()
Y00 = _pygamma.Y00

def Y10(theta):
    return _pygamma.Y10(theta)
Y10 = _pygamma.Y10

def Y11(theta, phi):
    return _pygamma.Y11(theta, phi)
Y11 = _pygamma.Y11

def Y1m1(theta, phi):
    return _pygamma.Y1m1(theta, phi)
Y1m1 = _pygamma.Y1m1

def Y20(theta):
    return _pygamma.Y20(theta)
Y20 = _pygamma.Y20

def Y21(theta, phi):
    return _pygamma.Y21(theta, phi)
Y21 = _pygamma.Y21

def Y2m1(theta, phi):
    return _pygamma.Y2m1(theta, phi)
Y2m1 = _pygamma.Y2m1

def Y22(theta, phi):
    return _pygamma.Y22(theta, phi)
Y22 = _pygamma.Y22

def Y2m2(theta, phi):
    return _pygamma.Y2m2(theta, phi)
Y2m2 = _pygamma.Y2m2

def Y30(theta):
    return _pygamma.Y30(theta)
Y30 = _pygamma.Y30

def Y31(theta, phi):
    return _pygamma.Y31(theta, phi)
Y31 = _pygamma.Y31

def Y3m1(theta, phi):
    return _pygamma.Y3m1(theta, phi)
Y3m1 = _pygamma.Y3m1

def Y32(theta, phi):
    return _pygamma.Y32(theta, phi)
Y32 = _pygamma.Y32

def Y3m2(theta, phi):
    return _pygamma.Y3m2(theta, phi)
Y3m2 = _pygamma.Y3m2

def Y33(theta, phi):
    return _pygamma.Y33(theta, phi)
Y33 = _pygamma.Y33

def Y3m3(theta, phi):
    return _pygamma.Y3m3(theta, phi)
Y3m3 = _pygamma.Y3m3

def Ylm(l, m, theta, phi):
    return _pygamma.Ylm(l, m, theta, phi)
Ylm = _pygamma.Ylm

def Wigner_error(error):
    return _pygamma.Wigner_error(error)
Wigner_error = _pygamma.Wigner_error

def Wigner_fatality(error):
    return _pygamma.Wigner_fatality(error)
Wigner_fatality = _pygamma.Wigner_fatality

def d0():
    return _pygamma.d0()
d0 = _pygamma.d0

def dm1half(n, beta):
    return _pygamma.dm1half(n, beta)
dm1half = _pygamma.dm1half

def d1half(*args):
    return _pygamma.d1half(*args)
d1half = _pygamma.d1half

def d11(n, beta):
    return _pygamma.d11(n, beta)
d11 = _pygamma.d11

def d10(n, beta):
    return _pygamma.d10(n, beta)
d10 = _pygamma.d10

def d1m1(n, beta):
    return _pygamma.d1m1(n, beta)
d1m1 = _pygamma.d1m1

def d1(m, n, beta):
    return _pygamma.d1(m, n, beta)
d1 = _pygamma.d1

def d22(n, beta):
    return _pygamma.d22(n, beta)
d22 = _pygamma.d22

def d21(n, beta):
    return _pygamma.d21(n, beta)
d21 = _pygamma.d21

def d20(n, beta):
    return _pygamma.d20(n, beta)
d20 = _pygamma.d20

def d2m1(n, beta):
    return _pygamma.d2m1(n, beta)
d2m1 = _pygamma.d2m1

def d2m2(n, beta):
    return _pygamma.d2m2(n, beta)
d2m2 = _pygamma.d2m2

def d2(m, n, beta):
    return _pygamma.d2(m, n, beta)
d2 = _pygamma.d2

def fact(a):
    return _pygamma.fact(a)
fact = _pygamma.fact

def dJ_int(J, m, n, beta):
    return _pygamma.dJ_int(J, m, n, beta)
dJ_int = _pygamma.dJ_int

def dJ_half_int(J, m, n, beta):
    return _pygamma.dJ_half_int(J, m, n, beta)
dJ_half_int = _pygamma.dJ_half_int

def dJ(*args):
    return _pygamma.dJ(*args)
dJ = _pygamma.dJ

def D0():
    return _pygamma.D0()
D0 = _pygamma.D0

def D1half(m, n, alpha, beta, gamma):
    return _pygamma.D1half(m, n, alpha, beta, gamma)
D1half = _pygamma.D1half

def D1(m, n, alpha, beta, gamma):
    return _pygamma.D1(m, n, alpha, beta, gamma)
D1 = _pygamma.D1

def D2(m, n, alpha, beta, gamma):
    return _pygamma.D2(m, n, alpha, beta, gamma)
D2 = _pygamma.D2

def DJ(*args):
    return _pygamma.DJ(*args)
DJ = _pygamma.DJ

def exponential_multiply(*args):
    return _pygamma.exponential_multiply(*args)
exponential_multiply = _pygamma.exponential_multiply

def exponential(size, offset=0, alpha=0):
    return _pygamma.exponential(size, offset, alpha)
exponential = _pygamma.exponential

def Gaussian(size, offset=0, sigma=42.0):
    return _pygamma.Gaussian(size, offset, sigma)
Gaussian = _pygamma.Gaussian

def Hamming(size, offset=0):
    return _pygamma.Hamming(size, offset)
Hamming = _pygamma.Hamming

def Hanning(size, offset=0):
    return _pygamma.Hanning(size, offset)
Hanning = _pygamma.Hanning

def hyperbol_sec(size, offset=0, alpha=38.0):
    return _pygamma.hyperbol_sec(size, offset, alpha)
hyperbol_sec = _pygamma.hyperbol_sec

def Kaiser(size, theta=3.14159265358979323846, offset=0):
    return _pygamma.Kaiser(size, theta, offset)
Kaiser = _pygamma.Kaiser

def Lorentzian(*args):
    return _pygamma.Lorentzian(*args)
Lorentzian = _pygamma.Lorentzian

def sin_square(size, offset=0):
    return _pygamma.sin_square(size, offset)
sin_square = _pygamma.sin_square

def sinc(size, offset, inc):
    return _pygamma.sinc(size, offset, inc)
sinc = _pygamma.sinc

def square_wave(size, start, finish):
    return _pygamma.square_wave(size, start, finish)
square_wave = _pygamma.square_wave

def Noise(*args):
    return _pygamma.Noise(*args)
Noise = _pygamma.Noise
class spin_sys(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, spin_sys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, spin_sys, name)
    __repr__ = _swig_repr

    def check_spin(self, spin, die=1):
        return _pygamma.spin_sys_check_spin(self, spin, die)

    def check_spins(self, spin1, spin2, die=1):
        return _pygamma.spin_sys_check_spins(self, spin1, spin2, die)

    def __init__(self, *args):
        this = _pygamma.new_spin_sys(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_spin_sys
    __del__ = lambda self: None

    def __assign__(self, sys):
        return _pygamma.spin_sys___assign__(self, sys)

    def spins(self):
        return _pygamma.spin_sys_spins(self)

    def spinpairs(self):
        return _pygamma.spin_sys_spinpairs(self)

    def HS(self, *args):
        return _pygamma.spin_sys_HS(self, *args)

    def isotope(self, arg2, arg3):
        return _pygamma.spin_sys_isotope(self, arg2, arg3)

    def weight(self, arg2):
        return _pygamma.spin_sys_weight(self, arg2)

    def symbol(self, spin):
        return _pygamma.spin_sys_symbol(self, spin)

    def qn(self, *args):
        return _pygamma.spin_sys_qn(self, *args)

    def element(self, spin):
        return _pygamma.spin_sys_element(self, spin)

    def momentum(self, *args):
        return _pygamma.spin_sys_momentum(self, *args)

    def gamma(self, *args):
        return _pygamma.spin_sys_gamma(self, *args)

    def HSvect(self):
        return _pygamma.spin_sys_HSvect(self)

    def qState(self, state):
        return _pygamma.spin_sys_qState(self, state)

    def qnState(self, state):
        return _pygamma.spin_sys_qnState(self, state)

    def qnStates(self):
        return _pygamma.spin_sys_qnStates(self)

    def qnDist(self):
        return _pygamma.spin_sys_qnDist(self)

    def CoherDist(self):
        return _pygamma.spin_sys_CoherDist(self)

    def homonuclear(self):
        return _pygamma.spin_sys_homonuclear(self)

    def heteronuclear(self):
        return _pygamma.spin_sys_heteronuclear(self)

    def electron(self, i):
        return _pygamma.spin_sys_electron(self, i)

    def nucleon(self, i):
        return _pygamma.spin_sys_nucleon(self, i)

    def spinhalf(self):
        return _pygamma.spin_sys_spinhalf(self)

    def electrons(self):
        return _pygamma.spin_sys_electrons(self)

    def nucleons(self):
        return _pygamma.spin_sys_nucleons(self)

    def nepair(self, i, j):
        return _pygamma.spin_sys_nepair(self, i, j)

    def enpair(self, i, j):
        return _pygamma.spin_sys_enpair(self, i, j)

    def eepair(self, i, j):
        return _pygamma.spin_sys_eepair(self, i, j)

    def nnpair(self, i, j):
        return _pygamma.spin_sys_nnpair(self, i, j)

    def pairidx(self, i, j):
        return _pygamma.spin_sys_pairidx(self, i, j)

    def isotopes(self, *args):
        return _pygamma.spin_sys_isotopes(self, *args)

    def SetFlag(self, spin, TF):
        return _pygamma.spin_sys_SetFlag(self, spin, TF)

    def SetFlags(self, *args):
        return _pygamma.spin_sys_SetFlags(self, *args)

    def GetFlag(self, i):
        return _pygamma.spin_sys_GetFlag(self, i)

    def name(self, *args):
        return _pygamma.spin_sys_name(self, *args)

    def warnings(self, *args):
        return _pygamma.spin_sys_warnings(self, *args)

    def IsoDefault(self, *args):
        return _pygamma.spin_sys_IsoDefault(self, *args)

    def PSetAdd(self, pset, idx=-1):
        return _pygamma.spin_sys_PSetAdd(self, pset, idx)

    def getSpins(self, pset, warn=0):
        return _pygamma.spin_sys_getSpins(self, pset, warn)

    def setName(self, pset):
        return _pygamma.spin_sys_setName(self, pset)

    def setIs(self, pset):
        return _pygamma.spin_sys_setIs(self, pset)

    def ask_read(self, *args):
        return _pygamma.spin_sys_ask_read(self, *args)

    def get_basis(self):
        return _pygamma.spin_sys_get_basis(self)

    def printstrings(self):
        return _pygamma.spin_sys_printstrings(self)

    def SYSStrings(self, w1=10, w2=5, w3=1):
        return _pygamma.spin_sys_SYSStrings(self, w1, w2, w3)

    def SIStrings(self, colwd=10):
        return _pygamma.spin_sys_SIStrings(self, colwd)

    def SYMStrings(self, colwd=10):
        return _pygamma.spin_sys_SYMStrings(self, colwd)

    def SAMStrings(self, colwd=10):
        return _pygamma.spin_sys_SAMStrings(self, colwd)
spin_sys_swigregister = _pygamma.spin_sys_swigregister
spin_sys_swigregister(spin_sys)

class spin_system(spin_sys):
    __swig_setmethods__ = {}
    for _s in [spin_sys]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, spin_system, name, value)
    __swig_getmethods__ = {}
    for _s in [spin_sys]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, spin_system, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_spin_system(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_spin_system
    __del__ = lambda self: None

    def __assign__(self, sys):
        return _pygamma.spin_system___assign__(self, sys)

    def shifts(self, shift=0):
        return _pygamma.spin_system_shifts(self, shift)

    def shift(self, *args):
        return _pygamma.spin_system_shift(self, *args)

    def maxShift(self, *args):
        return _pygamma.spin_system_maxShift(self, *args)

    def minShift(self, *args):
        return _pygamma.spin_system_minShift(self, *args)

    def medianShift(self):
        return _pygamma.spin_system_medianShift(self)

    def lab_shift(self, arg2):
        return _pygamma.spin_system_lab_shift(self, arg2)

    def offsetShifts(self, *args):
        return _pygamma.spin_system_offsetShifts(self, *args)

    def PPM(self, *args):
        return _pygamma.spin_system_PPM(self, *args)

    def gfactor(self, *args):
        return _pygamma.spin_system_gfactor(self, *args)

    def eshift(self, spin):
        return _pygamma.spin_system_eshift(self, spin)

    def lab_eshift(self, spin):
        return _pygamma.spin_system_lab_eshift(self, spin)

    def efield(self, spin):
        return _pygamma.spin_system_efield(self, spin)

    def efield_lab(self, spin):
        return _pygamma.spin_system_efield_lab(self, spin)

    def Js(self, Jval=0):
        return _pygamma.spin_system_Js(self, Jval)

    def J(self, *args):
        return _pygamma.spin_system_J(self, *args)

    def As(self, Aval=0):
        return _pygamma.spin_system_As(self, Aval)

    def A(self, *args):
        return _pygamma.spin_system_A(self, *args)

    def AHz(self, arg2, arg3):
        return _pygamma.spin_system_AHz(self, arg2, arg3)

    def Omega(self, *args):
        return _pygamma.spin_system_Omega(self, *args)

    def Bo(self):
        return _pygamma.spin_system_Bo(self)

    def OmegaAdjust(self, Om):
        return _pygamma.spin_system_OmegaAdjust(self, Om)

    def FieldAdjust(self, B):
        return _pygamma.spin_system_FieldAdjust(self, B)

    def spectrometer_frequency(self, *args):
        return _pygamma.spin_system_spectrometer_frequency(self, *args)

    def spflags(self, TF):
        return _pygamma.spin_system_spflags(self, TF)

    def spflag(self, *args):
        return _pygamma.spin_system_spflag(self, *args)

    def center(self, spin=0):
        return _pygamma.spin_system_center(self, spin)

    def Nyquist(self, *args):
        return _pygamma.spin_system_Nyquist(self, *args)

    def PSetAdd(self, pset, idx=-1):
        return _pygamma.spin_system_PSetAdd(self, pset, idx)

    def setJs(self, pset):
        return _pygamma.spin_system_setJs(self, pset)

    def setAs(self, pset):
        return _pygamma.spin_system_setAs(self, pset)

    def setShifts(self, pset):
        return _pygamma.spin_system_setShifts(self, pset)

    def setGs(self, pset):
        return _pygamma.spin_system_setGs(self, pset)

    def write(self, filename, idx=-1, warn=2):
        return _pygamma.spin_system_write(self, filename, idx, warn)

    def read(self, *args):
        return _pygamma.spin_system_read(self, *args)

    def ask_read(self, *args):
        return _pygamma.spin_system_ask_read(self, *args)

    def SYSStrings(self, w1=10, w2=12, w3=1):
        return _pygamma.spin_system_SYSStrings(self, w1, w2, w3)

    def VStrings(self, colwd=12, digs=2):
        return _pygamma.spin_system_VStrings(self, colwd, digs)

    def PPMStrings(self, colwd=12, digs=2):
        return _pygamma.spin_system_PPMStrings(self, colwd, digs)

    def GFStrings(self, colwd=12, digs=2):
        return _pygamma.spin_system_GFStrings(self, colwd, digs)

    def BeStrings(self, colwd=12, digs=2):
        return _pygamma.spin_system_BeStrings(self, colwd, digs)

    def JStrings(self, colwd=12, digs=2):
        return _pygamma.spin_system_JStrings(self, colwd, digs)

    def AStrings(self, colwd=12, digs=2):
        return _pygamma.spin_system_AStrings(self, colwd, digs)

    def OmStrings(self, colwd=12, digs=2):
        return _pygamma.spin_system_OmStrings(self, colwd, digs)
spin_system_swigregister = _pygamma.spin_system_swigregister
spin_system_swigregister(spin_system)

class gen_op(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gen_op, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gen_op, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_gen_op(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_gen_op
    __del__ = lambda self: None

    def __add__(self, Op):
        return _pygamma.gen_op___add__(self, Op)

    def __sub__(self, Op):
        return _pygamma.gen_op___sub__(self, Op)

    def __neg__(self):
        return _pygamma.gen_op___neg__(self)

    def __mul__(self, Op):
        return _pygamma.gen_op___mul__(self, Op)

    def __iand__(self, Op):
        return _pygamma.gen_op___iand__(self, Op)

    def __iadd__(self, *args):
        return _pygamma.gen_op___iadd__(self, *args)

    def __isub__(self, *args):
        return _pygamma.gen_op___isub__(self, *args)

    def __imul__(self, *args):
        return _pygamma.gen_op___imul__(self, *args)

    def __idiv__(self, *args):
        return _pygamma.gen_op___idiv__(self, *args)

    def det(self):
        return _pygamma.gen_op_det(self)

    def trace(self, *args):
        return _pygamma.gen_op_trace(self, *args)

    def proj(self, Op2, norm=0):
        return _pygamma.gen_op_proj(self, Op2, norm)

    def dim(self):
        return _pygamma.gen_op_dim(self)

    def HS(self):
        return _pygamma.gen_op_HS(self)

    def LS(self):
        return _pygamma.gen_op_LS(self)

    def dim_LS(self):
        return _pygamma.gen_op_dim_LS(self)

    def exp(self, *args):
        return _pygamma.gen_op_exp(self, *args)

    def Pow(self, power):
        return _pygamma.gen_op_Pow(self, power)

    def sim_trans(self, Op2):
        return _pygamma.gen_op_sim_trans(self, Op2)

    def sim_trans_ip(self, Op1):
        return _pygamma.gen_op_sim_trans_ip(self, Op1)

    def eigvals(self, *args):
        return _pygamma.gen_op_eigvals(self, *args)

    def get_bs(self):
        return _pygamma.gen_op_get_bs(self)

    def get_basis(self):
        return _pygamma.gen_op_get_basis(self)

    def put_bs(self, bs):
        return _pygamma.gen_op_put_bs(self, bs)

    def put_basis(self, bs):
        return _pygamma.gen_op_put_basis(self, bs)

    def __call__(self, row, col):
        return _pygamma.gen_op___call__(self, row, col)

    def get(self, row, col):
        return _pygamma.gen_op_get(self, row, col)

    def put(self, z, row, col):
        return _pygamma.gen_op_put(self, z, row, col)

    def name(self, *args):
        return _pygamma.gen_op_name(self, *args)

    def bsname(self, bn):
        return _pygamma.gen_op_bsname(self, bn)

    def exists(self):
        return _pygamma.gen_op_exists(self)

    def superket(self):
        return _pygamma.gen_op_superket(self)

    def desuperket(self, mS):
        return _pygamma.gen_op_desuperket(self, mS)

    def project_sub(self, ic):
        return _pygamma.gen_op_project_sub(self, ic)

    def test_EBR(self):
        return _pygamma.gen_op_test_EBR(self)

    def test_DBR(self):
        return _pygamma.gen_op_test_DBR(self)

    def in_EBR(self):
        return _pygamma.gen_op_in_EBR(self)

    def in_DBR(self):
        return _pygamma.gen_op_in_DBR(self)

    def set_DBR(self):
        return _pygamma.gen_op_set_DBR(self)

    def set_EBR(self):
        return _pygamma.gen_op_set_EBR(self)

    def Op_base(self, *args):
        return _pygamma.gen_op_Op_base(self, *args)

    def status(self, pf=0):
        return _pygamma.gen_op_status(self, pf)

    def setOnlyWBR(self):
        return _pygamma.gen_op_setOnlyWBR(self)

    def Op_priority(self, pty):
        return _pygamma.gen_op_Op_priority(self, pty)

    def SetLimits(self, limit):
        return _pygamma.gen_op_SetLimits(self, limit)

    def OpCheck(self, *args):
        return _pygamma.gen_op_OpCheck(self, *args)

    def LimCheck(self, limit, warn=1):
        return _pygamma.gen_op_LimCheck(self, limit, warn)

    def write(self, fn):
        return _pygamma.gen_op_write(self, fn)

    def read(self, *args):
        return _pygamma.gen_op_read(self, *args)

    def TestEigenSystem(self, pf=0):
        return _pygamma.gen_op_TestEigenSystem(self, pf)

    def is_symmetric(self, *args):
        return _pygamma.gen_op_is_symmetric(self, *args)

    def is_hermitian(self, *args):
        return _pygamma.gen_op_is_hermitian(self, *args)

    def is_unitary(self, *args):
        return _pygamma.gen_op_is_unitary(self, *args)

    def is_real(self, *args):
        return _pygamma.gen_op_is_real(self, *args)

    def is_imaginary(self, *args):
        return _pygamma.gen_op_is_imaginary(self, *args)

    def is_complex(self, *args):
        return _pygamma.gen_op_is_complex(self, *args)

    def is_zero(self, *args):
        return _pygamma.gen_op_is_zero(self, *args)

    def is_diagonal(self, *args):
        return _pygamma.gen_op_is_diagonal(self, *args)

    def is_square(self):
        return _pygamma.gen_op_is_square(self)

    def __eq__(self, Op):
        return _pygamma.gen_op___eq__(self, Op)

    def __ne__(self, Op):
        return _pygamma.gen_op___ne__(self, Op)

    def __lt__(self, Op):
        return _pygamma.gen_op___lt__(self, Op)

    def __gt__(self, Op):
        return _pygamma.gen_op___gt__(self, Op)
gen_op_swigregister = _pygamma.gen_op_swigregister
gen_op_swigregister(gen_op)


def I_gen_op(bs):
    return _pygamma.I_gen_op(bs)
I_gen_op = _pygamma.I_gen_op

def HJw(sys):
    return _pygamma.HJw(sys)
HJw = _pygamma.HJw

def HJwh(sys):
    return _pygamma.HJwh(sys)
HJwh = _pygamma.HJwh

def HJd(sys, iso):
    return _pygamma.HJd(sys, iso)
HJd = _pygamma.HJd

def How(ss):
    return _pygamma.How(ss)
How = _pygamma.How

def Ho_lab(ss):
    return _pygamma.Ho_lab(ss)
Ho_lab = _pygamma.Ho_lab

def Hz(*args):
    return _pygamma.Hz(*args)
Hz = _pygamma.Hz

def H1(sys, iso, gamB1=2.5e4, phi=0.0):
    return _pygamma.H1(sys, iso, gamB1, phi)
H1 = _pygamma.H1

def Heff(sys, H0, iso, Wrf=0, gamB1=2.5e4, phi=0.0):
    return _pygamma.Heff(sys, H0, iso, Wrf, gamB1, phi)
Heff = _pygamma.Heff

def Hg(sys):
    return _pygamma.Hg(sys)
Hg = _pygamma.Hg

def Hg_lab(sys):
    return _pygamma.Hg_lab(sys)
Hg_lab = _pygamma.Hg_lab

def HAw(sys):
    return _pygamma.HAw(sys)
HAw = _pygamma.HAw

def HQsec(sys, wQ, i):
    return _pygamma.HQsec(sys, wQ, i)
HQsec = _pygamma.HQsec

def SOpCmperror(eidx, noret=0):
    return _pygamma.SOpCmperror(eidx, noret)
SOpCmperror = _pygamma.SOpCmperror

def SOpCmpfatal(eidx):
    return _pygamma.SOpCmpfatal(eidx)
SOpCmpfatal = _pygamma.SOpCmpfatal

def Iu(sys, spin, type):
    return _pygamma.Iu(sys, spin, type)
Iu = _pygamma.Iu

def Ia(sys, spin):
    return _pygamma.Ia(sys, spin)
Ia = _pygamma.Ia

def Ib(sys, spin):
    return _pygamma.Ib(sys, spin)
Ib = _pygamma.Ib

def Ipol(sys, m, spin):
    return _pygamma.Ipol(sys, m, spin)
Ipol = _pygamma.Ipol

def Fpol(*args):
    return _pygamma.Fpol(*args)
Fpol = _pygamma.Fpol

def Fa(*args):
    return _pygamma.Fa(*args)
Fa = _pygamma.Fa

def Fb(*args):
    return _pygamma.Fb(*args)
Fb = _pygamma.Fb

def Fe_sp(sys):
    return _pygamma.Fe_sp(sys)
Fe_sp = _pygamma.Fe_sp

def Fx_sp(sys):
    return _pygamma.Fx_sp(sys)
Fx_sp = _pygamma.Fx_sp

def Fy_sp(sys):
    return _pygamma.Fy_sp(sys)
Fy_sp = _pygamma.Fy_sp

def Fz_sp(sys):
    return _pygamma.Fz_sp(sys)
Fz_sp = _pygamma.Fz_sp

def Fa_sp(sys):
    return _pygamma.Fa_sp(sys)
Fa_sp = _pygamma.Fa_sp

def Fb_sp(sys):
    return _pygamma.Fb_sp(sys)
Fb_sp = _pygamma.Fb_sp

def Fpol_sp(sys, m):
    return _pygamma.Fpol_sp(sys, m)
Fpol_sp = _pygamma.Fpol_sp

def Faxis_sp(sys, axis):
    return _pygamma.Faxis_sp(sys, axis)
Faxis_sp = _pygamma.Faxis_sp

def Faxis(*args):
    return _pygamma.Faxis(*args)
Faxis = _pygamma.Faxis

def Fpol_gen_new(*args):
    return _pygamma.Fpol_gen_new(*args)
Fpol_gen_new = _pygamma.Fpol_gen_new

def Fpol_gen(sys, m):
    return _pygamma.Fpol_gen(sys, m)
Fpol_gen = _pygamma.Fpol_gen

def Ipdt(sys, name):
    return _pygamma.Ipdt(sys, name)
Ipdt = _pygamma.Ipdt

def Fpdt(sys, name):
    return _pygamma.Fpdt(sys, name)
Fpdt = _pygamma.Fpdt

def zero_mqc(sys, Op, order, type):
    return _pygamma.zero_mqc(sys, Op, order, type)
zero_mqc = _pygamma.zero_mqc

def st_Op(Ham, lev1, lev2, axis):
    return _pygamma.st_Op(Ham, lev1, lev2, axis)
st_Op = _pygamma.st_Op

def sqt_v(Ham):
    return _pygamma.sqt_v(Ham)
sqt_v = _pygamma.sqt_v

def sort_super_op_basis(sys):
    return _pygamma.sort_super_op_basis(sys)
sort_super_op_basis = _pygamma.sort_super_op_basis

def sort_LOp_basis(sys):
    return _pygamma.sort_LOp_basis(sys)
sort_LOp_basis = _pygamma.sort_LOp_basis

def sort_Op_basis(sys):
    return _pygamma.sort_Op_basis(sys)
sort_Op_basis = _pygamma.sort_Op_basis

def mqt_v(sys, Ham, qn, type, ncols):
    return _pygamma.mqt_v(sys, Ham, qn, type, ncols)
mqt_v = _pygamma.mqt_v

def wavefunction(sys, Op, wf, pbf):
    return _pygamma.wavefunction(sys, Op, wf, pbf)
wavefunction = _pygamma.wavefunction

def vecmax(vx):
    return _pygamma.vecmax(vx)
vecmax = _pygamma.vecmax

def integral(vx):
    return _pygamma.integral(vx)
integral = _pygamma.integral

def lwhh(vx, i1, i2):
    return _pygamma.lwhh(vx, i1, i2)
lwhh = _pygamma.lwhh

def query_isotope(*args):
    return _pygamma.query_isotope(*args)
query_isotope = _pygamma.query_isotope

def query_offset(*args):
    return _pygamma.query_offset(*args)
query_offset = _pygamma.query_offset

def query_file1D(filename, type):
    return _pygamma.query_file1D(filename, type)
query_file1D = _pygamma.query_file1D

def Ixpuls(*args):
    return _pygamma.Ixpuls(*args)
Ixpuls = _pygamma.Ixpuls

def Ixpuls_sp(sys, sigma, beta):
    return _pygamma.Ixpuls_sp(sys, sigma, beta)
Ixpuls_sp = _pygamma.Ixpuls_sp

def Iypuls_sp(sys, sigma, beta):
    return _pygamma.Iypuls_sp(sys, sigma, beta)
Iypuls_sp = _pygamma.Iypuls_sp

def Ixypuls(*args):
    return _pygamma.Ixypuls(*args)
Ixypuls = _pygamma.Ixypuls

def Ixypuls_sp(sys, sigma, phi, beta):
    return _pygamma.Ixypuls_sp(sys, sigma, phi, beta)
Ixypuls_sp = _pygamma.Ixypuls_sp

def Ixpuls_sp_U(sys, beta):
    return _pygamma.Ixpuls_sp_U(sys, beta)
Ixpuls_sp_U = _pygamma.Ixpuls_sp_U

def Iypuls_sp_U(sys, beta):
    return _pygamma.Iypuls_sp_U(sys, beta)
Iypuls_sp_U = _pygamma.Iypuls_sp_U

def Ixypuls_U_sp(sys, phi, beta):
    return _pygamma.Ixypuls_U_sp(sys, phi, beta)
Ixypuls_U_sp = _pygamma.Ixypuls_U_sp
class basis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, basis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, basis, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_basis(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_basis
    __del__ = lambda self: None

    def __assign__(self, bs):
        return _pygamma.basis___assign__(self, bs)

    def size(self):
        return _pygamma.basis_size(self)

    def dim(self):
        return _pygamma.basis_dim(self)

    def name(self, *args):
        return _pygamma.basis_name(self, *args)

    def dim_LS(self):
        return _pygamma.basis_dim_LS(self)

    def sub_N(self):
        return _pygamma.basis_sub_N(self)

    def sub_dim(self, ic):
        return _pygamma.basis_sub_dim(self, ic)

    def sub_anchor(self, ic):
        return _pygamma.basis_sub_anchor(self, ic)

    def sub_anchor_LS(self, ic):
        return _pygamma.basis_sub_anchor_LS(self, ic)

    def which_sub_LS(self, i):
        return _pygamma.basis_which_sub_LS(self, i)

    def __eq__(self, bs2):
        return _pygamma.basis___eq__(self, bs2)

    def __ne__(self, bs2):
        return _pygamma.basis___ne__(self, bs2)

    def isDefaultBasis(self):
        return _pygamma.basis_isDefaultBasis(self)

    def refs(self):
        return _pygamma.basis_refs(self)

    def check(self, bs1):
        return _pygamma.basis_check(self, bs1)

    def write(self, fn):
        return _pygamma.basis_write(self, fn)

    def read(self, fn):
        return _pygamma.basis_read(self, fn)

    def TestBasis(self, pf=0):
        return _pygamma.basis_TestBasis(self, pf)
basis_swigregister = _pygamma.basis_swigregister
basis_swigregister(basis)


def prop(ham, time):
    return _pygamma.prop(ham, time)
prop = _pygamma.prop

def prop_ip(U, time):
    return _pygamma.prop_ip(U, time)
prop_ip = _pygamma.prop_ip

def evolve_ip(*args):
    return _pygamma.evolve_ip(*args)
evolve_ip = _pygamma.evolve_ip
class HSprop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HSprop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HSprop, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_HSprop(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_HSprop
    __del__ = lambda self: None

    def __assign__(self, U1):
        return _pygamma.HSprop___assign__(self, U1)

    def time(self):
        return _pygamma.HSprop_time(self)

    def length(self):
        return _pygamma.HSprop_length(self)

    def dim(self):
        return _pygamma.HSprop_dim(self)

    def Bs(self):
        return _pygamma.HSprop_Bs(self)

    def HS(self):
        return _pygamma.HSprop_HS(self)

    def LS(self):
        return _pygamma.HSprop_LS(self)

    def Op(self):
        return _pygamma.HSprop_Op(self)

    def H(self):
        return _pygamma.HSprop_H(self)

    def SetEBR(self):
        return _pygamma.HSprop_SetEBR(self)

    def SetBasis(self, Op):
        return _pygamma.HSprop_SetBasis(self, Op)

    def evolve(self, Op):
        return _pygamma.HSprop_evolve(self, Op)

    def __mul__(self, U):
        return _pygamma.HSprop___mul__(self, U)

    def __imul__(self, U):
        return _pygamma.HSprop___imul__(self, U)

    def __iand__(self, U):
        return _pygamma.HSprop___iand__(self, U)

    def sim_trans(self, Op):
        return _pygamma.HSprop_sim_trans(self, Op)

    def sim_trans_ip(self, Op):
        return _pygamma.HSprop_sim_trans_ip(self, Op)

    def Pow(self, n):
        return _pygamma.HSprop_Pow(self, n)

    def __eq__(self, U):
        return _pygamma.HSprop___eq__(self, U)

    def __ne__(self, U):
        return _pygamma.HSprop___ne__(self, U)

    def __lt__(self, U):
        return _pygamma.HSprop___lt__(self, U)

    def __gt__(self, U):
        return _pygamma.HSprop___gt__(self, U)
HSprop_swigregister = _pygamma.HSprop_swigregister
HSprop_swigregister(HSprop)

class spin_op(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, spin_op, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, spin_op, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_spin_op(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_spin_op
    __del__ = lambda self: None

    def __assign__(self, SOp):
        return _pygamma.spin_op___assign__(self, SOp)

    def __neg__(self):
        return _pygamma.spin_op___neg__(self)

    def __add__(self, SOp1):
        return _pygamma.spin_op___add__(self, SOp1)

    def __isub__(self, SOp1):
        return _pygamma.spin_op___isub__(self, SOp1)

    def __iadd__(self, SOp1):
        return _pygamma.spin_op___iadd__(self, SOp1)

    def __imul__(self, *args):
        return _pygamma.spin_op___imul__(self, *args)

    def __idiv__(self, *args):
        return _pygamma.spin_op___idiv__(self, *args)

    def exp(self):
        return _pygamma.spin_op_exp(self)

    def adjoint(self):
        return _pygamma.spin_op_adjoint(self)

    def trace(self):
        return _pygamma.spin_op_trace(self)

    def spins(self):
        return _pygamma.spin_op_spins(self)

    def refs(self, *args):
        return _pygamma.spin_op_refs(self, *args)

    def HS(self):
        return _pygamma.spin_op_HS(self)

    def status(self, full=1):
        return _pygamma.spin_op_status(self, full)

    def FaxisStruct(self, axis):
        return _pygamma.spin_op_FaxisStruct(self, axis)
spin_op_swigregister = _pygamma.spin_op_swigregister
spin_op_swigregister(spin_op)


def PulSerror(eidx, noret=0):
    return _pygamma.PulSerror(eidx, noret)
PulSerror = _pygamma.PulSerror

def PulSfatality(eidx):
    return _pygamma.PulSfatality(eidx)
PulSfatality = _pygamma.PulSfatality

def Sxpuls(sys, sigma, H, iso, freq=0.0, tp=1.e-5, theta=90.0):
    return _pygamma.Sxpuls(sys, sigma, H, iso, freq, tp, theta)
Sxpuls = _pygamma.Sxpuls

def SxpulsB(sys, sigma, H, iso, freq=0.0, tp=1.e-5, gamB1=2.5e4):
    return _pygamma.SxpulsB(sys, sigma, H, iso, freq, tp, gamB1)
SxpulsB = _pygamma.SxpulsB

def Sypuls(sys, sigma, H, iso, freq=0.0, tp=1.e-5, theta=90.0):
    return _pygamma.Sypuls(sys, sigma, H, iso, freq, tp, theta)
Sypuls = _pygamma.Sypuls

def SypulsB(sys, sigma, H, iso, freq=0.0, tp=1.e-5, gamB1=2.5e4):
    return _pygamma.SypulsB(sys, sigma, H, iso, freq, tp, gamB1)
SypulsB = _pygamma.SypulsB

def SxpulsB_U(sys, H, iso, freq=0.0, tp=1.e-5, gamB1=2.5e4):
    return _pygamma.SxpulsB_U(sys, H, iso, freq, tp, gamB1)
SxpulsB_U = _pygamma.SxpulsB_U

def SypulsB_U(sys, H, iso, freq=0.0, tp=1.e-5, gamB1=2.5e4):
    return _pygamma.SypulsB_U(sys, H, iso, freq, tp, gamB1)
SypulsB_U = _pygamma.SypulsB_U

def Sxypuls(*args):
    return _pygamma.Sxypuls(*args)
Sxypuls = _pygamma.Sxypuls

def SxypulsB(*args):
    return _pygamma.SxypulsB(*args)
SxypulsB = _pygamma.SxypulsB

def Sxypuls_U(*args):
    return _pygamma.Sxypuls_U(*args)
Sxypuls_U = _pygamma.Sxypuls_U

def SxypulsB_U(*args):
    return _pygamma.SxypulsB_U(*args)
SxypulsB_U = _pygamma.SxypulsB_U

def Spul_axis(sys, sigma, H, iso, freq, tp, fact, axis):
    return _pygamma.Spul_axis(sys, sigma, H, iso, freq, tp, fact, axis)
Spul_axis = _pygamma.Spul_axis

def Spul_U_axis(sys, H, iso, freq, tp, fact, axis):
    return _pygamma.Spul_U_axis(sys, H, iso, freq, tp, fact, axis)
Spul_U_axis = _pygamma.Spul_U_axis

def Spul_plane(*args):
    return _pygamma.Spul_plane(*args)
Spul_plane = _pygamma.Spul_plane

def Spul_U_plane(*args):
    return _pygamma.Spul_U_plane(*args)
Spul_U_plane = _pygamma.Spul_U_plane

def qStatel(sys, bf):
    return _pygamma.qStatel(sys, bf)
qStatel = _pygamma.qStatel

def tref_labels(*args):
    return _pygamma.tref_labels(*args)
tref_labels = _pygamma.tref_labels

def tran_types(*args):
    return _pygamma.tran_types(*args)
tran_types = _pygamma.tran_types

def trev_labels(trlabels, Op, cutoff=1.e-6):
    return _pygamma.trev_labels(trlabels, Op, cutoff)
trev_labels = _pygamma.trev_labels

def ev_select(select, Op, val1, type=0, val2=0, cutoff=1.e-4, reim=1):
    return _pygamma.ev_select(select, Op, val1, type, val2, cutoff, reim)
ev_select = _pygamma.ev_select

def tr_select(select, Op, val1, type=0, val2=0, cutoff=1.e-4, reim=1):
    return _pygamma.tr_select(select, Op, val1, type, val2, cutoff, reim)
tr_select = _pygamma.tr_select

def PulSherror(eidx, noret):
    return _pygamma.PulSherror(eidx, noret)
PulSherror = _pygamma.PulSherror

def PulShfatality(eidx):
    return _pygamma.PulShfatality(eidx)
PulShfatality = _pygamma.PulShfatality

def Shxpuls(sys, BLK, sigma, H, iso, freq=0.0, time=1.0e-5, theta=90.0):
    return _pygamma.Shxpuls(sys, BLK, sigma, H, iso, freq, time, theta)
Shxpuls = _pygamma.Shxpuls

def Shxpuls_U(sys, BLK, H, iso, freq=0.0, time=1.0e-5, theta=90.0):
    return _pygamma.Shxpuls_U(sys, BLK, H, iso, freq, time, theta)
Shxpuls_U = _pygamma.Shxpuls_U

def Shypuls(sys, BLK, sigma, H, iso, freq=0.0, time=1.0e-5, theta=90.0):
    return _pygamma.Shypuls(sys, BLK, sigma, H, iso, freq, time, theta)
Shypuls = _pygamma.Shypuls

def Shypuls_U(sys, BLK, H, iso, freq=0.0, time=1.0e-5, theta=90.0):
    return _pygamma.Shypuls_U(sys, BLK, H, iso, freq, time, theta)
Shypuls_U = _pygamma.Shypuls_U

def Shxypuls(*args):
    return _pygamma.Shxypuls(*args)
Shxypuls = _pygamma.Shxypuls

def Shxypuls_U(*args):
    return _pygamma.Shxypuls_U(*args)
Shxypuls_U = _pygamma.Shxypuls_U

def ShxpulsB(sys, BLK, sigma, H, iso, freq=0.0, time=1.0e-5, gamB1=2.5e4):
    return _pygamma.ShxpulsB(sys, BLK, sigma, H, iso, freq, time, gamB1)
ShxpulsB = _pygamma.ShxpulsB

def ShxpulsB_U(sys, BLK, H, iso, freq=0.0, time=1.0e-5, gamB1=2.5e4):
    return _pygamma.ShxpulsB_U(sys, BLK, H, iso, freq, time, gamB1)
ShxpulsB_U = _pygamma.ShxpulsB_U

def ShypulsB(sys, BLK, sigma, H, iso, freq=0.0, time=1.0e-5, gamB1=2.5e4):
    return _pygamma.ShypulsB(sys, BLK, sigma, H, iso, freq, time, gamB1)
ShypulsB = _pygamma.ShypulsB

def ShypulsB_U(sys, BLK, H, iso, freq=0.0, time=1.0e-5, gamB1=2.5e4):
    return _pygamma.ShypulsB_U(sys, BLK, H, iso, freq, time, gamB1)
ShypulsB_U = _pygamma.ShypulsB_U

def ShxypulsB(*args):
    return _pygamma.ShxypulsB(*args)
ShxypulsB = _pygamma.ShxypulsB

def ShxypulsB_U(*args):
    return _pygamma.ShxypulsB_U(*args)
ShxypulsB_U = _pygamma.ShxypulsB_U

def Shpul_axis(sys, BLK, sigma, H, iso, freq, time, fact, axis):
    return _pygamma.Shpul_axis(sys, BLK, sigma, H, iso, freq, time, fact, axis)
Shpul_axis = _pygamma.Shpul_axis

def Shpul_U_axis(sys, BLK, H, iso, freq, time, fact, axis):
    return _pygamma.Shpul_U_axis(sys, BLK, H, iso, freq, time, fact, axis)
Shpul_U_axis = _pygamma.Shpul_U_axis

def Shpul_plane(*args):
    return _pygamma.Shpul_plane(*args)
Shpul_plane = _pygamma.Shpul_plane

def Shpul_U_plane(*args):
    return _pygamma.Shpul_U_plane(*args)
Shpul_U_plane = _pygamma.Shpul_U_plane

def Prod_base_dec(*args):
    return _pygamma.Prod_base_dec(*args)
Prod_base_dec = _pygamma.Prod_base_dec
class genoprep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, genoprep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, genoprep, name)
    __repr__ = _swig_repr
    __swig_setmethods__["RepMx"] = _pygamma.genoprep_RepMx_set
    __swig_getmethods__["RepMx"] = _pygamma.genoprep_RepMx_get
    if _newclass:
        RepMx = _swig_property(_pygamma.genoprep_RepMx_get, _pygamma.genoprep_RepMx_set)
    __swig_setmethods__["RepBs"] = _pygamma.genoprep_RepBs_set
    __swig_getmethods__["RepBs"] = _pygamma.genoprep_RepBs_get
    if _newclass:
        RepBs = _swig_property(_pygamma.genoprep_RepBs_get, _pygamma.genoprep_RepBs_set)
    __swig_setmethods__["RepPty"] = _pygamma.genoprep_RepPty_set
    __swig_getmethods__["RepPty"] = _pygamma.genoprep_RepPty_get
    if _newclass:
        RepPty = _swig_property(_pygamma.genoprep_RepPty_get, _pygamma.genoprep_RepPty_set)
    __swig_setmethods__["BSPrnt"] = _pygamma.genoprep_BSPrnt_set
    __swig_getmethods__["BSPrnt"] = _pygamma.genoprep_BSPrnt_get
    if _newclass:
        BSPrnt = _swig_property(_pygamma.genoprep_BSPrnt_get, _pygamma.genoprep_BSPrnt_set)

    def OpReperror(self, eidx, noret=0):
        return _pygamma.genoprep_OpReperror(self, eidx, noret)

    def OpRepfatal(self, eidx):
        return _pygamma.genoprep_OpRepfatal(self, eidx)

    def __init__(self, *args):
        this = _pygamma.new_genoprep(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_genoprep
    __del__ = lambda self: None

    def __assign__(self, OpRep):
        return _pygamma.genoprep___assign__(self, OpRep)

    def OpRepCheck(self, warn=2):
        return _pygamma.genoprep_OpRepCheck(self, warn)

    def write(self, fn):
        return _pygamma.genoprep_write(self, fn)

    def read(self, fn):
        return _pygamma.genoprep_read(self, fn)

    def __eq__(self, OpRep):
        return _pygamma.genoprep___eq__(self, OpRep)

    def __ne__(self, OpRep):
        return _pygamma.genoprep___ne__(self, OpRep)

    def __lt__(self, OpRep):
        return _pygamma.genoprep___lt__(self, OpRep)

    def __gt__(self, OpRep):
        return _pygamma.genoprep___gt__(self, OpRep)
genoprep_swigregister = _pygamma.genoprep_swigregister
genoprep_swigregister(genoprep)
alphabeta = cvar.alphabeta


def GenericD(sys, D, beta=0):
    return _pygamma.GenericD(sys, D, beta)
GenericD = _pygamma.GenericD

def detector(*args):
    return _pygamma.detector(*args)
detector = _pygamma.detector

def Mxy(*args):
    return _pygamma.Mxy(*args)
Mxy = _pygamma.Mxy

def detector_sp(S, B=0):
    return _pygamma.detector_sp(S, B)
detector_sp = _pygamma.detector_sp

def Mxy_sp(sys, beta=0):
    return _pygamma.Mxy_sp(sys, beta)
Mxy_sp = _pygamma.Mxy_sp

def Rx(*args):
    return _pygamma.Rx(*args)
Rx = _pygamma.Rx

def Rx_sp(sys, beta):
    return _pygamma.Rx_sp(sys, beta)
Rx_sp = _pygamma.Rx_sp

def Ry(*args):
    return _pygamma.Ry(*args)
Ry = _pygamma.Ry

def Ry_sp(sys, beta):
    return _pygamma.Ry_sp(sys, beta)
Ry_sp = _pygamma.Ry_sp

def Rz_sp(sys, beta):
    return _pygamma.Rz_sp(sys, beta)
Rz_sp = _pygamma.Rz_sp

def Raxis_sp(sys, beta, axis):
    return _pygamma.Raxis_sp(sys, beta, axis)
Raxis_sp = _pygamma.Raxis_sp

def Rxy(*args):
    return _pygamma.Rxy(*args)
Rxy = _pygamma.Rxy

def Rxy_sp(sys, phi, beta):
    return _pygamma.Rxy_sp(sys, phi, beta)
Rxy_sp = _pygamma.Rxy_sp

def Ryz(*args):
    return _pygamma.Ryz(*args)
Ryz = _pygamma.Ryz

def Ryz_sp(sys, theta, beta):
    return _pygamma.Ryz_sp(sys, theta, beta)
Ryz_sp = _pygamma.Ryz_sp

def Rzx(*args):
    return _pygamma.Rzx(*args)
Rzx = _pygamma.Rzx

def Rzx_sp(sys, phi, beta):
    return _pygamma.Rzx_sp(sys, phi, beta)
Rzx_sp = _pygamma.Rzx_sp

def Rplane(*args):
    return _pygamma.Rplane(*args)
Rplane = _pygamma.Rplane

def Rplane_sp(sys, phi, beta, p):
    return _pygamma.Rplane_sp(sys, phi, beta, p)
Rplane_sp = _pygamma.Rplane_sp

def Rxyz(*args):
    return _pygamma.Rxyz(*args)
Rxyz = _pygamma.Rxyz

def Rxyz_sp(sys, theta, phi, beta):
    return _pygamma.Rxyz_sp(sys, theta, phi, beta)
Rxyz_sp = _pygamma.Rxyz_sp

def Rspace(sys, flags, theta, phi, beta):
    return _pygamma.Rspace(sys, flags, theta, phi, beta)
Rspace = _pygamma.Rspace

def R_Euler(*args):
    return _pygamma.R_Euler(*args)
R_Euler = _pygamma.R_Euler

def R_Euler_sp(sys, alpha, beta, gamma):
    return _pygamma.R_Euler_sp(sys, alpha, beta, gamma)
R_Euler_sp = _pygamma.R_Euler_sp

def R_Euler_plane(sys, flags, alpha, beta, gamma):
    return _pygamma.R_Euler_plane(sys, flags, alpha, beta, gamma)
R_Euler_plane = _pygamma.R_Euler_plane

def Ixy(sys, spin, theta):
    return _pygamma.Ixy(sys, spin, theta)
Ixy = _pygamma.Ixy

def Fxy(*args):
    return _pygamma.Fxy(*args)
Fxy = _pygamma.Fxy

def Fxy_sp(sys, theta):
    return _pygamma.Fxy_sp(sys, theta)
Fxy_sp = _pygamma.Fxy_sp

def Fp_sp(*args):
    return _pygamma.Fp_sp(*args)
Fp_sp = _pygamma.Fp_sp

def Fm_sp(*args):
    return _pygamma.Fm_sp(*args)
Fm_sp = _pygamma.Fm_sp

def Fplane(sys, theta, OPtype):
    return _pygamma.Fplane(sys, theta, OPtype)
Fplane = _pygamma.Fplane

def RotSpinOp(R, F):
    return _pygamma.RotSpinOp(R, F)
RotSpinOp = _pygamma.RotSpinOp

def Ie(*args):
    return _pygamma.Ie(*args)
Ie = _pygamma.Ie

def Ix(*args):
    return _pygamma.Ix(*args)
Ix = _pygamma.Ix

def Iy(*args):
    return _pygamma.Iy(*args)
Iy = _pygamma.Iy

def Iz(*args):
    return _pygamma.Iz(*args)
Iz = _pygamma.Iz

def Ip(*args):
    return _pygamma.Ip(*args)
Ip = _pygamma.Ip

def Im(*args):
    return _pygamma.Im(*args)
Im = _pygamma.Im

def Raxis(*args):
    return _pygamma.Raxis(*args)
Raxis = _pygamma.Raxis

def left(Op):
    return _pygamma.left(Op)
left = _pygamma.left

def right(Op):
    return _pygamma.right(Op)
right = _pygamma.right

def U_transform(Op):
    return _pygamma.U_transform(Op)
U_transform = _pygamma.U_transform

def commutator(Op):
    return _pygamma.commutator(Op)
commutator = _pygamma.commutator

def d_commutator(*args):
    return _pygamma.d_commutator(*args)
d_commutator = _pygamma.d_commutator
class super_op(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, super_op, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, super_op, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_super_op(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_super_op
    __del__ = lambda self: None

    def __add__(self, LOp1):
        return _pygamma.super_op___add__(self, LOp1)

    def __iadd__(self, LOp1):
        return _pygamma.super_op___iadd__(self, LOp1)

    def __sub__(self, *args):
        return _pygamma.super_op___sub__(self, *args)

    def __isub__(self, LOp1):
        return _pygamma.super_op___isub__(self, LOp1)

    def __mul__(self, LOp1):
        return _pygamma.super_op___mul__(self, LOp1)

    def __iand__(self, LOp1):
        return _pygamma.super_op___iand__(self, LOp1)

    def __imul__(self, *args):
        return _pygamma.super_op___imul__(self, *args)

    def __idiv__(self, *args):
        return _pygamma.super_op___idiv__(self, *args)

    def exp(self, *args):
        return _pygamma.super_op_exp(self, *args)

    def set_EBR(self):
        return _pygamma.super_op_set_EBR(self)

    def set_HBR(self):
        return _pygamma.super_op_set_HBR(self)

    def set_DBR(self):
        return _pygamma.super_op_set_DBR(self)

    def LOp_Hbase(self, LOp1, warn=0):
        return _pygamma.super_op_LOp_Hbase(self, LOp1, warn)

    def LOp_base(self, *args):
        return _pygamma.super_op_LOp_base(self, *args)

    def SetHSBaseOf(self, Op):
        return _pygamma.super_op_SetHSBaseOf(self, Op)

    def HS(self):
        return _pygamma.super_op_HS(self)

    def size(self):
        return _pygamma.super_op_size(self)

    def dim(self):
        return _pygamma.super_op_dim(self)

    def LS(self):
        return _pygamma.super_op_LS(self)

    def eigenvalues(self, nc=4, ri=0):
        return _pygamma.super_op_eigenvalues(self, nc, ri)

    def Bs(self):
        return _pygamma.super_op_Bs(self)

    def get_basis(self):
        return _pygamma.super_op_get_basis(self)

    def put_basis(self, Hbs):
        return _pygamma.super_op_put_basis(self, Hbs)

    def LBs(self):
        return _pygamma.super_op_LBs(self)

    def get_Lbasis(self):
        return _pygamma.super_op_get_Lbasis(self)

    def put_Lbasis(self, Lbs):
        return _pygamma.super_op_put_Lbasis(self, Lbs)

    def __call__(self, row, col):
        return _pygamma.super_op___call__(self, row, col)

    def put(self, row, col, z):
        return _pygamma.super_op_put(self, row, col, z)

    def get(self, row, col):
        return _pygamma.super_op_get(self, row, col)

    def checkLOp(self, *args):
        return _pygamma.super_op_checkLOp(self, *args)

    def status(self):
        return _pygamma.super_op_status(self)

    def __eq__(self, LOp1):
        return _pygamma.super_op___eq__(self, LOp1)

    def below(self, d):
        return _pygamma.super_op_below(self, d)

    def write(self, fn):
        return _pygamma.super_op_write(self, fn)

    def read(self, *args):
        return _pygamma.super_op_read(self, *args)
super_op_swigregister = _pygamma.super_op_swigregister
super_op_swigregister(super_op)

class sys_dynamic(spin_system, coord_vec):
    __swig_setmethods__ = {}
    for _s in [spin_system, coord_vec]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, sys_dynamic, name, value)
    __swig_getmethods__ = {}
    for _s in [spin_system, coord_vec]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, sys_dynamic, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_sys_dynamic(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __assign__(self, dsys):
        return _pygamma.sys_dynamic___assign__(self, dsys)
    __swig_destroy__ = _pygamma.delete_sys_dynamic
    __del__ = lambda self: None

    def shifts(self, shift=0):
        return _pygamma.sys_dynamic_shifts(self, shift)

    def shift(self, *args):
        return _pygamma.sys_dynamic_shift(self, *args)

    def offsetShifts(self, *args):
        return _pygamma.sys_dynamic_offsetShifts(self, *args)

    def PPM(self, arg2, arg3):
        return _pygamma.sys_dynamic_PPM(self, arg2, arg3)

    def delz(self, *args):
        return _pygamma.sys_dynamic_delz(self, *args)

    def Ceta(self, *args):
        return _pygamma.sys_dynamic_Ceta(self, *args)

    def TC(self, *args):
        return _pygamma.sys_dynamic_TC(self, *args)

    def xiC_vector(self):
        return _pygamma.sys_dynamic_xiC_vector(self)

    def xiC(self, spin):
        return _pygamma.sys_dynamic_xiC(self, spin)

    def CSA(self):
        return _pygamma.sys_dynamic_CSA(self)

    def coords(self, cvec, cutoff=5.e-10):
        return _pygamma.sys_dynamic_coords(self, cvec, cutoff)

    def Coord(self):
        return _pygamma.sys_dynamic_Coord(self)

    def DCC(self, *args):
        return _pygamma.sys_dynamic_DCC(self, *args)

    def Ddelz(self, *args):
        return _pygamma.sys_dynamic_Ddelz(self, *args)

    def Deta(self, *args):
        return _pygamma.sys_dynamic_Deta(self, *args)

    def AD(self, *args):
        return _pygamma.sys_dynamic_AD(self, *args)

    def dipoles(self):
        return _pygamma.sys_dynamic_dipoles(self)

    def dipole(self, spin1, spin2):
        return _pygamma.sys_dynamic_dipole(self, spin1, spin2)

    def xiD_matrix(self):
        return _pygamma.sys_dynamic_xiD_matrix(self)

    def Dip(self):
        return _pygamma.sys_dynamic_Dip(self)

    def QCC(self, *args):
        return _pygamma.sys_dynamic_QCC(self, *args)

    def Qdelz(self, *args):
        return _pygamma.sys_dynamic_Qdelz(self, *args)

    def Qeta(self, *args):
        return _pygamma.sys_dynamic_Qeta(self, *args)

    def TQ(self, *args):
        return _pygamma.sys_dynamic_TQ(self, *args)

    def xiQ_vector(self):
        return _pygamma.sys_dynamic_xiQ_vector(self)

    def xiQ(self, spin):
        return _pygamma.sys_dynamic_xiQ(self, spin)

    def Quad(self):
        return _pygamma.sys_dynamic_Quad(self)

    def TR(self, spin):
        return _pygamma.sys_dynamic_TR(self, spin)

    def tauR(self):
        return _pygamma.sys_dynamic_tauR(self)

    def xiR_vector(self):
        return _pygamma.sys_dynamic_xiR_vector(self)

    def xiR(self, spin):
        return _pygamma.sys_dynamic_xiR(self, spin)

    def setCoords(self, pset, mand=0):
        return _pygamma.sys_dynamic_setCoords(self, pset, mand)

    def setDip(self):
        return _pygamma.sys_dynamic_setDip(self)

    def SetCSA(self, pset):
        return _pygamma.sys_dynamic_SetCSA(self, pset)

    def setQuad(self, pset):
        return _pygamma.sys_dynamic_setQuad(self, pset)

    def setRand(self, pset):
        return _pygamma.sys_dynamic_setRand(self, pset)

    def setTaus(self, pset, mand=0):
        return _pygamma.sys_dynamic_setTaus(self, pset, mand)

    def setKs(self, pset, warn=True):
        return _pygamma.sys_dynamic_setKs(self, pset, warn)

    def write(self, filename):
        return _pygamma.sys_dynamic_write(self, filename)

    def read(self, *args):
        return _pygamma.sys_dynamic_read(self, *args)

    def ask_read(self, *args):
        return _pygamma.sys_dynamic_ask_read(self, *args)

    def taus(self):
        return _pygamma.sys_dynamic_taus(self)

    def taux(self, *args):
        return _pygamma.sys_dynamic_taux(self, *args)

    def tauy(self, *args):
        return _pygamma.sys_dynamic_tauy(self, *args)

    def tauz(self, *args):
        return _pygamma.sys_dynamic_tauz(self, *args)

    def Kex_zero(self):
        return _pygamma.sys_dynamic_Kex_zero(self)

    def Kex(self, *args):
        return _pygamma.sys_dynamic_Kex(self, *args)

    def MExProcs(self):
        return _pygamma.sys_dynamic_MExProcs(self)

    def PtStrings(self, w1=10, w2=12, digs=2):
        return _pygamma.sys_dynamic_PtStrings(self, w1, w2, digs)

    def AQStrings(self, w1=10, w2=12, digs=2):
        return _pygamma.sys_dynamic_AQStrings(self, w1, w2, digs)
sys_dynamic_swigregister = _pygamma.sys_dynamic_swigregister
sys_dynamic_swigregister(sys_dynamic)


def SigmaEq(sys):
    return _pygamma.SigmaEq(sys)
SigmaEq = _pygamma.SigmaEq

def SigmaSS(*args):
    return _pygamma.SigmaSS(*args)
SigmaSS = _pygamma.SigmaSS
class densop(gen_op):
    __swig_setmethods__ = {}
    for _s in [gen_op]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, densop, name, value)
    __swig_getmethods__ = {}
    for _s in [gen_op]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, densop, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_densop(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_densop
    __del__ = lambda self: None

    def __assign__(self, Sigma1):
        return _pygamma.densop___assign__(self, Sigma1)

    def length(self):
        return _pygamma.densop_length(self)

    def SetTrace(self, tr):
        return _pygamma.densop_SetTrace(self, tr)
densop_swigregister = _pygamma.densop_swigregister
densop_swigregister(densop)


def R_prop(*args):
    return _pygamma.R_prop(*args)
R_prop = _pygamma.R_prop
class LSprop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LSprop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LSprop, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_LSprop(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_LSprop
    __del__ = lambda self: None

    def __assign__(self, G1):
        return _pygamma.LSprop___assign__(self, G1)

    def time(self):
        return _pygamma.LSprop_time(self)

    def dim(self):
        return _pygamma.LSprop_dim(self)

    def HS(self):
        return _pygamma.LSprop_HS(self)

    def LS(self):
        return _pygamma.LSprop_LS(self)

    def LOp(self):
        return _pygamma.LSprop_LOp(self)

    def L(self, LOp):
        return _pygamma.LSprop_L(self, LOp)

    def length(self, *args):
        return _pygamma.LSprop_length(self, *args)

    def SetEBR(self):
        return _pygamma.LSprop_SetEBR(self)

    def SetBasis(self, LOp):
        return _pygamma.LSprop_SetBasis(self, LOp)

    def evolve(self, Op):
        return _pygamma.LSprop_evolve(self, Op)

    def __mul__(self, G):
        return _pygamma.LSprop___mul__(self, G)

    def __imul__(self, G):
        return _pygamma.LSprop___imul__(self, G)

    def __iand__(self, G):
        return _pygamma.LSprop___iand__(self, G)
LSprop_swigregister = _pygamma.LSprop_swigregister
LSprop_swigregister(LSprop)


def FIDx(sigma, sigma0, det, L, fid, dt, np=0):
    return _pygamma.FIDx(sigma, sigma0, det, L, fid, dt, np)
FIDx = _pygamma.FIDx

def FIDrot(sigma, sigma0, det, L, Fz, Wrf, time, fid, dt, np=0):
    return _pygamma.FIDrot(sigma, sigma0, det, L, Fz, Wrf, time, fid, dt, np)
FIDrot = _pygamma.FIDrot

def wf_labels(*args):
    return _pygamma.wf_labels(*args)
wf_labels = _pygamma.wf_labels

def ev_labels(*args):
    return _pygamma.ev_labels(*args)
ev_labels = _pygamma.ev_labels

def wavefunctions(*args):
    return _pygamma.wavefunctions(*args)
wavefunctions = _pygamma.wavefunctions

def eigensystem(ostr, sys, LOp, cute=1.e-6, cutc=1.e-4, type=-1, pbf=-1, pfz=0, title=1):
    return _pygamma.eigensystem(ostr, sys, LOp, cute, cutc, type, pbf, pfz, title)
eigensystem = _pygamma.eigensystem

def lsprint(LOp, cutoff=1.e-6, nc=4, ri=0):
    return _pygamma.lsprint(LOp, cutoff, nc, ri)
lsprint = _pygamma.lsprint

def eigenvalues(LOp, sort=1, nc=4, ri=0):
    return _pygamma.eigenvalues(LOp, sort, nc, ri)
eigenvalues = _pygamma.eigenvalues

def UOrderMQC(sys):
    return _pygamma.UOrderMQC(sys)
UOrderMQC = _pygamma.UOrderMQC

def OrderMQC(*args):
    return _pygamma.OrderMQC(*args)
OrderMQC = _pygamma.OrderMQC

def solve_it(X, Uguess, b, lim=10):
    return _pygamma.solve_it(X, Uguess, b, lim)
solve_it = _pygamma.solve_it

def invert_it(X):
    return _pygamma.invert_it(X)
invert_it = _pygamma.invert_it

def LU_decomp(A, indx):
    return _pygamma.LU_decomp(A, indx)
LU_decomp = _pygamma.LU_decomp

def LU_backsub(ALU, indx, b):
    return _pygamma.LU_backsub(ALU, indx, b)
LU_backsub = _pygamma.LU_backsub

def LU_invert(A):
    return _pygamma.LU_invert(A)
LU_invert = _pygamma.LU_invert
class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pygamma.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pygamma.StringVector___nonzero__(self)

    def __bool__(self):
        return _pygamma.StringVector___bool__(self)

    def __len__(self):
        return _pygamma.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _pygamma.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pygamma.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pygamma.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pygamma.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pygamma.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pygamma.StringVector___setitem__(self, *args)

    def pop(self):
        return _pygamma.StringVector_pop(self)

    def append(self, x):
        return _pygamma.StringVector_append(self, x)

    def empty(self):
        return _pygamma.StringVector_empty(self)

    def size(self):
        return _pygamma.StringVector_size(self)

    def swap(self, v):
        return _pygamma.StringVector_swap(self, v)

    def begin(self):
        return _pygamma.StringVector_begin(self)

    def end(self):
        return _pygamma.StringVector_end(self)

    def rbegin(self):
        return _pygamma.StringVector_rbegin(self)

    def rend(self):
        return _pygamma.StringVector_rend(self)

    def clear(self):
        return _pygamma.StringVector_clear(self)

    def get_allocator(self):
        return _pygamma.StringVector_get_allocator(self)

    def pop_back(self):
        return _pygamma.StringVector_pop_back(self)

    def erase(self, *args):
        return _pygamma.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _pygamma.new_StringVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _pygamma.StringVector_push_back(self, x)

    def front(self):
        return _pygamma.StringVector_front(self)

    def back(self):
        return _pygamma.StringVector_back(self)

    def assign(self, n, x):
        return _pygamma.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _pygamma.StringVector_resize(self, *args)

    def insert(self, *args):
        return _pygamma.StringVector_insert(self, *args)

    def reserve(self, n):
        return _pygamma.StringVector_reserve(self, n)

    def capacity(self):
        return _pygamma.StringVector_capacity(self)
    __swig_destroy__ = _pygamma.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _pygamma.StringVector_swigregister
StringVector_swigregister(StringVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pygamma.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pygamma.IntVector___nonzero__(self)

    def __bool__(self):
        return _pygamma.IntVector___bool__(self)

    def __len__(self):
        return _pygamma.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _pygamma.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pygamma.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pygamma.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pygamma.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pygamma.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pygamma.IntVector___setitem__(self, *args)

    def pop(self):
        return _pygamma.IntVector_pop(self)

    def append(self, x):
        return _pygamma.IntVector_append(self, x)

    def empty(self):
        return _pygamma.IntVector_empty(self)

    def size(self):
        return _pygamma.IntVector_size(self)

    def swap(self, v):
        return _pygamma.IntVector_swap(self, v)

    def begin(self):
        return _pygamma.IntVector_begin(self)

    def end(self):
        return _pygamma.IntVector_end(self)

    def rbegin(self):
        return _pygamma.IntVector_rbegin(self)

    def rend(self):
        return _pygamma.IntVector_rend(self)

    def clear(self):
        return _pygamma.IntVector_clear(self)

    def get_allocator(self):
        return _pygamma.IntVector_get_allocator(self)

    def pop_back(self):
        return _pygamma.IntVector_pop_back(self)

    def erase(self, *args):
        return _pygamma.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _pygamma.new_IntVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _pygamma.IntVector_push_back(self, x)

    def front(self):
        return _pygamma.IntVector_front(self)

    def back(self):
        return _pygamma.IntVector_back(self)

    def assign(self, n, x):
        return _pygamma.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _pygamma.IntVector_resize(self, *args)

    def insert(self, *args):
        return _pygamma.IntVector_insert(self, *args)

    def reserve(self, n):
        return _pygamma.IntVector_reserve(self, n)

    def capacity(self):
        return _pygamma.IntVector_capacity(self)
    __swig_destroy__ = _pygamma.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _pygamma.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pygamma.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pygamma.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _pygamma.DoubleVector___bool__(self)

    def __len__(self):
        return _pygamma.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _pygamma.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pygamma.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pygamma.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pygamma.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pygamma.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pygamma.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _pygamma.DoubleVector_pop(self)

    def append(self, x):
        return _pygamma.DoubleVector_append(self, x)

    def empty(self):
        return _pygamma.DoubleVector_empty(self)

    def size(self):
        return _pygamma.DoubleVector_size(self)

    def swap(self, v):
        return _pygamma.DoubleVector_swap(self, v)

    def begin(self):
        return _pygamma.DoubleVector_begin(self)

    def end(self):
        return _pygamma.DoubleVector_end(self)

    def rbegin(self):
        return _pygamma.DoubleVector_rbegin(self)

    def rend(self):
        return _pygamma.DoubleVector_rend(self)

    def clear(self):
        return _pygamma.DoubleVector_clear(self)

    def get_allocator(self):
        return _pygamma.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _pygamma.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _pygamma.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _pygamma.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _pygamma.DoubleVector_push_back(self, x)

    def front(self):
        return _pygamma.DoubleVector_front(self)

    def back(self):
        return _pygamma.DoubleVector_back(self)

    def assign(self, n, x):
        return _pygamma.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _pygamma.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _pygamma.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _pygamma.DoubleVector_reserve(self, n)

    def capacity(self):
        return _pygamma.DoubleVector_capacity(self)
    __swig_destroy__ = _pygamma.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _pygamma.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class TTable1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TTable1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TTable1D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_TTable1D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_TTable1D
    __del__ = lambda self: None

    def __assign__(self, TTab1):
        return _pygamma.TTable1D___assign__(self, TTab1)

    def center(self, wa=True):
        return _pygamma.TTable1D_center(self, wa)

    def offset(self, *args):
        return _pygamma.TTable1D_offset(self, *args)

    def FRscale(self, *args):
        return _pygamma.TTable1D_FRscale(self, *args)

    def BC(self, res=-1.0):
        return _pygamma.TTable1D_BC(self, res)

    def Iscale(self, *args):
        return _pygamma.TTable1D_Iscale(self, *args)

    def Iremove(self, dcut=-1.0):
        return _pygamma.TTable1D_Iremove(self, dcut)

    def broaden(self, *args):
        return _pygamma.TTable1D_broaden(self, *args)

    def resolution(self, res):
        return _pygamma.TTable1D_resolution(self, res)

    def T(self, *args):
        return _pygamma.TTable1D_T(self, *args)

    def Ts(self, npts, tinc):
        return _pygamma.TTable1D_Ts(self, npts, tinc)

    def TCutoffs(self, npts, tinc):
        return _pygamma.TTable1D_TCutoffs(self, npts, tinc)

    def F(self, *args):
        return _pygamma.TTable1D_F(self, *args)

    def Fs(self, npts, Fst, Ffi):
        return _pygamma.TTable1D_Fs(self, npts, Fst, Ffi)

    def FD(self, *args):
        return _pygamma.TTable1D_FD(self, *args)

    def pcorrect(self, *args):
        return _pygamma.TTable1D_pcorrect(self, *args)

    def R2(self, tr):
        return _pygamma.TTable1D_R2(self, tr)

    def Fr(self, tr):
        return _pygamma.TTable1D_Fr(self, tr)

    def I(self, tr):
        return _pygamma.TTable1D_I(self, tr)

    def Tr(self, tr):
        return _pygamma.TTable1D_Tr(self, tr)

    def LineWidths(self):
        return _pygamma.TTable1D_LineWidths(self)

    def Intensities(self):
        return _pygamma.TTable1D_Intensities(self)

    def Phases(self):
        return _pygamma.TTable1D_Phases(self)

    def size(self):
        return _pygamma.TTable1D_size(self)

    def FRmax(self):
        return _pygamma.TTable1D_FRmax(self)

    def FRmin(self):
        return _pygamma.TTable1D_FRmin(self)

    def Tdmin(self):
        return _pygamma.TTable1D_Tdmin(self)

    def LWmax(self):
        return _pygamma.TTable1D_LWmax(self)

    def LWmin(self):
        return _pygamma.TTable1D_LWmin(self)

    def Imax(self):
        return _pygamma.TTable1D_Imax(self)

    def Noisemax(self):
        return _pygamma.TTable1D_Noisemax(self)

    def Sort(self, k, type, colf):
        return _pygamma.TTable1D_Sort(self, k, type, colf)

    def readPSet(self, *args):
        return _pygamma.TTable1D_readPSet(self, *args)

    def setType(self, typ):
        return _pygamma.TTable1D_setType(self, typ)

    def setSort(self, sf):
        return _pygamma.TTable1D_setSort(self, sf)

    def setConv(self, cf):
        return _pygamma.TTable1D_setConv(self, cf)

    def setIcut(self, ct):
        return _pygamma.TTable1D_setIcut(self, ct)

    def setInorm(self, inorm=0.0):
        return _pygamma.TTable1D_setInorm(self, inorm)

    def setSN(self, S2N):
        return _pygamma.TTable1D_setSN(self, S2N)

    def setHprint(self, hp):
        return _pygamma.TTable1D_setHprint(self, hp)

    def setRprint(self, rp):
        return _pygamma.TTable1D_setRprint(self, rp)

    def setLWprint(self, lwp):
        return _pygamma.TTable1D_setLWprint(self, lwp)

    def setT2print(self, t2p):
        return _pygamma.TTable1D_setT2print(self, t2p)

    def setPHprint(self, php):
        return _pygamma.TTable1D_setPHprint(self, php)

    def setFreqRev(self):
        return _pygamma.TTable1D_setFreqRev(self)

    def getType(self):
        return _pygamma.TTable1D_getType(self)

    def getSort(self):
        return _pygamma.TTable1D_getSort(self)

    def getConv(self):
        return _pygamma.TTable1D_getConv(self)

    def getIcut(self):
        return _pygamma.TTable1D_getIcut(self)

    def getInorm(self):
        return _pygamma.TTable1D_getInorm(self)

    def getSN(self):
        return _pygamma.TTable1D_getSN(self)

    def getHprint(self):
        return _pygamma.TTable1D_getHprint(self)

    def getRprint(self):
        return _pygamma.TTable1D_getRprint(self)

    def getLWprint(self):
        return _pygamma.TTable1D_getLWprint(self)

    def getT2print(self):
        return _pygamma.TTable1D_getT2print(self)

    def getPHprint(self):
        return _pygamma.TTable1D_getPHprint(self)

    def getFreqRev(self):
        return _pygamma.TTable1D_getFreqRev(self)

    def printStrings(self):
        return _pygamma.TTable1D_printStrings(self)

    def write(self, fn):
        return _pygamma.TTable1D_write(self, fn)

    def dbwrite_old(self, fileName, compname, lowppm, highppm, specfreq, reffreq, loop, headerLines):
        return _pygamma.TTable1D_dbwrite_old(self, fileName, compname, lowppm, highppm, specfreq, reffreq, loop, headerLines)

    def dbwrite(self, fileName, compname, specfreq, numberspins, loop, header):
        return _pygamma.TTable1D_dbwrite(self, fileName, compname, specfreq, numberspins, loop, header)

    def calc_spectra(self, freq, ampl, phase, specfreq, numberspins, freqtol=0.001, phasetol=45.0, lowppm=-1000.0, highppm=1000.0):
        return _pygamma.TTable1D_calc_spectra(self, freq, ampl, phase, specfreq, numberspins, freqtol, phasetol, lowppm, highppm)

    def read(self, fn):
        return _pygamma.TTable1D_read(self, fn)
TTable1D_swigregister = _pygamma.TTable1D_swigregister
TTable1D_swigregister(TTable1D)

class acquire1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, acquire1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, acquire1D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_acquire1D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_acquire1D
    __del__ = lambda self: None

    def __assign__(self, ACQ1):
        return _pygamma.acquire1D___assign__(self, ACQ1)

    def L(self):
        return _pygamma.acquire1D_L(self)

    def D(self):
        return _pygamma.acquire1D_D(self)

    def TTable(self):
        return _pygamma.acquire1D_TTable(self)

    def Detector(self, detect):
        return _pygamma.acquire1D_Detector(self, detect)

    def T(self, *args):
        return _pygamma.acquire1D_T(self, *args)

    def F(self, *args):
        return _pygamma.acquire1D_F(self, *args)

    def FD(self, *args):
        return _pygamma.acquire1D_FD(self, *args)

    def table(self, *args):
        return _pygamma.acquire1D_table(self, *args)

    def table_snapshot(self, *args):
        return _pygamma.acquire1D_table_snapshot(self, *args)

    def offset(self, *args):
        return _pygamma.acquire1D_offset(self, *args)

    def FRscale(self, *args):
        return _pygamma.acquire1D_FRscale(self, *args)

    def Iscale(self, *args):
        return _pygamma.acquire1D_Iscale(self, *args)

    def broaden(self, *args):
        return _pygamma.acquire1D_broaden(self, *args)

    def resolution(self, res):
        return _pygamma.acquire1D_resolution(self, res)

    def pcorrect(self, *args):
        return _pygamma.acquire1D_pcorrect(self, *args)

    def Wmax(self):
        return _pygamma.acquire1D_Wmax(self)

    def LWmax(self):
        return _pygamma.acquire1D_LWmax(self)

    def setSort(self, sf):
        return _pygamma.acquire1D_setSort(self, sf)

    def setConv(self, cf):
        return _pygamma.acquire1D_setConv(self, cf)

    def ls(self):
        return _pygamma.acquire1D_ls(self)

    def size(self):
        return _pygamma.acquire1D_size(self)

    def full_size(self):
        return _pygamma.acquire1D_full_size(self)

    def transitions(self):
        return _pygamma.acquire1D_transitions(self)

    def write(self, fn):
        return _pygamma.acquire1D_write(self, fn)

    def read(self, fn):
        return _pygamma.acquire1D_read(self, fn)
acquire1D_swigregister = _pygamma.acquire1D_swigregister
acquire1D_swigregister(acquire1D)


def Kex(*args):
    return _pygamma.Kex(*args)
Kex = _pygamma.Kex
class RBasic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RBasic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RBasic, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_RBasic(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_RBasic
    __del__ = lambda self: None

    def __assign__(self, RB):
        return _pygamma.RBasic___assign__(self, RB)

    def spins(self):
        return _pygamma.RBasic_spins(self)

    def HS(self):
        return _pygamma.RBasic_HS(self)

    def T1(self, *args):
        return _pygamma.RBasic_T1(self, *args)

    def T2(self, *args):
        return _pygamma.RBasic_T2(self, *args)

    def R1(self, *args):
        return _pygamma.RBasic_R1(self, *args)

    def R2(self, *args):
        return _pygamma.RBasic_R2(self, *args)

    def LW(self, *args):
        return _pygamma.RBasic_LW(self, *args)

    def RB(self, *args):
        return _pygamma.RBasic_RB(self, *args)

    def T1s(self):
        return _pygamma.RBasic_T1s(self)

    def T2s(self):
        return _pygamma.RBasic_T2s(self)

    def R1s(self):
        return _pygamma.RBasic_R1s(self)

    def R2s(self):
        return _pygamma.RBasic_R2s(self)

    def LWs(self):
        return _pygamma.RBasic_LWs(self)

    def RBRates(self, type):
        return _pygamma.RBasic_RBRates(self, type)

    def SetSystem(self, sys, warn=2):
        return _pygamma.RBasic_SetSystem(self, sys, warn)

    def SetH0(self, H, warn=2):
        return _pygamma.RBasic_SetH0(self, H, warn)

    def SetDet(self, D, warn=2):
        return _pygamma.RBasic_SetDet(self, D, warn)

    def SetSigInf(self, S, warn=2):
        return _pygamma.RBasic_SetSigInf(self, S, warn)

    def R2Mx(self):
        return _pygamma.RBasic_R2Mx(self)

    def R2LOp(self):
        return _pygamma.RBasic_R2LOp(self)

    def R1LOp(self):
        return _pygamma.RBasic_R1LOp(self)

    def SigmaT1(self, sigma):
        return _pygamma.RBasic_SigmaT1(self, sigma)

    def SigmaT2(self, sigma):
        return _pygamma.RBasic_SigmaT2(self, sigma)

    def SigmaC(self, sigma):
        return _pygamma.RBasic_SigmaC(self, sigma)

    def SigmaCEq(self, *args):
        return _pygamma.RBasic_SigmaCEq(self, *args)

    def RC(self):
        return _pygamma.RBasic_RC(self)

    def HC(self, *args):
        return _pygamma.RBasic_HC(self, *args)

    def Sigma(self, sigmaC):
        return _pygamma.RBasic_Sigma(self, sigmaC)

    def ReadT2(self, pset, sp, idx=-1, pf=0):
        return _pygamma.RBasic_ReadT2(self, pset, sp, idx, pf)

    def ReadT1(self, pset, sp, idx=-1, pf=0):
        return _pygamma.RBasic_ReadT1(self, pset, sp, idx, pf)

    def ReadLW(self, pset, sp, idx=-1, pf=0):
        return _pygamma.RBasic_ReadLW(self, pset, sp, idx, pf)

    def ReadR2(self, pset, sp, idx=-1, pf=0):
        return _pygamma.RBasic_ReadR2(self, pset, sp, idx, pf)

    def ReadR1(self, pset, sp, idx=-1, pf=0):
        return _pygamma.RBasic_ReadR1(self, pset, sp, idx, pf)

    def ReadPar(self, P, I, t, idx=-1, pf=0):
        return _pygamma.RBasic_ReadPar(self, P, I, t, idx, pf)

    def ReadT2s(self, p, N, idx=-1, pf=0):
        return _pygamma.RBasic_ReadT2s(self, p, N, idx, pf)

    def ReadT1s(self, p, N, idx=-1, pf=0):
        return _pygamma.RBasic_ReadT1s(self, p, N, idx, pf)

    def ReadLWs(self, p, N, idx=-1, pf=0):
        return _pygamma.RBasic_ReadLWs(self, p, N, idx, pf)

    def ReadR2s(self, p, N, idx=-1, pf=0):
        return _pygamma.RBasic_ReadR2s(self, p, N, idx, pf)

    def ReadR1s(self, p, N, idx=-1, pf=0):
        return _pygamma.RBasic_ReadR1s(self, p, N, idx, pf)

    def ReadPars(self, p, N, type, idx=-1, pf=0):
        return _pygamma.RBasic_ReadPars(self, p, N, type, idx, pf)

    def read(self, *args):
        return _pygamma.RBasic_read(self, *args)

    def Evolve(self, *args):
        return _pygamma.RBasic_Evolve(self, *args)

    def FID(self, *args):
        return _pygamma.RBasic_FID(self, *args)

    def FzCoeffs(self, sys, sigma):
        return _pygamma.RBasic_FzCoeffs(self, sys, sigma)
RBasic_swigregister = _pygamma.RBasic_swigregister
RBasic_swigregister(RBasic)

class quatern(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, quatern, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, quatern, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_quatern(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_quatern
    __del__ = lambda self: None

    def __assign__(self, *args):
        return _pygamma.quatern___assign__(self, *args)

    def A(self):
        return _pygamma.quatern_A(self)

    def B(self):
        return _pygamma.quatern_B(self)

    def C(self):
        return _pygamma.quatern_C(self)

    def D(self):
        return _pygamma.quatern_D(self)

    def alpha(self):
        return _pygamma.quatern_alpha(self)

    def beta(self):
        return _pygamma.quatern_beta(self)

    def gamma(self):
        return _pygamma.quatern_gamma(self)

    def EA(self):
        return _pygamma.quatern_EA(self)

    def ABG(self):
        return _pygamma.quatern_ABG(self)

    def __mul__(self, Q):
        return _pygamma.quatern___mul__(self, Q)

    def __imul__(self, Q):
        return _pygamma.quatern___imul__(self, Q)

    def __iand__(self, Q):
        return _pygamma.quatern___iand__(self, Q)

    def composite(self, Q, rev=False):
        return _pygamma.quatern_composite(self, Q, rev)

    def RotMx(self):
        return _pygamma.quatern_RotMx(self)

    def RMx(self):
        return _pygamma.quatern_RMx(self)

    def norm(self):
        return _pygamma.quatern_norm(self)

    def inverse(self):
        return _pygamma.quatern_inverse(self)

    def __eq__(self, Quar):
        return _pygamma.quatern___eq__(self, Quar)

    def __ne__(self, Quar):
        return _pygamma.quatern___ne__(self, Quar)

    def __lt__(self, Quar):
        return _pygamma.quatern___lt__(self, Quar)

    def __gt__(self, Quar):
        return _pygamma.quatern___gt__(self, Quar)

    def param(self, *args):
        return _pygamma.quatern_param(self, *args)

    def PSetAdd(self, pset, idx=-1, pfx=-1):
        return _pygamma.quatern_PSetAdd(self, pset, idx, pfx)

    def write(self, *args):
        return _pygamma.quatern_write(self, *args)

    def read(self, *args):
        return _pygamma.quatern_read(self, *args)
    __swig_getmethods__["ASinPos"] = lambda x: _pygamma.quatern_ASinPos
    if _newclass:
        ASinPos = staticmethod(_pygamma.quatern_ASinPos)
    __swig_getmethods__["ACosPos"] = lambda x: _pygamma.quatern_ACosPos
    if _newclass:
        ACosPos = staticmethod(_pygamma.quatern_ACosPos)
    __swig_getmethods__["ATanPos"] = lambda x: _pygamma.quatern_ATanPos
    if _newclass:
        ATanPos = staticmethod(_pygamma.quatern_ATanPos)

    def ShowConversion(self):
        return _pygamma.quatern_ShowConversion(self)
    __swig_getmethods__["ValidRMx"] = lambda x: _pygamma.quatern_ValidRMx
    if _newclass:
        ValidRMx = staticmethod(_pygamma.quatern_ValidRMx)
quatern_swigregister = _pygamma.quatern_swigregister
quatern_swigregister(quatern)

def quatern_ASinPos():
    return _pygamma.quatern_ASinPos()
quatern_ASinPos = _pygamma.quatern_ASinPos

def quatern_ACosPos():
    return _pygamma.quatern_ACosPos()
quatern_ACosPos = _pygamma.quatern_ACosPos

def quatern_ATanPos():
    return _pygamma.quatern_ATanPos()
quatern_ATanPos = _pygamma.quatern_ATanPos

def quatern_ValidRMx(R, msgs=True):
    return _pygamma.quatern_ValidRMx(R, msgs)
quatern_ValidRMx = _pygamma.quatern_ValidRMx


def composite(*args):
    return _pygamma.composite(*args)
composite = _pygamma.composite
class EAngles(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EAngles, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EAngles, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_EAngles(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_EAngles
    __del__ = lambda self: None

    def __assign__(self, EA):
        return _pygamma.EAngles___assign__(self, EA)

    def alpha(self, *args):
        return _pygamma.EAngles_alpha(self, *args)

    def beta(self, *args):
        return _pygamma.EAngles_beta(self, *args)

    def gamma(self, *args):
        return _pygamma.EAngles_gamma(self, *args)

    def __mul__(self, EA):
        return _pygamma.EAngles___mul__(self, EA)

    def __imul__(self, EA):
        return _pygamma.EAngles___imul__(self, EA)

    def __iand__(self, EA):
        return _pygamma.EAngles___iand__(self, EA)

    def composite(self, EA):
        return _pygamma.EAngles_composite(self, EA)

    def param(self, *args):
        return _pygamma.EAngles_param(self, *args)

    def PSetAdd(self, pset, idx=-1, deg=True):
        return _pygamma.EAngles_PSetAdd(self, pset, idx, deg)

    def write(self, filename, idx=-1, deg=True):
        return _pygamma.EAngles_write(self, filename, idx, deg)

    def read(self, *args):
        return _pygamma.EAngles_read(self, *args)
    __swig_getmethods__["SetCutoff"] = lambda x: _pygamma.EAngles_SetCutoff
    if _newclass:
        SetCutoff = staticmethod(_pygamma.EAngles_SetCutoff)

    def __eq__(self, EA):
        return _pygamma.EAngles___eq__(self, EA)

    def __ne__(self, EA):
        return _pygamma.EAngles___ne__(self, EA)

    def __lt__(self, EA):
        return _pygamma.EAngles___lt__(self, EA)

    def __gt__(self, EA):
        return _pygamma.EAngles___gt__(self, EA)

    def equal(self, EA, CUTOFF=1.e-10):
        return _pygamma.EAngles_equal(self, EA, CUTOFF)

    def inverse(self):
        return _pygamma.EAngles_inverse(self)

    def RMx(self, inv=False):
        return _pygamma.EAngles_RMx(self, inv)

    def Rmx(self):
        return _pygamma.EAngles_Rmx(self)

    def invRmx(self):
        return _pygamma.EAngles_invRmx(self)
EAngles_swigregister = _pygamma.EAngles_swigregister
EAngles_swigregister(EAngles)

def EAngles_SetCutoff(co=-1):
    return _pygamma.EAngles_SetCutoff(co)
EAngles_SetCutoff = _pygamma.EAngles_SetCutoff

class decomp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, decomp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, decomp, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_decomp(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_decomp
    __del__ = lambda self: None

    def __assign__(self, dec):
        return _pygamma.decomp___assign__(self, dec)

    def decompose(self, Op):
        return _pygamma.decomp_decompose(self, Op)

    def size(self):
        return _pygamma.decomp_size(self)

    def LS(self):
        return _pygamma.decomp_LS(self)

    def HS(self):
        return _pygamma.decomp_HS(self)

    def Names(self, *args):
        return _pygamma.decomp_Names(self, *args)

    def Name(self, *args):
        return _pygamma.decomp_Name(self, *args)

    def OpName(self, i):
        return _pygamma.decomp_OpName(self, i)

    def AltOpName(self, i):
        return _pygamma.decomp_AltOpName(self, i)

    def MaxOpNameLen(self):
        return _pygamma.decomp_MaxOpNameLen(self)

    def MaxOpAltNameLen(self):
        return _pygamma.decomp_MaxOpAltNameLen(self)

    def Coherence(self, i):
        return _pygamma.decomp_Coherence(self, i)

    def MaxCoherence(self):
        return _pygamma.decomp_MaxCoherence(self)

    def Op(self, *args):
        return _pygamma.decomp_Op(self, *args)

    def values(self, *args):
        return _pygamma.decomp_values(self, *args)

    def value(self, i):
        return _pygamma.decomp_value(self, i)

    def bcoefficient(self, i):
        return _pygamma.decomp_bcoefficient(self, i)

    def index(self, Opname):
        return _pygamma.decomp_index(self, Opname)

    def SortBySpins(self):
        return _pygamma.decomp_SortBySpins(self)
decomp_swigregister = _pygamma.decomp_swigregister
decomp_swigregister(decomp)


def PB_dec(arg1, arg2):
    return _pygamma.PB_dec(arg1, arg2)
PB_dec = _pygamma.PB_dec
class PulWaveform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PulWaveform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PulWaveform, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_PulWaveform(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_PulWaveform
    __del__ = lambda self: None

    def __assign__(self, PWF1):
        return _pygamma.PulWaveform___assign__(self, PWF1)

    def name(self):
        return _pygamma.PulWaveform_name(self)

    def values(self):
        return _pygamma.PulWaveform_values(self)

    def lengths(self):
        return _pygamma.PulWaveform_lengths(self)

    def strength(self, i):
        return _pygamma.PulWaveform_strength(self, i)

    def phase(self, i):
        return _pygamma.PulWaveform_phase(self, i)

    def length(self, *args):
        return _pygamma.PulWaveform_length(self, *args)

    def value(self, i):
        return _pygamma.PulWaveform_value(self, i)

    def maxlength(self):
        return _pygamma.PulWaveform_maxlength(self)

    def minlength(self, cutoff=1.e-13):
        return _pygamma.PulWaveform_minlength(self, cutoff)

    def maxgamB1(self):
        return _pygamma.PulWaveform_maxgamB1(self)

    def mingamB1(self):
        return _pygamma.PulWaveform_mingamB1(self)

    def gamB1const(self):
        return _pygamma.PulWaveform_gamB1const(self)

    def phaseconst(self):
        return _pygamma.PulWaveform_phaseconst(self)

    def timeconst(self):
        return _pygamma.PulWaveform_timeconst(self)

    def steps(self, *args):
        return _pygamma.PulWaveform_steps(self, *args)

    def fullsteps(self, td):
        return _pygamma.PulWaveform_fullsteps(self, td)

    def WFs(self, td):
        return _pygamma.PulWaveform_WFs(self, td)

    def fullWFs(self, td, cut=1.e-13):
        return _pygamma.PulWaveform_fullWFs(self, td, cut)

    def sumlength(self, i):
        return _pygamma.PulWaveform_sumlength(self, i)

    def scalegB1(self, sf):
        return _pygamma.PulWaveform_scalegB1(self, sf)

    def getIdeal(self, gB1, ptt, i):
        return _pygamma.PulWaveform_getIdeal(self, gB1, ptt, i)

    def IvsT(self, split=0, ends=0, N=1):
        return _pygamma.PulWaveform_IvsT(self, split, ends, N)

    def PvsT(self, spl=0, ends=0, N=1, p=0):
        return _pygamma.PulWaveform_PvsT(self, spl, ends, N, p)

    def GP(self, type=0, split=0, ends=0, N=1):
        return _pygamma.PulWaveform_GP(self, type, split, ends, N)

    def FM(self, type=0, split=0, ends=0, N=1):
        return _pygamma.PulWaveform_FM(self, type, split, ends, N)
PulWaveform_swigregister = _pygamma.PulWaveform_swigregister
PulWaveform_swigregister(PulWaveform)

class PulComposite(PulWaveform):
    __swig_setmethods__ = {}
    for _s in [PulWaveform]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PulComposite, name, value)
    __swig_getmethods__ = {}
    for _s in [PulWaveform]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PulComposite, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_PulComposite(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_PulComposite
    __del__ = lambda self: None

    def __assign__(self, CPul1):
        return _pygamma.PulComposite___assign__(self, CPul1)

    def GetH(self, i):
        return _pygamma.PulComposite_GetH(self, i)

    def L0(self, i):
        return _pygamma.PulComposite_L0(self, i)

    def GetL0(self, i):
        return _pygamma.PulComposite_GetL0(self, i)

    def Leff(self, i):
        return _pygamma.PulComposite_Leff(self, i)

    def GetLeff(self, i):
        return _pygamma.PulComposite_GetLeff(self, i)

    def GetU(self, *args):
        return _pygamma.PulComposite_GetU(self, *args)

    def GetUsum(self, i=-1):
        return _pygamma.PulComposite_GetUsum(self, i)

    def GetUmult(self, N):
        return _pygamma.PulComposite_GetUmult(self, N)

    def channel(self):
        return _pygamma.PulComposite_channel(self)

    def FZ(self):
        return _pygamma.PulComposite_FZ(self)

    def ROp(self):
        return _pygamma.PulComposite_ROp(self)

    def Precision(self):
        return _pygamma.PulComposite_Precision(self)

    def scalegB1(self, sf):
        return _pygamma.PulComposite_scalegB1(self, sf)

    def setRelax(self, sys, LOp):
        return _pygamma.PulComposite_setRelax(self, sys, LOp)

    def FIDheader(self, typ, rlx=0):
        return _pygamma.PulComposite_FIDheader(self, typ, rlx)

    def FIDpoint(self, typ, pt, iWFs, iSTs):
        return _pygamma.PulComposite_FIDpoint(self, typ, pt, iWFs, iSTs)

    def FIDvalue(self, typ, td, z):
        return _pygamma.PulComposite_FIDvalue(self, typ, td, z)

    def FIDtell(self, SW):
        return _pygamma.PulComposite_FIDtell(self, SW)

    def FIDsync(self, SW, warn=0):
        return _pygamma.PulComposite_FIDsync(self, SW, warn)

    def FIDtest(self, td, nWFs, nSTPs, tr):
        return _pygamma.PulComposite_FIDtest(self, td, nWFs, nSTPs, tr)

    def FIDsynchWF(self, npts, nWFs, D, sigmap, track=0):
        return _pygamma.PulComposite_FIDsynchWF(self, npts, nWFs, D, sigmap, track)

    def FIDsynchST(self, npts, nSTs, D, sigmap, track=0):
        return _pygamma.PulComposite_FIDsynchST(self, npts, nSTs, D, sigmap, track)

    def FIDsynchFR(self, npts, nFRs, D, sigmap, track=0):
        return _pygamma.PulComposite_FIDsynchFR(self, npts, nFRs, D, sigmap, track)

    def FID(self, N, td, D, sp, track=0):
        return _pygamma.PulComposite_FID(self, N, td, D, sp, track)

    def FIDRsynchWF(self, npts, nWFs, D, sigmap, track=0):
        return _pygamma.PulComposite_FIDRsynchWF(self, npts, nWFs, D, sigmap, track)

    def FIDRsynchST(self, npts, nSTs, D, sigmap, track=0):
        return _pygamma.PulComposite_FIDRsynchST(self, npts, nSTs, D, sigmap, track)

    def FIDRsynchFR(self, npts, nFRs, D, sigmap, track=0):
        return _pygamma.PulComposite_FIDRsynchFR(self, npts, nFRs, D, sigmap, track)

    def FIDR(self, N, td, D, sp, track=0):
        return _pygamma.PulComposite_FIDR(self, N, td, D, sp, track)
PulComposite_swigregister = _pygamma.PulComposite_swigregister
PulComposite_swigregister(PulComposite)

class Pulse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pulse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pulse, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_Pulse(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_Pulse
    __del__ = lambda self: None

    def __assign__(self, Pulse1):
        return _pygamma.Pulse___assign__(self, Pulse1)

    def channel(self):
        return _pygamma.Pulse_channel(self)

    def angle(self):
        return _pygamma.Pulse_angle(self)

    def phase(self):
        return _pygamma.Pulse_phase(self)

    def offset(self):
        return _pygamma.Pulse_offset(self)

    def length(self):
        return _pygamma.Pulse_length(self)

    def strength(self, *args):
        return _pygamma.Pulse_strength(self, *args)

    def read(self, *args):
        return _pygamma.Pulse_read(self, *args)

    def ask_read(self, argc, argv, argn):
        return _pygamma.Pulse_ask_read(self, argc, argv, argn)
Pulse_swigregister = _pygamma.Pulse_swigregister
Pulse_swigregister(Pulse)

class Gpuldat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gpuldat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Gpuldat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["N"] = _pygamma.Gpuldat_N_set
    __swig_getmethods__["N"] = _pygamma.Gpuldat_N_get
    if _newclass:
        N = _swig_property(_pygamma.Gpuldat_N_get, _pygamma.Gpuldat_N_set)
    __swig_setmethods__["Wrf"] = _pygamma.Gpuldat_Wrf_set
    __swig_getmethods__["Wrf"] = _pygamma.Gpuldat_Wrf_get
    if _newclass:
        Wrf = _swig_property(_pygamma.Gpuldat_Wrf_get, _pygamma.Gpuldat_Wrf_set)
    __swig_setmethods__["Iso"] = _pygamma.Gpuldat_Iso_set
    __swig_getmethods__["Iso"] = _pygamma.Gpuldat_Iso_get
    if _newclass:
        Iso = _swig_property(_pygamma.Gpuldat_Iso_get, _pygamma.Gpuldat_Iso_set)
    __swig_setmethods__["gamB1"] = _pygamma.Gpuldat_gamB1_set
    __swig_getmethods__["gamB1"] = _pygamma.Gpuldat_gamB1_get
    if _newclass:
        gamB1 = _swig_property(_pygamma.Gpuldat_gamB1_get, _pygamma.Gpuldat_gamB1_set)
    __swig_setmethods__["tau"] = _pygamma.Gpuldat_tau_set
    __swig_getmethods__["tau"] = _pygamma.Gpuldat_tau_get
    if _newclass:
        tau = _swig_property(_pygamma.Gpuldat_tau_get, _pygamma.Gpuldat_tau_set)
    __swig_setmethods__["fact"] = _pygamma.Gpuldat_fact_set
    __swig_getmethods__["fact"] = _pygamma.Gpuldat_fact_get
    if _newclass:
        fact = _swig_property(_pygamma.Gpuldat_fact_get, _pygamma.Gpuldat_fact_set)
    __swig_setmethods__["phi"] = _pygamma.Gpuldat_phi_set
    __swig_getmethods__["phi"] = _pygamma.Gpuldat_phi_get
    if _newclass:
        phi = _swig_property(_pygamma.Gpuldat_phi_get, _pygamma.Gpuldat_phi_set)

    def __init__(self):
        this = _pygamma.new_Gpuldat()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_Gpuldat
    __del__ = lambda self: None
Gpuldat_swigregister = _pygamma.Gpuldat_swigregister
Gpuldat_swigregister(Gpuldat)


def Gpulse_Hs(Hs, H0, Fxy, N, ang, tp, fact):
    return _pygamma.Gpulse_Hs(Hs, H0, Fxy, N, ang, tp, fact)
Gpulse_Hs = _pygamma.Gpulse_Hs

def Gpulse_Us(Us, H0, Fxy, N, ang, tp, fact):
    return _pygamma.Gpulse_Us(Us, H0, Fxy, N, ang, tp, fact)
Gpulse_Us = _pygamma.Gpulse_Us

def Gpulse_U(*args):
    return _pygamma.Gpulse_U(*args)
Gpulse_U = _pygamma.Gpulse_U

def Gpulse_UX(H0rot, Fxy, N, ang, tp, fact):
    return _pygamma.Gpulse_UX(H0rot, Fxy, N, ang, tp, fact)
Gpulse_UX = _pygamma.Gpulse_UX

def Gangle(gamB1, tau, N, fact=0.025):
    return _pygamma.Gangle(gamB1, tau, N, fact)
Gangle = _pygamma.Gangle

def GgamB1(angle, tau, N, fact=0.025):
    return _pygamma.GgamB1(angle, tau, N, fact)
GgamB1 = _pygamma.GgamB1

def Gtime(angle, gamB1, N, fact=0.025):
    return _pygamma.Gtime(angle, gamB1, N, fact)
Gtime = _pygamma.Gtime

def GNvect(N, fact):
    return _pygamma.GNvect(N, fact)
GNvect = _pygamma.GNvect

def Gvect(gamB1, N, fact=0.025):
    return _pygamma.Gvect(gamB1, N, fact)
Gvect = _pygamma.Gvect

def GIntvec(gamB1, tau, Npts, fact=0.05):
    return _pygamma.GIntvec(gamB1, tau, Npts, fact)
GIntvec = _pygamma.GIntvec

def Ghistogram(gamB1, tau, N, fact=0.05):
    return _pygamma.Ghistogram(gamB1, tau, N, fact)
Ghistogram = _pygamma.Ghistogram

def ask_Gpulse(argc, argv, qn, N, val1, val2, fact, type=0):
    return _pygamma.ask_Gpulse(argc, argv, qn, N, val1, val2, fact, type)
ask_Gpulse = _pygamma.ask_Gpulse

def read_Gpulse(*args):
    return _pygamma.read_Gpulse(*args)
read_Gpulse = _pygamma.read_Gpulse
class SincPulDat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SincPulDat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SincPulDat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["N"] = _pygamma.SincPulDat_N_set
    __swig_getmethods__["N"] = _pygamma.SincPulDat_N_get
    if _newclass:
        N = _swig_property(_pygamma.SincPulDat_N_get, _pygamma.SincPulDat_N_set)
    __swig_setmethods__["Wrf"] = _pygamma.SincPulDat_Wrf_set
    __swig_getmethods__["Wrf"] = _pygamma.SincPulDat_Wrf_get
    if _newclass:
        Wrf = _swig_property(_pygamma.SincPulDat_Wrf_get, _pygamma.SincPulDat_Wrf_set)
    __swig_setmethods__["Iso"] = _pygamma.SincPulDat_Iso_set
    __swig_getmethods__["Iso"] = _pygamma.SincPulDat_Iso_get
    if _newclass:
        Iso = _swig_property(_pygamma.SincPulDat_Iso_get, _pygamma.SincPulDat_Iso_set)
    __swig_setmethods__["gamB1"] = _pygamma.SincPulDat_gamB1_set
    __swig_getmethods__["gamB1"] = _pygamma.SincPulDat_gamB1_get
    if _newclass:
        gamB1 = _swig_property(_pygamma.SincPulDat_gamB1_get, _pygamma.SincPulDat_gamB1_set)
    __swig_setmethods__["tau"] = _pygamma.SincPulDat_tau_set
    __swig_getmethods__["tau"] = _pygamma.SincPulDat_tau_get
    if _newclass:
        tau = _swig_property(_pygamma.SincPulDat_tau_get, _pygamma.SincPulDat_tau_set)
    __swig_setmethods__["node"] = _pygamma.SincPulDat_node_set
    __swig_getmethods__["node"] = _pygamma.SincPulDat_node_get
    if _newclass:
        node = _swig_property(_pygamma.SincPulDat_node_get, _pygamma.SincPulDat_node_set)
    __swig_setmethods__["phi"] = _pygamma.SincPulDat_phi_set
    __swig_getmethods__["phi"] = _pygamma.SincPulDat_phi_get
    if _newclass:
        phi = _swig_property(_pygamma.SincPulDat_phi_get, _pygamma.SincPulDat_phi_set)

    def __init__(self):
        this = _pygamma.new_SincPulDat()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_SincPulDat
    __del__ = lambda self: None
SincPulDat_swigregister = _pygamma.SincPulDat_swigregister
SincPulDat_swigregister(SincPulDat)


def SincPulseHs(Hs, H0, Fxy, N, ang, tp, node=3):
    return _pygamma.SincPulseHs(Hs, H0, Fxy, N, ang, tp, node)
SincPulseHs = _pygamma.SincPulseHs

def SincPulseUs(Us, H0, Fxy, N, ang, tp, node=3):
    return _pygamma.SincPulseUs(Us, H0, Fxy, N, ang, tp, node)
SincPulseUs = _pygamma.SincPulseUs

def SincPulseU(*args):
    return _pygamma.SincPulseU(*args)
SincPulseU = _pygamma.SincPulseU

def SincNVect(*args):
    return _pygamma.SincNVect(*args)
SincNVect = _pygamma.SincNVect

def SincVect(*args):
    return _pygamma.SincVect(*args)
SincVect = _pygamma.SincVect

def SincIntVec(*args):
    return _pygamma.SincIntVec(*args)
SincIntVec = _pygamma.SincIntVec

def SincSteps(pset, idx=-1, pf=0):
    return _pygamma.SincSteps(pset, idx, pf)
SincSteps = _pygamma.SincSteps

def SincStrength(pset, SD, idx=-1, pf=0):
    return _pygamma.SincStrength(pset, SD, idx, pf)
SincStrength = _pygamma.SincStrength

def SincSelectivity(pset, sys, Sdata, idx=-1, pf=0):
    return _pygamma.SincSelectivity(pset, sys, Sdata, idx, pf)
SincSelectivity = _pygamma.SincSelectivity

def SincPhase(pset, idx, pf=0):
    return _pygamma.SincPhase(pset, idx, pf)
SincPhase = _pygamma.SincPhase

def ReadSinc(filein, sys, idx=-1, pf=0):
    return _pygamma.ReadSinc(filein, sys, idx, pf)
ReadSinc = _pygamma.ReadSinc

def SincHistogram(gamB1, tau, N, node=3):
    return _pygamma.SincHistogram(gamB1, tau, N, node)
SincHistogram = _pygamma.SincHistogram

def SincPts(argc, argv, qn, SD):
    return _pygamma.SincPts(argc, argv, qn, SD)
SincPts = _pygamma.SincPts

def SincNode(*args):
    return _pygamma.SincNode(*args)
SincNode = _pygamma.SincNode

def SincTime(*args):
    return _pygamma.SincTime(*args)
SincTime = _pygamma.SincTime

def SincGamB1(*args):
    return _pygamma.SincGamB1(*args)
SincGamB1 = _pygamma.SincGamB1

def SincAngle(*args):
    return _pygamma.SincAngle(*args)
SincAngle = _pygamma.SincAngle

def SincIso(argc, argv, qn, SD):
    return _pygamma.SincIso(argc, argv, qn, SD)
SincIso = _pygamma.SincIso

def SincWrf(argc, argv, qn, SD):
    return _pygamma.SincWrf(argc, argv, qn, SD)
SincWrf = _pygamma.SincWrf

def SincPhi(argc, argv, qn, SD):
    return _pygamma.SincPhi(argc, argv, qn, SD)
SincPhi = _pygamma.SincPhi

def SincAsk(argc, argv, qn, type=0):
    return _pygamma.SincAsk(argc, argv, qn, type)
SincAsk = _pygamma.SincAsk

def SincZero(SincData):
    return _pygamma.SincZero(SincData)
SincZero = _pygamma.SincZero

def SincPrep(N, node, den, Z):
    return _pygamma.SincPrep(N, node, den, Z)
SincPrep = _pygamma.SincPrep
class PulCycle(PulComposite):
    __swig_setmethods__ = {}
    for _s in [PulComposite]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PulCycle, name, value)
    __swig_getmethods__ = {}
    for _s in [PulComposite]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PulCycle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_PulCycle(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_PulCycle
    __del__ = lambda self: None

    def __assign__(self, CYC1):
        return _pygamma.PulCycle___assign__(self, CYC1)

    def GetCU(self, i=-1):
        return _pygamma.PulCycle_GetCU(self, i)

    def GetCUsum(self, *args):
        return _pygamma.PulCycle_GetCUsum(self, *args)

    def GetCUmult(self, N):
        return _pygamma.PulCycle_GetCUmult(self, N)

    def GetCG(self, *args):
        return _pygamma.PulCycle_GetCG(self, *args)

    def GetCGsum(self, *args):
        return _pygamma.PulCycle_GetCGsum(self, *args)

    def GetCGmult(self, N):
        return _pygamma.PulCycle_GetCGmult(self, N)

    def WF_steps(self):
        return _pygamma.PulCycle_WF_steps(self)

    def name(self):
        return _pygamma.PulCycle_name(self)

    def WF_name(self):
        return _pygamma.PulCycle_WF_name(self)

    def values(self):
        return _pygamma.PulCycle_values(self)

    def WF_values(self):
        return _pygamma.PulCycle_WF_values(self)

    def length(self):
        return _pygamma.PulCycle_length(self)

    def WF_length(self):
        return _pygamma.PulCycle_WF_length(self)

    def value(self, i):
        return _pygamma.PulCycle_value(self, i)

    def phase(self, i):
        return _pygamma.PulCycle_phase(self, i)

    def steps(self, *args):
        return _pygamma.PulCycle_steps(self, *args)

    def cycles(self, td):
        return _pygamma.PulCycle_cycles(self, td)

    def fullcycles(self, td=-1):
        return _pygamma.PulCycle_fullcycles(self, td)

    def scalegB1(self, sf):
        return _pygamma.PulCycle_scalegB1(self, sf)

    def IvsT(self, split, ends, N=1):
        return _pygamma.PulCycle_IvsT(self, split, ends, N)

    def PvsT(self, split, ends, N=1, ph=0):
        return _pygamma.PulCycle_PvsT(self, split, ends, N, ph)

    def GP(self, ty=1, spl=0, ed=0, N=1, p=0):
        return _pygamma.PulCycle_GP(self, ty, spl, ed, N, p)

    def FM(self, ty=1, spl=0, ed=0, N=1, p=0):
        return _pygamma.PulCycle_FM(self, ty, spl, ed, N, p)

    def FIDsync(self, SW):
        return _pygamma.PulCycle_FIDsync(self, SW)

    def FIDtest(self, td, nCYs, nWFs, nSTPs, tr):
        return _pygamma.PulCycle_FIDtest(self, td, nCYs, nWFs, nSTPs, tr)

    def FIDsynchCYC(self, npts, nCYs, D, sigmap, track=0):
        return _pygamma.PulCycle_FIDsynchCYC(self, npts, nCYs, D, sigmap, track)

    def FIDWFsynch(self, npts, nWFs, D, sigmap, track=0):
        return _pygamma.PulCycle_FIDWFsynch(self, npts, nWFs, D, sigmap, track)

    def FIDSTsynch(self, npts, nSTs, D, sigmap, track=0):
        return _pygamma.PulCycle_FIDSTsynch(self, npts, nSTs, D, sigmap, track)

    def FID(self, N, td, D, sp, F=0):
        return _pygamma.PulCycle_FID(self, N, td, D, sp, F)

    def FIDRsynchCYC(self, npts, nCYs, D, sigmap, track=0):
        return _pygamma.PulCycle_FIDRsynchCYC(self, npts, nCYs, D, sigmap, track)

    def FIDRWFsynch(self, npts, nWFs, D, sigmap, track=0):
        return _pygamma.PulCycle_FIDRWFsynch(self, npts, nWFs, D, sigmap, track)

    def FIDRSTsynch(self, npts, nSTs, D, sigmap, track=0):
        return _pygamma.PulCycle_FIDRSTsynch(self, npts, nSTs, D, sigmap, track)

    def FIDR(self, N, td, D, sp, F=0):
        return _pygamma.PulCycle_FIDR(self, N, td, D, sp, F)
PulCycle_swigregister = _pygamma.PulCycle_swigregister
PulCycle_swigregister(PulCycle)

class MLEV(Pulse):
    __swig_setmethods__ = {}
    for _s in [Pulse]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MLEV, name, value)
    __swig_getmethods__ = {}
    for _s in [Pulse]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MLEV, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_MLEV(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_MLEV
    __del__ = lambda self: None

    def __assign__(self, MLEV1):
        return _pygamma.MLEV___assign__(self, MLEV1)

    def WF(self):
        return _pygamma.MLEV_WF(self)

    def WF_C180(self):
        return _pygamma.MLEV_WF_C180(self)

    def PCmp(self, sys):
        return _pygamma.MLEV_PCmp(self, sys)

    def PCmp_C180(self, sys):
        return _pygamma.MLEV_PCmp_C180(self, sys)

    def CycMLEV4(self, sys):
        return _pygamma.MLEV_CycMLEV4(self, sys)

    def CycMLEV8(self, sys):
        return _pygamma.MLEV_CycMLEV8(self, sys)

    def CycMLEV16(self, sys):
        return _pygamma.MLEV_CycMLEV16(self, sys)

    def read(self, *args):
        return _pygamma.MLEV_read(self, *args)

    def ask_read(self, argc, argv, argn):
        return _pygamma.MLEV_ask_read(self, argc, argv, argn)
MLEV_swigregister = _pygamma.MLEV_swigregister
MLEV_swigregister(MLEV)


def CYC_MLEV4(phi=0):
    return _pygamma.CYC_MLEV4(phi)
CYC_MLEV4 = _pygamma.CYC_MLEV4

def CYC_MLEV8(phi=0):
    return _pygamma.CYC_MLEV8(phi)
CYC_MLEV8 = _pygamma.CYC_MLEV8

def CYC_MLEV16(phi=0):
    return _pygamma.CYC_MLEV16(phi)
CYC_MLEV16 = _pygamma.CYC_MLEV16
class PulTrain(PulComposite):
    __swig_setmethods__ = {}
    for _s in [PulComposite]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PulTrain, name, value)
    __swig_getmethods__ = {}
    for _s in [PulComposite]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PulTrain, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_PulTrain(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_PulTrain
    __del__ = lambda self: None

    def __assign__(self, PT1):
        return _pygamma.PulTrain___assign__(self, PT1)

    def GetU(self, td):
        return _pygamma.PulTrain_GetU(self, td)

    def FID(self, npts, td, D, sigmap):
        return _pygamma.PulTrain_FID(self, npts, td, D, sigmap)

    def FIDR(self, npts, td, D, sigmap):
        return _pygamma.PulTrain_FIDR(self, npts, td, D, sigmap)
PulTrain_swigregister = _pygamma.PulTrain_swigregister
PulTrain_swigregister(PulTrain)

class PulSupCycle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PulSupCycle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PulSupCycle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_PulSupCycle(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_PulSupCycle
    __del__ = lambda self: None

    def __assign__(self, SCyc1):
        return _pygamma.PulSupCycle___assign__(self, SCyc1)

    def steps(self):
        return _pygamma.PulSupCycle_steps(self)

    def name(self):
        return _pygamma.PulSupCycle_name(self)

    def values(self):
        return _pygamma.PulSupCycle_values(self)

    def value(self, i):
        return _pygamma.PulSupCycle_value(self, i)

    def phase(self, i):
        return _pygamma.PulSupCycle_phase(self, i)
PulSupCycle_swigregister = _pygamma.PulSupCycle_swigregister
PulSupCycle_swigregister(PulSupCycle)


def WF_CHIRP95(N, tp, delW, gB1, scale=0):
    return _pygamma.WF_CHIRP95(N, tp, delW, gB1, scale)
WF_CHIRP95 = _pygamma.WF_CHIRP95

def CP_CHIRP95(sys, IsoC, N, tp, delW, gB1, scale=0):
    return _pygamma.CP_CHIRP95(sys, IsoC, N, tp, delW, gB1, scale)
CP_CHIRP95 = _pygamma.CP_CHIRP95

def CYC_CHIRP95():
    return _pygamma.CYC_CHIRP95()
CYC_CHIRP95 = _pygamma.CYC_CHIRP95
class GARP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GARP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GARP, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_GARP(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_GARP
    __del__ = lambda self: None

    def __assign__(self, GARP1):
        return _pygamma.GARP___assign__(self, GARP1)

    def channel(self):
        return _pygamma.GARP_channel(self)

    def strength(self, *args):
        return _pygamma.GARP_strength(self, *args)

    def phase(self):
        return _pygamma.GARP_phase(self)

    def offset(self):
        return _pygamma.GARP_offset(self)

    def WF(self):
        return _pygamma.GARP_WF(self)

    def WF_GARP(self):
        return _pygamma.GARP_WF_GARP(self)

    def PCmpGARP(self, sys):
        return _pygamma.GARP_PCmpGARP(self, sys)

    def PCmp(self, *args):
        return _pygamma.GARP_PCmp(self, *args)

    def CycGARP1(self, sys):
        return _pygamma.GARP_CycGARP1(self, sys)

    def read(self, *args):
        return _pygamma.GARP_read(self, *args)

    def ask_read(self, argc, argv, argn, idx=-1):
        return _pygamma.GARP_ask_read(self, argc, argv, argn, idx)
GARP_swigregister = _pygamma.GARP_swigregister
GARP_swigregister(GARP)

class WALTZ(Pulse):
    __swig_setmethods__ = {}
    for _s in [Pulse]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WALTZ, name, value)
    __swig_getmethods__ = {}
    for _s in [Pulse]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WALTZ, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_WALTZ(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_WALTZ
    __del__ = lambda self: None

    def __assign__(self, WALTZ1):
        return _pygamma.WALTZ___assign__(self, WALTZ1)

    def WF(self, even=0):
        return _pygamma.WALTZ_WF(self, even)

    def WF_WALTZR(self, even=0):
        return _pygamma.WALTZ_WF_WALTZR(self, even)

    def WF_WALTZK(self, even=0):
        return _pygamma.WALTZ_WF_WALTZK(self, even)

    def WF_WALTZQ(self, even=0):
        return _pygamma.WALTZ_WF_WALTZQ(self, even)

    def PCmp(self, sys, even=0):
        return _pygamma.WALTZ_PCmp(self, sys, even)

    def PCmpWALTZR(self, sys, even=0):
        return _pygamma.WALTZ_PCmpWALTZR(self, sys, even)

    def PCmpWALTZK(self, sys, even=0):
        return _pygamma.WALTZ_PCmpWALTZK(self, sys, even)

    def PCmpWALTZQ(self, sys, even=0):
        return _pygamma.WALTZ_PCmpWALTZQ(self, sys, even)

    def CycWALTZ4(self, sys, even=0):
        return _pygamma.WALTZ_CycWALTZ4(self, sys, even)

    def CycWALTZ8(self, sys, even=0):
        return _pygamma.WALTZ_CycWALTZ8(self, sys, even)

    def CycWALTZ16(self, sys, even=0):
        return _pygamma.WALTZ_CycWALTZ16(self, sys, even)

    def read(self, *args):
        return _pygamma.WALTZ_read(self, *args)

    def ask_read(self, argc, argv, argn):
        return _pygamma.WALTZ_ask_read(self, argc, argv, argn)
WALTZ_swigregister = _pygamma.WALTZ_swigregister
WALTZ_swigregister(WALTZ)


def CYC_WALTZ4(phi=0):
    return _pygamma.CYC_WALTZ4(phi)
CYC_WALTZ4 = _pygamma.CYC_WALTZ4

def CYC_WALTZ8(phi=0):
    return _pygamma.CYC_WALTZ8(phi)
CYC_WALTZ8 = _pygamma.CYC_WALTZ8
class PulTrainSCyc(PulSupCycle):
    __swig_setmethods__ = {}
    for _s in [PulSupCycle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PulTrainSCyc, name, value)
    __swig_getmethods__ = {}
    for _s in [PulSupCycle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PulTrainSCyc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_PulTrainSCyc(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_PulTrainSCyc
    __del__ = lambda self: None

    def __assign__(self, PTSC1):
        return _pygamma.PulTrainSCyc___assign__(self, PTSC1)

    def GetU(self, i=-1):
        return _pygamma.PulTrainSCyc_GetU(self, i)

    def GetUsum(self, i=-1):
        return _pygamma.PulTrainSCyc_GetUsum(self, i)

    def GetUmult(self, N):
        return _pygamma.PulTrainSCyc_GetUmult(self, N)

    def SetGs(self, PTC):
        return _pygamma.PulTrainSCyc_SetGs(self, PTC)

    def GetG(self, i=-1):
        return _pygamma.PulTrainSCyc_GetG(self, i)

    def length(self):
        return _pygamma.PulTrainSCyc_length(self)

    def steps(self, *args):
        return _pygamma.PulTrainSCyc_steps(self, *args)

    def fullSCYCs(self, td=-1):
        return _pygamma.PulTrainSCyc_fullSCYCs(self, td)

    def fullsteps(self, td=-1):
        return _pygamma.PulTrainSCyc_fullsteps(self, td)
PulTrainSCyc_swigregister = _pygamma.PulTrainSCyc_swigregister
PulTrainSCyc_swigregister(PulTrainSCyc)

class DANTE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DANTE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DANTE, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_DANTE(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_DANTE
    __del__ = lambda self: None

    def __assign__(self, DANTE1):
        return _pygamma.DANTE___assign__(self, DANTE1)

    def steps(self):
        return _pygamma.DANTE_steps(self)

    def channel(self):
        return _pygamma.DANTE_channel(self)

    def dlength(self):
        return _pygamma.DANTE_dlength(self)

    def strength(self):
        return _pygamma.DANTE_strength(self)

    def plength(self):
        return _pygamma.DANTE_plength(self)

    def angle(self):
        return _pygamma.DANTE_angle(self)

    def phase(self):
        return _pygamma.DANTE_phase(self)

    def offset(self):
        return _pygamma.DANTE_offset(self)

    def length(self):
        return _pygamma.DANTE_length(self)

    def WF(self):
        return _pygamma.DANTE_WF(self)

    def CP(self, sys):
        return _pygamma.DANTE_CP(self, sys)

    def PT(self, sys):
        return _pygamma.DANTE_PT(self, sys)

    def read(self, *args):
        return _pygamma.DANTE_read(self, *args)

    def ask_read(self, argc, argv, argn):
        return _pygamma.DANTE_ask_read(self, argc, argv, argn)
DANTE_swigregister = _pygamma.DANTE_swigregister
DANTE_swigregister(DANTE)


def WF_DANTE(td, gamB1, tpul, phi=0):
    return _pygamma.WF_DANTE(td, gamB1, tpul, phi)
WF_DANTE = _pygamma.WF_DANTE

def CP_DANTE(*args):
    return _pygamma.CP_DANTE(*args)
CP_DANTE = _pygamma.CP_DANTE

def PT_DANTE(sys, Iso, td, gamB1, tpul, phi=0):
    return _pygamma.PT_DANTE(sys, Iso, td, gamB1, tpul, phi)
PT_DANTE = _pygamma.PT_DANTE

def UDANTE(*args):
    return _pygamma.UDANTE(*args)
UDANTE = _pygamma.UDANTE

def ask_DANTE(sys, Iso, H, cutoff=1.e-10):
    return _pygamma.ask_DANTE(sys, Iso, H, cutoff)
ask_DANTE = _pygamma.ask_DANTE

def set_DANTE(gamB1, tmix, tpul, tdel, numb, type):
    return _pygamma.set_DANTE(gamB1, tmix, tpul, tdel, numb, type)
set_DANTE = _pygamma.set_DANTE

def pulseshift(p, ptime, FreqOffset):
    return _pygamma.pulseshift(p, ptime, FreqOffset)
pulseshift = _pygamma.pulseshift

def acquire(*args):
    return _pygamma.acquire(*args)
acquire = _pygamma.acquire

def FID(*args):
    return _pygamma.FID(*args)
FID = _pygamma.FID

def acquire1DT(*args):
    return _pygamma.acquire1DT(*args)
acquire1DT = _pygamma.acquire1DT

def detect(D, sigmas):
    return _pygamma.detect(D, sigmas)
detect = _pygamma.detect

def Hzgrad(*args):
    return _pygamma.Hzgrad(*args)
Hzgrad = _pygamma.Hzgrad

def Props(*args):
    return _pygamma.Props(*args)
Props = _pygamma.Props

def evolve(*args):
    return _pygamma.evolve(*args)
evolve = _pygamma.evolve

def Ixpulse_Us(sys, I, angle):
    return _pygamma.Ixpulse_Us(sys, I, angle)
Ixpulse_Us = _pygamma.Ixpulse_Us

def Iypulse_Us(sys, I, angle):
    return _pygamma.Iypulse_Us(sys, I, angle)
Iypulse_Us = _pygamma.Iypulse_Us

def Sxpuls_U(*args):
    return _pygamma.Sxpuls_U(*args)
Sxpuls_U = _pygamma.Sxpuls_U

def Sypuls_U(*args):
    return _pygamma.Sypuls_U(*args)
Sypuls_U = _pygamma.Sypuls_U

def Gxpulse_U(sys, Hs, I, tp, angle, N, cutoff):
    return _pygamma.Gxpulse_U(sys, Hs, I, tp, angle, N, cutoff)
Gxpulse_U = _pygamma.Gxpulse_U

def Gypulse_U(sys, Hs, I, tp, angle, N, cutoff):
    return _pygamma.Gypulse_U(sys, Hs, I, tp, angle, N, cutoff)
Gypulse_U = _pygamma.Gypulse_U

def SincPulseXUs(sys, Hs, I, tp, angle, N, NN):
    return _pygamma.SincPulseXUs(sys, Hs, I, tp, angle, N, NN)
SincPulseXUs = _pygamma.SincPulseXUs

def SincPulseYUs(sys, Hs, I, tp, angle, N, NN):
    return _pygamma.SincPulseYUs(sys, Hs, I, tp, angle, N, NN)
SincPulseYUs = _pygamma.SincPulseYUs
class sys_gradz(spin_system):
    __swig_setmethods__ = {}
    for _s in [spin_system]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, sys_gradz, name, value)
    __swig_getmethods__ = {}
    for _s in [spin_system]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, sys_gradz, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_sys_gradz(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_sys_gradz
    __del__ = lambda self: None

    def NSS(self, *args):
        return _pygamma.sys_gradz_NSS(self, *args)

    def BoGrad(self, *args):
        return _pygamma.sys_gradz_BoGrad(self, *args)

    def GradVal(self, dist):
        return _pygamma.sys_gradz_GradVal(self, dist)

    def SysLen(self, *args):
        return _pygamma.sys_gradz_SysLen(self, *args)

    def SysDist(self, nss):
        return _pygamma.sys_gradz_SysDist(self, nss)

    def SubSys(self, nss):
        return _pygamma.sys_gradz_SubSys(self, nss)

    def SubSysShift(self, *args):
        return _pygamma.sys_gradz_SubSysShift(self, *args)

    def SubSysPPM(self, *args):
        return _pygamma.sys_gradz_SubSysPPM(self, *args)

    def PSetAdd(self, pset, idx=-1):
        return _pygamma.sys_gradz_PSetAdd(self, pset, idx)

    def setSubSys(self, pset):
        return _pygamma.sys_gradz_setSubSys(self, pset)

    def setBoGrad(self, pset):
        return _pygamma.sys_gradz_setBoGrad(self, pset)

    def setLength(self, pset):
        return _pygamma.sys_gradz_setLength(self, pset)

    def __assign__(self, *args):
        return _pygamma.sys_gradz___assign__(self, *args)

    def write(self, *args):
        return _pygamma.sys_gradz_write(self, *args)

    def read(self, *args):
        return _pygamma.sys_gradz_read(self, *args)

    def ask_read(self, *args):
        return _pygamma.sys_gradz_ask_read(self, *args)
sys_gradz_swigregister = _pygamma.sys_gradz_swigregister
sys_gradz_swigregister(sys_gradz)


def RCCrf(*args):
    return _pygamma.RCCrf(*args)
RCCrf = _pygamma.RCCrf

def RCCds(*args):
    return _pygamma.RCCds(*args)
RCCds = _pygamma.RCCds

def RCCrfds(*args):
    return _pygamma.RCCrfds(*args)
RCCrfds = _pygamma.RCCrfds

def R1_CC(*args):
    return _pygamma.R1_CC(*args)
R1_CC = _pygamma.R1_CC

def R1_CC_max(*args):
    return _pygamma.R1_CC_max(*args)
R1_CC_max = _pygamma.R1_CC_max

def T1_CC(*args):
    return _pygamma.T1_CC(*args)
T1_CC = _pygamma.T1_CC

def T1_CC_max(*args):
    return _pygamma.T1_CC_max(*args)
T1_CC_max = _pygamma.T1_CC_max

def R2_CC(*args):
    return _pygamma.R2_CC(*args)
R2_CC = _pygamma.R2_CC

def R2_CC_max(*args):
    return _pygamma.R2_CC_max(*args)
R2_CC_max = _pygamma.R2_CC_max

def T2_CC(*args):
    return _pygamma.T2_CC(*args)
T2_CC = _pygamma.T2_CC

def T2_CC_max(*args):
    return _pygamma.T2_CC_max(*args)
T2_CC_max = _pygamma.T2_CC_max

def LWhh_CC(*args):
    return _pygamma.LWhh_CC(*args)
LWhh_CC = _pygamma.LWhh_CC

def LWhh_CC_max(*args):
    return _pygamma.LWhh_CC_max(*args)
LWhh_CC_max = _pygamma.LWhh_CC_max

def xiCSA(*args):
    return _pygamma.xiCSA(*args)
xiCSA = _pygamma.xiCSA

def CSA(*args):
    return _pygamma.CSA(*args)
CSA = _pygamma.CSA

def RDCX(*args):
    return _pygamma.RDCX(*args)
RDCX = _pygamma.RDCX

def RDC(*args):
    return _pygamma.RDC(*args)
RDC = _pygamma.RDC

def RCD(*args):
    return _pygamma.RCD(*args)
RCD = _pygamma.RCD

def RCDrf(*args):
    return _pygamma.RCDrf(*args)
RCDrf = _pygamma.RCDrf

def RDD_Jgen(sys, Ho, type=0, level=4):
    return _pygamma.RDD_Jgen(sys, Ho, type, level)
RDD_Jgen = _pygamma.RDD_Jgen

def RDDrf(*args):
    return _pygamma.RDDrf(*args)
RDDrf = _pygamma.RDDrf

def RDDds(*args):
    return _pygamma.RDDds(*args)
RDDds = _pygamma.RDDds

def RDDrfds(*args):
    return _pygamma.RDDrfds(*args)
RDDrfds = _pygamma.RDDrfds

def xiD(*args):
    return _pygamma.xiD(*args)
xiD = _pygamma.xiD

def DCC(*args):
    return _pygamma.DCC(*args)
DCC = _pygamma.DCC

def R1_DD(*args):
    return _pygamma.R1_DD(*args)
R1_DD = _pygamma.R1_DD

def R1_DD_max(*args):
    return _pygamma.R1_DD_max(*args)
R1_DD_max = _pygamma.R1_DD_max

def T1_DD(*args):
    return _pygamma.T1_DD(*args)
T1_DD = _pygamma.T1_DD

def T1_DD_max(*args):
    return _pygamma.T1_DD_max(*args)
T1_DD_max = _pygamma.T1_DD_max

def R2_DD(*args):
    return _pygamma.R2_DD(*args)
R2_DD = _pygamma.R2_DD

def R2_DD_max(*args):
    return _pygamma.R2_DD_max(*args)
R2_DD_max = _pygamma.R2_DD_max

def T2_DD(*args):
    return _pygamma.T2_DD(*args)
T2_DD = _pygamma.T2_DD

def T2_DD_max(*args):
    return _pygamma.T2_DD_max(*args)
T2_DD_max = _pygamma.T2_DD_max

def LWhh_DD(*args):
    return _pygamma.LWhh_DD(*args)
LWhh_DD = _pygamma.LWhh_DD

def LWhh_DD_max(*args):
    return _pygamma.LWhh_DD_max(*args)
LWhh_DD_max = _pygamma.LWhh_DD_max

def NOE(sys, i, j, eta=0):
    return _pygamma.NOE(sys, i, j, eta)
NOE = _pygamma.NOE

def R2_DDMQT(*args):
    return _pygamma.R2_DDMQT(*args)
R2_DDMQT = _pygamma.R2_DDMQT

def Rex(*args):
    return _pygamma.Rex(*args)
Rex = _pygamma.Rex

def J_error(i):
    return _pygamma.J_error(i)
J_error = _pygamma.J_error

def J_fatality(error):
    return _pygamma.J_fatality(error)
J_fatality = _pygamma.J_fatality

def J_gen(*args):
    return _pygamma.J_gen(*args)
J_gen = _pygamma.J_gen

def J_gen_shft(tau, w, shift, hs, hertz=0):
    return _pygamma.J_gen_shft(tau, w, shift, hs, hertz)
J_gen_shft = _pygamma.J_gen_shft

def tausD(*args):
    return _pygamma.tausD(*args)
tausD = _pygamma.tausD

def chiD(*args):
    return _pygamma.chiD(*args)
chiD = _pygamma.chiD

def taust(*args):
    return _pygamma.taust(*args)
taust = _pygamma.taust

def chit(*args):
    return _pygamma.chit(*args)
chit = _pygamma.chit

def Jcoeffs(*args):
    return _pygamma.Jcoeffs(*args)
Jcoeffs = _pygamma.Jcoeffs

def J_red_shft(*args):
    return _pygamma.J_red_shft(*args)
J_red_shft = _pygamma.J_red_shft

def J_reduced(*args):
    return _pygamma.J_reduced(*args)
J_reduced = _pygamma.J_reduced

def Q_red_shft(*args):
    return _pygamma.Q_red_shft(*args)
Q_red_shft = _pygamma.Q_red_shft

def Q_reduced(*args):
    return _pygamma.Q_reduced(*args)
Q_reduced = _pygamma.Q_reduced

def J_LZ_iso(S, tauM, taue, omega):
    return _pygamma.J_LZ_iso(S, tauM, taue, omega)
J_LZ_iso = _pygamma.J_LZ_iso

def J_LZ_aniso(S, A, tau1, tau2, taue, omega):
    return _pygamma.J_LZ_aniso(S, A, tau1, tau2, taue, omega)
J_LZ_aniso = _pygamma.J_LZ_aniso

def RQCX(*args):
    return _pygamma.RQCX(*args)
RQCX = _pygamma.RQCX

def RCQrf(*args):
    return _pygamma.RCQrf(*args)
RCQrf = _pygamma.RCQrf

def RQQrf(*args):
    return _pygamma.RQQrf(*args)
RQQrf = _pygamma.RQQrf

def RQQds(*args):
    return _pygamma.RQQds(*args)
RQQds = _pygamma.RQQds

def RQQrfds(sys, Heff, Wrf, type=0, level=4):
    return _pygamma.RQQrfds(sys, Heff, Wrf, type, level)
RQQrfds = _pygamma.RQQrfds

def R1_QQ(*args):
    return _pygamma.R1_QQ(*args)
R1_QQ = _pygamma.R1_QQ

def R1_QQ_max(*args):
    return _pygamma.R1_QQ_max(*args)
R1_QQ_max = _pygamma.R1_QQ_max

def T1_QQ(*args):
    return _pygamma.T1_QQ(*args)
T1_QQ = _pygamma.T1_QQ

def T1_QQ_max(*args):
    return _pygamma.T1_QQ_max(*args)
T1_QQ_max = _pygamma.T1_QQ_max

def R2_QQ(*args):
    return _pygamma.R2_QQ(*args)
R2_QQ = _pygamma.R2_QQ

def R2_QQ_max(*args):
    return _pygamma.R2_QQ_max(*args)
R2_QQ_max = _pygamma.R2_QQ_max

def T2_QQ(*args):
    return _pygamma.T2_QQ(*args)
T2_QQ = _pygamma.T2_QQ

def T2_QQ_max(*args):
    return _pygamma.T2_QQ_max(*args)
T2_QQ_max = _pygamma.T2_QQ_max

def LWhh_QQ(*args):
    return _pygamma.LWhh_QQ(*args)
LWhh_QQ = _pygamma.LWhh_QQ

def LWhh_QQ_max(*args):
    return _pygamma.LWhh_QQ_max(*args)
LWhh_QQ_max = _pygamma.LWhh_QQ_max

def xiQ(*args):
    return _pygamma.xiQ(*args)
xiQ = _pygamma.xiQ

def RRRx(*args):
    return _pygamma.RRRx(*args)
RRRx = _pygamma.RRRx

def RRR(*args):
    return _pygamma.RRR(*args)
RRR = _pygamma.RRR

def Rij_rdm(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    return _pygamma.Rij_rdm(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)
Rij_rdm = _pygamma.Rij_rdm

def Rmumu_rdm(LOp, T1s, T2s, w, hs, taus, c1s, c2s, xi1xi2, w0, w1, w2, level=4, autoc=0):
    return _pygamma.Rmumu_rdm(LOp, T1s, T2s, w, hs, taus, c1s, c2s, xi1xi2, w0, w1, w2, level, autoc)
Rmumu_rdm = _pygamma.Rmumu_rdm

def R1_RR(*args):
    return _pygamma.R1_RR(*args)
R1_RR = _pygamma.R1_RR

def R1_RR_max(sys):
    return _pygamma.R1_RR_max(sys)
R1_RR_max = _pygamma.R1_RR_max

def T1_RR(*args):
    return _pygamma.T1_RR(*args)
T1_RR = _pygamma.T1_RR

def T1_RR_max(sys):
    return _pygamma.T1_RR_max(sys)
T1_RR_max = _pygamma.T1_RR_max

def R2_RR(*args):
    return _pygamma.R2_RR(*args)
R2_RR = _pygamma.R2_RR

def R2_RR_max(sys):
    return _pygamma.R2_RR_max(sys)
R2_RR_max = _pygamma.R2_RR_max

def T2_RR(*args):
    return _pygamma.T2_RR(*args)
T2_RR = _pygamma.T2_RR

def T2_RR_max(sys):
    return _pygamma.T2_RR_max(sys)
T2_RR_max = _pygamma.T2_RR_max

def LWhh_RR(*args):
    return _pygamma.LWhh_RR(*args)
LWhh_RR = _pygamma.LWhh_RR

def LWhh_RR_max(*args):
    return _pygamma.LWhh_RR_max(*args)
LWhh_RR_max = _pygamma.LWhh_RR_max

def xiRDM(*args):
    return _pygamma.xiRDM(*args)
xiRDM = _pygamma.xiRDM

def RlxNMRerror(eidx, noret=0):
    return _pygamma.RlxNMRerror(eidx, noret)
RlxNMRerror = _pygamma.RlxNMRerror

def RlxNMRfatal(eidx):
    return _pygamma.RlxNMRfatal(eidx)
RlxNMRfatal = _pygamma.RlxNMRfatal

def R_4(*args):
    return _pygamma.R_4(*args)
R_4 = _pygamma.R_4

def R_3(LOp, w, rank, T1s, T2s, J12, cutoff=1.e-2):
    return _pygamma.R_3(LOp, w, rank, T1s, T2s, J12, cutoff)
R_3 = _pygamma.R_3

def R_2(*args):
    return _pygamma.R_2(*args)
R_2 = _pygamma.R_2

def Rodiag_2(hs, T1s, T2s, J12, rank, a, b):
    return _pygamma.Rodiag_2(hs, T1s, T2s, J12, rank, a, b)
Rodiag_2 = _pygamma.Rodiag_2

def Rdiag_2(hs, T1s, T2s, J12, rank, a, aa):
    return _pygamma.Rdiag_2(hs, T1s, T2s, J12, rank, a, aa)
Rdiag_2 = _pygamma.Rdiag_2

def R_0(*args):
    return _pygamma.R_0(*args)
R_0 = _pygamma.R_0

def R_4s(LOp, rank, T1s, T2s, J12):
    return _pygamma.R_4s(LOp, rank, T1s, T2s, J12)
R_4s = _pygamma.R_4s

def R_3s(LOp, w, rank, T1s, T2s, J12):
    return _pygamma.R_3s(LOp, w, rank, T1s, T2s, J12)
R_3s = _pygamma.R_3s

def R_2s(LOp, rank, T1s, T2s, J12):
    return _pygamma.R_2s(LOp, rank, T1s, T2s, J12)
R_2s = _pygamma.R_2s

def R_AC_0(*args):
    return _pygamma.R_AC_0(*args)
R_AC_0 = _pygamma.R_AC_0

def R_CC_0(*args):
    return _pygamma.R_CC_0(*args)
R_CC_0 = _pygamma.R_CC_0

def R_CC_0_trans(T1s, T2s, LOp1, rank=2, xisq=1):
    return _pygamma.R_CC_0_trans(T1s, T2s, LOp1, rank, xisq)
R_CC_0_trans = _pygamma.R_CC_0_trans

def R_AC_1(*args):
    return _pygamma.R_AC_1(*args)
R_AC_1 = _pygamma.R_AC_1

def R_CC_1(*args):
    return _pygamma.R_CC_1(*args)
R_CC_1 = _pygamma.R_CC_1

def Rmumu(*args):
    return _pygamma.Rmumu(*args)
Rmumu = _pygamma.Rmumu

def Rmu1mu2(LOp, sys, Ho, w, xi1s, n1, xi2s, n2, A1, A2, T1, T2, taus, chi, l, type=0, level=4):
    return _pygamma.Rmu1mu2(LOp, sys, Ho, w, xi1s, n1, xi2s, n2, A1, A2, T1, T2, taus, chi, l, type, level)
Rmu1mu2 = _pygamma.Rmu1mu2

def Rijkl(*args):
    return _pygamma.Rijkl(*args)
Rijkl = _pygamma.Rijkl

def Rij(*args):
    return _pygamma.Rij(*args)
Rij = _pygamma.Rij

def Rijk(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    return _pygamma.Rijk(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)
Rijk = _pygamma.Rijk

def Rkij(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    return _pygamma.Rkij(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)
Rkij = _pygamma.Rkij

def Rmumuds(LOp, T1s, T2s, w, hs, taus, c1s, c2s, xi1xi2, w0, w1, w2, level=4, autoc=0, het=0):
    return _pygamma.Rmumuds(LOp, T1s, T2s, w, hs, taus, c1s, c2s, xi1xi2, w0, w1, w2, level, autoc, het)
Rmumuds = _pygamma.Rmumuds

def Rijklds(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    return _pygamma.Rijklds(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)
Rijklds = _pygamma.Rijklds

def Rijds(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    return _pygamma.Rijds(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)
Rijds = _pygamma.Rijds

def Rijkds(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    return _pygamma.Rijkds(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)
Rijkds = _pygamma.Rijkds

def Rkijds(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    return _pygamma.Rkijds(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)
Rkijds = _pygamma.Rkijds

def LOp_sigma(sigma):
    return _pygamma.LOp_sigma(sigma)
LOp_sigma = _pygamma.LOp_sigma

def Rrf_4(*args):
    return _pygamma.Rrf_4(*args)
Rrf_4 = _pygamma.Rrf_4

def Rrf_3(LOp, w, rank, T1s, T2s, J12, cutoff=1.e-2):
    return _pygamma.Rrf_3(LOp, w, rank, T1s, T2s, J12, cutoff)
Rrf_3 = _pygamma.Rrf_3

def Rrf_2(*args):
    return _pygamma.Rrf_2(*args)
Rrf_2 = _pygamma.Rrf_2

def Rrf_0(*args):
    return _pygamma.Rrf_0(*args)
Rrf_0 = _pygamma.Rrf_0

def Rrf_4s(LOp, rank, T1s, T2s, J12):
    return _pygamma.Rrf_4s(LOp, rank, T1s, T2s, J12)
Rrf_4s = _pygamma.Rrf_4s

def Rrf_3s(LOp, w, rank, T1s, T2s, J12):
    return _pygamma.Rrf_3s(LOp, w, rank, T1s, T2s, J12)
Rrf_3s = _pygamma.Rrf_3s

def Rrf_2s(LOp, rank, T1s, T2s, J12):
    return _pygamma.Rrf_2s(LOp, rank, T1s, T2s, J12)
Rrf_2s = _pygamma.Rrf_2s

def Rrfmumu(LOp, T1s, T2s, J12, J, w, rank=2, level=4, autoc=0, het=0):
    return _pygamma.Rrfmumu(LOp, T1s, T2s, J12, J, w, rank, level, autoc, het)
Rrfmumu = _pygamma.Rrfmumu

def Rrfijkl(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    return _pygamma.Rrfijkl(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)
Rrfijkl = _pygamma.Rrfijkl

def Rrfij(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    return _pygamma.Rrfij(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)
Rrfij = _pygamma.Rrfij

def Rrfijk(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    return _pygamma.Rrfijk(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)
Rrfijk = _pygamma.Rrfijk

def Rrfkij(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    return _pygamma.Rrfkij(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)
Rrfkij = _pygamma.Rrfkij

def Rrfijklds(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    return _pygamma.Rrfijklds(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)
Rrfijklds = _pygamma.Rrfijklds

def Rrfijds(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    return _pygamma.Rrfijds(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)
Rrfijds = _pygamma.Rrfijds

def Rrfijkds(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level):
    return _pygamma.Rrfijkds(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)
Rrfijkds = _pygamma.Rrfijkds

def Rrfkijds(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level):
    return _pygamma.Rrfkijds(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)
Rrfkijds = _pygamma.Rrfkijds

def sigma_ss(sys, L, R):
    return _pygamma.sigma_ss(sys, L, R)
sigma_ss = _pygamma.sigma_ss

def sigma_ss_it(sys, L, Heff, R):
    return _pygamma.sigma_ss_it(sys, L, Heff, R)
sigma_ss_it = _pygamma.sigma_ss_it

def REXijkl(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS=0):
    return _pygamma.REXijkl(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS)
REXijkl = _pygamma.REXijkl

def REXijk(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS=0):
    return _pygamma.REXijk(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS)
REXijk = _pygamma.REXijk

def REXkij(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS=0):
    return _pygamma.REXkij(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS)
REXkij = _pygamma.REXkij

def REXij(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS=0):
    return _pygamma.REXij(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS)
REXij = _pygamma.REXij

def REXmumu(*args):
    return _pygamma.REXmumu(*args)
REXmumu = _pygamma.REXmumu

def REXrfijkl(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS=0):
    return _pygamma.REXrfijkl(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS)
REXrfijkl = _pygamma.REXrfijkl

def REXrfijk(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS=0):
    return _pygamma.REXrfijk(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS)
REXrfijk = _pygamma.REXrfijk

def REXrfkij(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS=0):
    return _pygamma.REXrfkij(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS)
REXrfkij = _pygamma.REXrfkij

def REXrfij(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS=0):
    return _pygamma.REXrfij(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS)
REXrfij = _pygamma.REXrfij

def REXrfmumu(LOp, T1s, T2s, J12, J, w, rank, level, autoc, DFS=0, het=0):
    return _pygamma.REXrfmumu(LOp, T1s, T2s, J12, J, w, rank, level, autoc, DFS, het)
REXrfmumu = _pygamma.REXrfmumu

def REX_4(*args):
    return _pygamma.REX_4(*args)
REX_4 = _pygamma.REX_4

def REX_3(LOp, w, rank, T1s, T2s, J12, cutoff=1.e-2):
    return _pygamma.REX_3(LOp, w, rank, T1s, T2s, J12, cutoff)
REX_3 = _pygamma.REX_3

def REXrf_4(*args):
    return _pygamma.REXrf_4(*args)
REXrf_4 = _pygamma.REXrf_4

def REXrf_3(LOp, w, rank, T1s, T2s, J12, cutoff=1.e-6):
    return _pygamma.REXrf_3(LOp, w, rank, T1s, T2s, J12, cutoff)
REXrf_3 = _pygamma.REXrf_3
class WBRExch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WBRExch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WBRExch, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_WBRExch(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pygamma.delete_WBRExch
    __del__ = lambda self: None

    def Level(self, *args):
        return _pygamma.WBRExch_Level(self, *args)

    def Type(self, *args):
        return _pygamma.WBRExch_Type(self, *args)

    def Dip(self, i=1):
        return _pygamma.WBRExch_Dip(self, i)

    def DipDFS(self, i=1):
        return _pygamma.WBRExch_DipDFS(self, i)

    def DipCSA(self, i=1):
        return _pygamma.WBRExch_DipCSA(self, i)

    def DipCSADFS(self, i=1):
        return _pygamma.WBRExch_DipCSADFS(self, i)

    def DipQuad(self, i=1):
        return _pygamma.WBRExch_DipQuad(self, i)

    def DipQuadDFS(self, i=1):
        return _pygamma.WBRExch_DipQuadDFS(self, i)

    def CSA(self, i=1):
        return _pygamma.WBRExch_CSA(self, i)

    def CSADFS(self, i=1):
        return _pygamma.WBRExch_CSADFS(self, i)

    def CSADip(self, i=1):
        return _pygamma.WBRExch_CSADip(self, i)

    def CSADipDFS(self, i=1):
        return _pygamma.WBRExch_CSADipDFS(self, i)

    def CSAQuad(self, i=1):
        return _pygamma.WBRExch_CSAQuad(self, i)

    def CSAQuadDFS(self, i=1):
        return _pygamma.WBRExch_CSAQuadDFS(self, i)

    def Quad(self, i=1):
        return _pygamma.WBRExch_Quad(self, i)

    def QuadDFS(self, i=1):
        return _pygamma.WBRExch_QuadDFS(self, i)

    def QuadDip(self, i=1):
        return _pygamma.WBRExch_QuadDip(self, i)

    def QuadDipDFSQuad(self, i=1):
        return _pygamma.WBRExch_QuadDipDFSQuad(self, i)

    def QuadCSA(self, i=1):
        return _pygamma.WBRExch_QuadCSA(self, i)

    def QuadCSADFS(self, i=1):
        return _pygamma.WBRExch_QuadCSADFS(self, i)

    def LWhh(self, sys, Iso):
        return _pygamma.WBRExch_LWhh(self, sys, Iso)

    def SetZero(self):
        return _pygamma.WBRExch_SetZero(self)

    def SetLevel(self, pset):
        return _pygamma.WBRExch_SetLevel(self, pset)

    def SetType(self, pset):
        return _pygamma.WBRExch_SetType(self, pset)

    def SetDip(self, pset):
        return _pygamma.WBRExch_SetDip(self, pset)

    def SetSA(self, pset):
        return _pygamma.WBRExch_SetSA(self, pset)

    def SetQuad(self, pset):
        return _pygamma.WBRExch_SetQuad(self, pset)

    def SetDCX(self, pset):
        return _pygamma.WBRExch_SetDCX(self, pset)

    def SetDQX(self, pset):
        return _pygamma.WBRExch_SetDQX(self, pset)

    def SetQCX(self, pset):
        return _pygamma.WBRExch_SetQCX(self, pset)

    def __assign__(self, *args):
        return _pygamma.WBRExch___assign__(self, *args)

    def prepQuad(self, sys, Xis, Ts, As):
        return _pygamma.WBRExch_prepQuad(self, sys, Xis, Ts, As)

    def read(self, *args):
        return _pygamma.WBRExch_read(self, *args)

    def ask_read(self, *args):
        return _pygamma.WBRExch_ask_read(self, *args)

    def ask(self, argc, argv, argn):
        return _pygamma.WBRExch_ask(self, argc, argv, argn)

    def REX(self, sys, Ho, fext=0):
        return _pygamma.WBRExch_REX(self, sys, Ho, fext)

    def REXrf(self, sys, Heff, Wrf, fext=0):
        return _pygamma.WBRExch_REXrf(self, sys, Heff, Wrf, fext)
WBRExch_swigregister = _pygamma.WBRExch_swigregister
WBRExch_swigregister(WBRExch)


def RDDel(sys, Ho, T1, T2, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    return _pygamma.RDDel(sys, Ho, T1, T2, a, aa, b, bb, DFS, Windex, Sindex)
RDDel = _pygamma.RDDel

def RSSel(sys, Ho, T1, T2, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    return _pygamma.RSSel(sys, Ho, T1, T2, a, aa, b, bb, DFS, Windex, Sindex)
RSSel = _pygamma.RSSel

def RDSel(sys, Ho, T1, T2, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    return _pygamma.RDSel(sys, Ho, T1, T2, a, aa, b, bb, DFS, Windex, Sindex)
RDSel = _pygamma.RDSel

def RSDel(sys, Ho, T1, T2, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    return _pygamma.RSDel(sys, Ho, T1, T2, a, aa, b, bb, DFS, Windex, Sindex)
RSDel = _pygamma.RSDel

def RRRel(sys, Ho, T1, T2, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    return _pygamma.RRRel(sys, Ho, T1, T2, a, aa, b, bb, DFS, Windex, Sindex)
RRRel = _pygamma.RRRel

def RQQel(sys, Ho, T1, T2, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    return _pygamma.RQQel(sys, Ho, T1, T2, a, aa, b, bb, DFS, Windex, Sindex)
RQQel = _pygamma.RQQel

def RQSel(sys, Ho, T1, T2, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    return _pygamma.RQSel(sys, Ho, T1, T2, a, aa, b, bb, DFS, Windex, Sindex)
RQSel = _pygamma.RQSel

def RSQel(sys, Ho, T1, T2, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    return _pygamma.RSQel(sys, Ho, T1, T2, a, aa, b, bb, DFS, Windex, Sindex)
RSQel = _pygamma.RSQel

def RQDel(sys, Ho, T1, T2, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    return _pygamma.RQDel(sys, Ho, T1, T2, a, aa, b, bb, DFS, Windex, Sindex)
RQDel = _pygamma.RQDel

def RDQel(sys, Ho, T1, T2, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    return _pygamma.RDQel(sys, Ho, T1, T2, a, aa, b, bb, DFS, Windex, Sindex)
RDQel = _pygamma.RDQel

def Rijkl_el(sys, Ho, rank, T1, T2, Mlabel, line1, line2, line3, signs, Jterms, Lterms, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    return _pygamma.Rijkl_el(sys, Ho, rank, T1, T2, Mlabel, line1, line2, line3, signs, Jterms, Lterms, a, aa, b, bb, DFS, Windex, Sindex)
Rijkl_el = _pygamma.Rijkl_el

def Rij_el(sys, Ho, rank, T1, T2, Mlabel, line1, line2, line3, signs, Jterms, Lterms, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    return _pygamma.Rij_el(sys, Ho, rank, T1, T2, Mlabel, line1, line2, line3, signs, Jterms, Lterms, a, aa, b, bb, DFS, Windex, Sindex)
Rij_el = _pygamma.Rij_el

def Rijk_el(sys, Ho, rank, T1, T2, Mlabel, line1, line2, line3, signs, Jterms, Lterms, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    return _pygamma.Rijk_el(sys, Ho, rank, T1, T2, Mlabel, line1, line2, line3, signs, Jterms, Lterms, a, aa, b, bb, DFS, Windex, Sindex)
Rijk_el = _pygamma.Rijk_el

def Rkij_el(sys, Ho, rank, T1, T2, Mlabel, line1, line2, line3, signs, Jterms, Lterms, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    return _pygamma.Rkij_el(sys, Ho, rank, T1, T2, Mlabel, line1, line2, line3, signs, Jterms, Lterms, a, aa, b, bb, DFS, Windex, Sindex)
Rkij_el = _pygamma.Rkij_el

def Rel_12(*args):
    return _pygamma.Rel_12(*args)
Rel_12 = _pygamma.Rel_12

def Rel_12_condense(*args):
    return _pygamma.Rel_12_condense(*args)
Rel_12_condense = _pygamma.Rel_12_condense

def Spin_labels(Lbls, sys, index=0):
    return _pygamma.Spin_labels(Lbls, sys, index)
Spin_labels = _pygamma.Spin_labels

def W_labels(Wlabels, sys, Op, index=-1):
    return _pygamma.W_labels(Wlabels, sys, Op, index)
W_labels = _pygamma.W_labels

def Elem_labels(Lbls, R, M, S, a, aa, b, bb, la=0, laa=0, lb=0, lbb=0):
    return _pygamma.Elem_labels(Lbls, R, M, S, a, aa, b, bb, la, laa, lb, lbb)
Elem_labels = _pygamma.Elem_labels

def Rel_clean(T1s, T2s, rank):
    return _pygamma.Rel_clean(T1s, T2s, rank)
Rel_clean = _pygamma.Rel_clean

def Rel(*args):
    return _pygamma.Rel(*args)
Rel = _pygamma.Rel

def sort(indx, mx, k, type=0, colf=0):
    return _pygamma.sort(indx, mx, k, type, colf)
sort = _pygamma.sort
class ExchProc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExchProc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExchProc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["KRate"] = _pygamma.ExchProc_KRate_set
    __swig_getmethods__["KRate"] = _pygamma.ExchProc_KRate_get
    if _newclass:
        KRate = _swig_property(_pygamma.ExchProc_KRate_get, _pygamma.ExchProc_KRate_set)
    __swig_setmethods__["LHSComps"] = _pygamma.ExchProc_LHSComps_set
    __swig_getmethods__["LHSComps"] = _pygamma.ExchProc_LHSComps_get
    if _newclass:
        LHSComps = _swig_property(_pygamma.ExchProc_LHSComps_get, _pygamma.ExchProc_LHSComps_set)
    __swig_setmethods__["RHSComps"] = _pygamma.ExchProc_RHSComps_set
    __swig_getmethods__["RHSComps"] = _pygamma.ExchProc_RHSComps_get
    if _newclass:
        RHSComps = _swig_property(_pygamma.ExchProc_RHSComps_get, _pygamma.ExchProc_RHSComps_set)
    __swig_setmethods__["SpinMaps"] = _pygamma.ExchProc_SpinMaps_set
    __swig_getmethods__["SpinMaps"] = _pygamma.ExchProc_SpinMaps_get
    if _newclass:
        SpinMaps = _swig_property(_pygamma.ExchProc_SpinMaps_get, _pygamma.ExchProc_SpinMaps_set)

    def XPerror(self, *args):
        return _pygamma.ExchProc_XPerror(self, *args)

    def XPfatal(self, *args):
        return _pygamma.ExchProc_XPfatal(self, *args)

    def getExch(self, pset, idx, exch, warn=True):
        return _pygamma.ExchProc_getExch(self, pset, idx, exch, warn)

    def parseExch(self, Exval, lhs, rhs, warn=True):
        return _pygamma.ExchProc_parseExch(self, Exval, lhs, rhs, warn)

    def getComps(self, pset, idx, lhs, rhs, warn=True):
        return _pygamma.ExchProc_getComps(self, pset, idx, lhs, rhs, warn)

    def getRate(self, pset, idx, rate, warn=True):
        return _pygamma.ExchProc_getRate(self, pset, idx, rate, warn)

    def getMappings(self, pset, idx, smaps, warn=True):
        return _pygamma.ExchProc_getMappings(self, pset, idx, smaps, warn)

    def getXP(self, pset, rate, lhsc, rhsc, smaps, idx, warn=True):
        return _pygamma.ExchProc_getXP(self, pset, rate, lhsc, rhsc, smaps, idx, warn)

    def setXP(self, pset, idx, warn=True):
        return _pygamma.ExchProc_setXP(self, pset, idx, warn)

    def CheckLHS(self, comp, warn=True):
        return _pygamma.ExchProc_CheckLHS(self, comp, warn)

    def CheckRHS(self, comp, warn=True):
        return _pygamma.ExchProc_CheckRHS(self, comp, warn)

    def __assign__(self, pr):
        return _pygamma.ExchProc___assign__(self, pr)
    __swig_destroy__ = _pygamma.delete_ExchProc
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _pygamma.new_ExchProc(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def intra_default(self, ic1, ic2, nspins, k):
        return _pygamma.ExchProc_intra_default(self, ic1, ic2, nspins, k)

    def Kex(self, *args):
        return _pygamma.ExchProc_Kex(self, *args)

    def LHSComp(self, comp):
        return _pygamma.ExchProc_LHSComp(self, comp)

    def RHSComp(self, comp):
        return _pygamma.ExchProc_RHSComp(self, comp)

    def NCompsLHS(self):
        return _pygamma.ExchProc_NCompsLHS(self)

    def NCompsRHS(self):
        return _pygamma.ExchProc_NCompsRHS(self)

    def mixes(self, comp, comp1):
        return _pygamma.ExchProc_mixes(self, comp, comp1)

    def CompInLHS(self, comp):
        return _pygamma.ExchProc_CompInLHS(self, comp)

    def CompInRHS(self, comp):
        return _pygamma.ExchProc_CompInRHS(self, comp)

    def involves(self, comp, lr=0):
        return _pygamma.ExchProc_involves(self, comp, lr)

    def NSpinMaps(self):
        return _pygamma.ExchProc_NSpinMaps(self)

    def SMap(self, *args):
        return _pygamma.ExchProc_SMap(self, *args)

    def add_pair(self, arg2):
        return _pygamma.ExchProc_add_pair(self, arg2)

    def mapped(self, *args):
        return _pygamma.ExchProc_mapped(self, *args)

    def mapping(self, spair):
        return _pygamma.ExchProc_mapping(self, spair)

    def read(self, *args):
        return _pygamma.ExchProc_read(self, *args)
    __swig_getmethods__["Label"] = lambda x: _pygamma.ExchProc_Label
    if _newclass:
        Label = staticmethod(_pygamma.ExchProc_Label)

    def LHSStr(self):
        return _pygamma.ExchProc_LHSStr(self)

    def RHSStr(self):
        return _pygamma.ExchProc_RHSStr(self)

    def SpinMapStrs(self):
        return _pygamma.ExchProc_SpinMapStrs(self)

    def lsprint(self, ostr, full=0):
        return _pygamma.ExchProc_lsprint(self, ostr, full)
ExchProc_swigregister = _pygamma.ExchProc_swigregister
ExchProc_swigregister(ExchProc)

def ExchProc_Label(i):
    return _pygamma.ExchProc_Label(i)
ExchProc_Label = _pygamma.ExchProc_Label

class multi_sys(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, multi_sys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, multi_sys, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pygamma.new_multi_sys(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __assign__(self, msys):
        return _pygamma.multi_sys___assign__(self, msys)
    __swig_destroy__ = _pygamma.delete_multi_sys
    __del__ = lambda self: None

    def name(self, *args):
        return _pygamma.multi_sys_name(self, *args)

    def pop(self, *args):
        return _pygamma.multi_sys_pop(self, *args)

    def popmin(self):
        return _pygamma.multi_sys_popmin(self)

    def popmax(self):
        return _pygamma.multi_sys_popmax(self)

    def NComps(self):
        return _pygamma.multi_sys_NComps(self)

    def Comp(self, *args):
        return _pygamma.multi_sys_Comp(self, *args)

    def AddComp(self, sys, pop=0):
        return _pygamma.multi_sys_AddComp(self, sys, pop)

    def CheckComp(self, n):
        return _pygamma.multi_sys_CheckComp(self, n)

    def NExProcs(self):
        return _pygamma.multi_sys_NExProcs(self)

    def ExProc(self, *args):
        return _pygamma.multi_sys_ExProc(self, *args)

    def Kex(self, *args):
        return _pygamma.multi_sys_Kex(self, *args)

    def NCompsLHS(self, iex):
        return _pygamma.multi_sys_NCompsLHS(self, iex)

    def NCompsRHS(self, iex):
        return _pygamma.multi_sys_NCompsRHS(self, iex)

    def homonuclear(self, cmp=-1):
        return _pygamma.multi_sys_homonuclear(self, cmp)

    def heteronuclear(self, cmp=-1):
        return _pygamma.multi_sys_heteronuclear(self, cmp)

    def HS(self, comp=-1):
        return _pygamma.multi_sys_HS(self, comp)

    def LS(self, comp=-1):
        return _pygamma.multi_sys_LS(self, comp)

    def HSs(self):
        return _pygamma.multi_sys_HSs(self)

    def LSs(self):
        return _pygamma.multi_sys_LSs(self)

    def symbol(self, comp, spin):
        return _pygamma.multi_sys_symbol(self, comp, spin)

    def Omega(self, *args):
        return _pygamma.multi_sys_Omega(self, *args)

    def write(self, *args):
        return _pygamma.multi_sys_write(self, *args)

    def read(self, *args):
        return _pygamma.multi_sys_read(self, *args)

    def ask_read(self, *args):
        return _pygamma.multi_sys_ask_read(self, *args)

    def SpinMapStrs(self, exp):
        return _pygamma.multi_sys_SpinMapStrs(self, exp)

    def LHSStrs(self):
        return _pygamma.multi_sys_LHSStrs(self)

    def RHSStrs(self):
        return _pygamma.multi_sys_RHSStrs(self)

    def EXPStrs(self):
        return _pygamma.multi_sys_EXPStrs(self)
multi_sys_swigregister = _pygamma.multi_sys_swigregister
multi_sys_swigregister(multi_sys)


def multize(*args):
    return _pygamma.multize(*args)
multize = _pygamma.multize

def D_basis(msys):
    return _pygamma.D_basis(msys)
D_basis = _pygamma.D_basis

def qStateLS(msys, I):
    return _pygamma.qStateLS(msys, I)
qStateLS = _pygamma.qStateLS

def LS_qState_bra(msys, i):
    return _pygamma.LS_qState_bra(msys, i)
LS_qState_bra = _pygamma.LS_qState_bra

def LS_qState_ket(msys, i):
    return _pygamma.LS_qState_ket(msys, i)
LS_qState_ket = _pygamma.LS_qState_ket

def Fx(*args):
    return _pygamma.Fx(*args)
Fx = _pygamma.Fx

def Fy(*args):
    return _pygamma.Fy(*args)
Fy = _pygamma.Fy

def Fz(*args):
    return _pygamma.Fz(*args)
Fz = _pygamma.Fz

def Fe(*args):
    return _pygamma.Fe(*args)
Fe = _pygamma.Fe

def Fm(*args):
    return _pygamma.Fm(*args)
Fm = _pygamma.Fm

def Fp(*args):
    return _pygamma.Fp(*args)
Fp = _pygamma.Fp

def Rz(*args):
    return _pygamma.Rz(*args)
Rz = _pygamma.Rz

def Ho(*args):
    return _pygamma.Ho(*args)
Ho = _pygamma.Ho

def Hcs(*args):
    return _pygamma.Hcs(*args)
Hcs = _pygamma.Hcs

def HJ(*args):
    return _pygamma.HJ(*args)
HJ = _pygamma.HJ

def Hcs_lab(*args):
    return _pygamma.Hcs_lab(*args)
Hcs_lab = _pygamma.Hcs_lab

def Iypuls(*args):
    return _pygamma.Iypuls(*args)
Iypuls = _pygamma.Iypuls

def Ixpuls_U(*args):
    return _pygamma.Ixpuls_U(*args)
Ixpuls_U = _pygamma.Ixpuls_U

def Iypuls_U(*args):
    return _pygamma.Iypuls_U(*args)
Iypuls_U = _pygamma.Iypuls_U

def Ixypuls_U(*args):
    return _pygamma.Ixypuls_U(*args)
Ixypuls_U = _pygamma.Ixypuls_U

def sigma_eq(*args):
    return _pygamma.sigma_eq(*args)
sigma_eq = _pygamma.sigma_eq

def Hsuper(*args):
    return _pygamma.Hsuper(*args)
Hsuper = _pygamma.Hsuper

def Lo(msys):
    return _pygamma.Lo(msys)
Lo = _pygamma.Lo

def U_LS(H):
    return _pygamma.U_LS(H)
U_LS = _pygamma.U_LS

def Uinv_LS(H):
    return _pygamma.Uinv_LS(H)
Uinv_LS = _pygamma.Uinv_LS

def Op_Ebase(L, H):
    return _pygamma.Op_Ebase(L, H)
Op_Ebase = _pygamma.Op_Ebase

def RQQ(*args):
    return _pygamma.RQQ(*args)
RQQ = _pygamma.RQQ

def RCC(*args):
    return _pygamma.RCC(*args)
RCC = _pygamma.RCC

def RDD(*args):
    return _pygamma.RDD(*args)
RDD = _pygamma.RDD

def RCQ(*args):
    return _pygamma.RCQ(*args)
RCQ = _pygamma.RCQ

def RQC(*args):
    return _pygamma.RQC(*args)
RQC = _pygamma.RQC

def Xm(msys):
    return _pygamma.Xm(msys)
Xm = _pygamma.Xm

def Xnm(*args):
    return _pygamma.Xnm(*args)
Xnm = _pygamma.Xnm

def Xnmp(*args):
    return _pygamma.Xnmp(*args)
Xnmp = _pygamma.Xnmp

def Xnmpdblk(ostr, msys, K, Io, Iend):
    return _pygamma.Xnmpdblk(ostr, msys, K, Io, Iend)
Xnmpdblk = _pygamma.Xnmpdblk

def Xnmpblk(ostr, msys, Pro, K, cmpI, cmpJ, Io, Iend, Jo, Jend):
    return _pygamma.Xnmpblk(ostr, msys, Pro, K, cmpI, cmpJ, Io, Iend, Jo, Jend)
Xnmpblk = _pygamma.Xnmpblk

def XXnm(msys):
    return _pygamma.XXnm(msys)
XXnm = _pygamma.XXnm
class SpinMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpinMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpinMap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sub1"] = _pygamma.SpinMap_sub1_set
    __swig_getmethods__["sub1"] = _pygamma.SpinMap_sub1_get
    if _newclass:
        sub1 = _swig_property(_pygamma.SpinMap_sub1_get, _pygamma.SpinMap_sub1_set)
    __swig_setmethods__["sp1"] = _pygamma.SpinMap_sp1_set
    __swig_getmethods__["sp1"] = _pygamma.SpinMap_sp1_get
    if _newclass:
        sp1 = _swig_property(_pygamma.SpinMap_sp1_get, _pygamma.SpinMap_sp1_set)
    __swig_setmethods__["sub2"] = _pygamma.SpinMap_sub2_set
    __swig_getmethods__["sub2"] = _pygamma.SpinMap_sub2_get
    if _newclass:
        sub2 = _swig_property(_pygamma.SpinMap_sub2_get, _pygamma.SpinMap_sub2_set)
    __swig_setmethods__["sp2"] = _pygamma.SpinMap_sp2_set
    __swig_getmethods__["sp2"] = _pygamma.SpinMap_sp2_get
    if _newclass:
        sp2 = _swig_property(_pygamma.SpinMap_sp2_get, _pygamma.SpinMap_sp2_set)

    def SMfatal(self, eidx):
        return _pygamma.SpinMap_SMfatal(self, eidx)

    def SMerror(self, *args):
        return _pygamma.SpinMap_SMerror(self, *args)

    def getSMStr(self, pset, idx, mdx, sm, warn=True):
        return _pygamma.SpinMap_getSMStr(self, pset, idx, mdx, sm, warn)

    def getSM(self, pset, idx, mdx, comp1, spin1, comp2, spin2, warn=True):
        return _pygamma.SpinMap_getSM(self, pset, idx, mdx, comp1, spin1, comp2, spin2, warn)

    def setSM(self, pset, idx, mdx, warn=True):
        return _pygamma.SpinMap_setSM(self, pset, idx, mdx, warn)

    def Check(self, *args):
        return _pygamma.SpinMap_Check(self, *args)

    def __init__(self, *args):
        this = _pygamma.new_SpinMap(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __assign__(self, SM):
        return _pygamma.SpinMap___assign__(self, SM)
    __swig_destroy__ = _pygamma.delete_SpinMap
    __del__ = lambda self: None

    def Sub1(self):
        return _pygamma.SpinMap_Sub1(self)

    def Sub2(self):
        return _pygamma.SpinMap_Sub2(self)

    def Spin1(self):
        return _pygamma.SpinMap_Spin1(self)

    def Spin2(self):
        return _pygamma.SpinMap_Spin2(self)

    def read(self, *args):
        return _pygamma.SpinMap_read(self, *args)

    def lsprint(self):
        return _pygamma.SpinMap_lsprint(self)
SpinMap_swigregister = _pygamma.SpinMap_swigregister
SpinMap_swigregister(SpinMap)

# This file is compatible with both classic and new-style classes.


